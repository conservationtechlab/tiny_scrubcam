/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 25.07.2024 20:30:08

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 44366, -41587, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00010912356083281338, 0.00011372304288670421, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 32,-29,-56,90,-54,11,-34,58,114,-11,-18,-34,-32,66,-10,28,94,-105,-38,-62,127,117,82,-71,-83,-92,9,65,11,-47,58,56, 
  /* [1][0][][] */ 51,66,67,-55,-66,67,-7,13,-33,-14,33,96,100,39,31,0,-34,5,-52,-79,-69,29,31,96,81,68,-45,-3,97,-92,-127,-15, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0039142807945609093, 0.0040792650543153286, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 241, 211, 211, -350, -331, 241, -394, 346, -180, -211, 210, 245, 260, 298, -107, -391, -173, -1661, -403, -329, -73, 234, 58, 153, 246, 186, -43, -459, 296, -186, 1307, -289, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.0927228837972507e-05, 4.3942920456174761e-05, 4.169605381321162e-05, 4.086962144356221e-05, 3.9770966395735741e-05, 4.0059057937469333e-05, 4.0873102989280596e-05, 4.1667957702884451e-05, 4.1543258703313768e-05, 4.3087027734145522e-05, 4.2655301513150334e-05, 4.1667048208182678e-05, 4.1359322494827211e-05, 4.1523129766574129e-05, 4.635061850422062e-05, 4.1543047700542957e-05, 4.2211944673908874e-05, 5.8078818256035447e-05, 4.1399416659260169e-05, 4.3216186895733699e-05, 4.1292107198387384e-05, 3.8804828363936394e-05, 4.4803931814385578e-05, 4.3724961869884282e-05, 4.7076784539967775e-05, 4.5272870920598507e-05, 4.0866492781788111e-05, 4.162809273111634e-05, 4.5959030103404075e-05, 3.9557889977004379e-05, 6.1709833971690387e-05, 4.1806117224041373e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -29,-46,107,12,103,1,-86,-92,70,-88,-106,7,64,17,-29,62,-51,-24,-60,-54,-64,-98,8,110,-127,16,91,-44,118,8,-13,-78,91,-56,-89,72,-109,-86,-84,32,77,-84,-103,108,62,-111,121,-14,16,-54,-30,94,-71,-45,-86,116,32,77,120,-109,-67,92,-43,55,-1,22,78,100,61,102,98,-114,111,-104,49,89,-107,22,-64,37,56,23,100,-12,-58,-41,-86,106,29,116,-6,-115,18,87,32,13, 
  /* [1][0][][] */ -46,35,-66,4,-32,91,40,21,77,-84,-98,111,72,-18,35,66,113,-32,45,120,-37,4,40,29,19,24,-25,109,18,16,102,-55,65,108,0,35,58,56,-3,-53,-63,5,-23,-86,-21,29,-17,-49,-17,-77,114,44,16,87,-64,-38,28,106,56,80,-42,121,-56,-69,-47,42,82,44,109,38,27,16,-99,90,-41,46,84,-34,-38,74,-73,85,-43,-127,28,110,-65,-67,74,71,94,28,87,104,32,-13, 
  /* [2][0][][] */ 55,41,-60,100,-16,-46,92,108,-100,101,-34,127,100,-8,95,-108,-50,-19,45,62,-89,-7,117,24,-41,88,120,16,-62,91,87,101,-61,-12,-84,-102,-78,93,117,-18,-121,-77,12,1,-72,111,-13,-74,105,42,95,-102,-42,70,34,27,-69,106,-65,3,-3,71,-27,77,101,55,57,91,-87,79,19,-66,44,-74,39,29,-51,-13,7,13,41,-94,-3,-58,1,-98,-19,-34,89,108,-21,11,-39,-69,-41,-77, 
  /* [3][0][][] */ 70,-6,35,-28,-79,47,-122,36,51,16,61,1,89,94,69,0,101,93,-63,8,113,-95,-73,-124,-24,-122,-90,105,40,-108,84,2,-64,-43,-23,-20,-100,-28,38,44,-31,-99,-99,-5,71,24,-57,-91,63,-91,40,27,93,23,87,-108,-125,-127,-124,-67,-103,32,-44,71,52,-41,-69,-39,-39,-73,-2,98,15,-105,51,-56,28,94,94,-68,-97,-127,32,96,26,40,-49,-126,-90,43,-6,-117,92,-101,-97,45, 
  /* [4][0][][] */ 47,103,-6,50,-36,-30,26,11,69,86,-13,49,22,-44,-21,-73,-31,-12,-72,8,107,-103,87,19,-17,-12,59,-67,-58,31,-78,-62,65,113,8,-113,-56,-8,-125,45,-56,-60,-78,-99,29,109,30,58,16,-51,-23,-75,-99,43,-97,14,34,-107,38,10,2,-84,-44,-76,-57,52,-6,-44,21,-107,-106,-95,-64,22,100,56,60,-29,-12,-63,0,-52,-110,67,-2,70,95,0,-127,-75,43,40,24,101,-107,-17, 
  /* [5][0][][] */ 110,-92,83,92,47,-106,31,71,111,-106,0,-62,33,110,49,42,73,71,-64,109,42,63,23,-26,-123,-59,-2,-89,58,43,23,-97,-33,10,-64,25,-112,-40,59,31,-98,-58,40,108,-23,18,47,-51,-108,115,30,16,46,23,48,-14,113,62,-61,-42,48,-60,47,-69,-24,114,-19,34,86,11,118,-67,-41,83,-23,-75,15,-41,14,91,114,47,36,94,-85,83,-6,36,70,-110,127,97,-12,44,82,-95, 
  /* [6][0][][] */ 14,-48,112,74,-90,-69,-9,62,-15,-90,0,-92,85,53,114,-126,39,-2,-8,101,-83,-124,106,60,-65,-89,-12,-63,-32,-121,42,-84,-94,-127,-50,-112,-13,35,-117,78,82,53,22,-20,-117,104,-90,-52,-87,12,-32,-70,55,-60,90,-30,2,-12,-74,110,-102,-1,62,-79,-56,63,98,-54,76,-8,-110,-10,54,-76,-98,-47,-87,-102,-62,-32,30,-33,40,-30,-77,-94,-47,-100,81,92,94,14,-58,-72,72,-35, 
  /* [7][0][][] */ 123,79,-36,-39,-68,121,-15,12,127,14,-88,19,62,-82,56,84,56,23,11,120,67,42,4,84,-70,110,50,66,-73,116,-14,41,30,30,74,107,-99,95,2,-28,96,-69,86,77,58,1,108,-105,51,-47,-105,-67,-18,92,28,34,122,-83,9,-52,26,-2,90,-107,-64,-51,78,28,-102,23,77,94,90,38,69,67,-55,56,-94,52,98,-34,-14,-74,93,39,-104,100,89,10,92,66,-51,-24,7,-62, 
  /* [8][0][][] */ 7,30,-50,-98,53,18,-80,-33,22,27,44,87,-5,-48,-94,-79,-80,88,-76,8,26,-27,76,104,-104,87,33,68,-77,10,-98,113,90,-40,39,-6,103,6,-28,65,83,102,-120,-126,-21,-23,-34,107,13,-97,-69,14,-71,-17,-40,-118,53,99,-96,105,104,34,36,102,-43,-54,-31,96,-95,36,31,-9,68,74,3,21,-53,91,77,73,30,81,-127,-66,25,41,76,-41,37,-35,-89,96,-84,-105,-53,75, 
  /* [9][0][][] */ -2,6,113,46,78,-108,-49,-127,26,40,-9,55,-31,-84,-108,-29,0,-5,-109,-68,-6,87,-103,-96,103,-14,-21,20,-18,-68,-85,94,55,-5,21,-27,-79,13,-39,-44,50,-57,63,-91,72,27,-108,36,40,-15,-86,-51,76,-76,-70,96,76,-60,-8,2,-97,101,73,-74,-90,0,94,40,-46,105,99,-88,4,72,-107,-91,-86,-123,-44,94,34,24,93,24,-45,-95,43,-12,92,26,-37,111,104,-17,62,-36, 
  /* [10][0][][] */ -50,83,92,-58,-9,120,110,41,37,46,25,-55,109,89,-19,14,-22,87,-84,-54,-8,39,60,-63,13,62,-97,-104,-39,90,-84,-72,92,108,127,81,-32,3,-23,44,-39,111,-110,-31,-81,-67,10,-57,3,9,41,-6,66,27,-50,-24,-97,-3,26,-45,12,91,117,48,125,-65,-85,-17,32,-7,-81,-60,95,66,-76,106,-13,74,66,24,79,5,62,83,-100,65,99,-32,33,0,0,-62,-43,-28,-39,-76, 
  /* [11][0][][] */ 119,18,-12,112,123,62,56,49,127,108,-74,125,3,-76,42,-58,-47,-96,76,47,49,86,29,-112,-126,-88,-1,79,87,7,33,-12,-80,-65,62,54,-52,76,-12,-54,-30,109,-80,14,-27,-65,-77,-82,76,110,118,47,-87,-83,31,34,-64,-46,-29,-89,-58,101,95,15,39,96,-47,33,98,71,-66,-64,52,113,-93,55,-63,43,-44,96,-103,-21,-63,-50,49,-81,16,-20,-94,-17,17,-100,-79,-11,-61,-47, 
  /* [12][0][][] */ 23,74,-52,8,95,23,-31,49,-73,75,-11,25,-35,21,62,-74,-90,-25,-37,-74,38,0,24,102,-83,-41,117,-91,103,26,-28,125,-79,-62,-36,24,8,-77,-7,52,114,41,-112,-32,-8,-88,-27,123,-39,-111,-72,97,44,8,-71,97,-18,-48,54,70,76,127,4,63,123,44,-36,124,68,115,54,81,96,119,-9,-3,-29,46,-114,-88,-53,109,55,2,-34,33,57,116,-94,-115,99,49,110,3,36,68, 
  /* [13][0][][] */ 119,-54,106,104,100,126,86,78,82,-91,17,-20,100,80,79,-42,-114,-65,-58,37,82,-19,127,-47,-74,49,19,29,-81,-80,91,44,48,112,-12,46,-75,-26,37,75,-66,82,-53,21,-33,26,7,-23,33,111,-28,-111,-92,33,113,-75,-44,38,-21,-74,-8,126,-67,22,-44,-56,-83,92,-28,-4,109,7,-85,46,-69,-38,-100,74,87,-56,59,-93,104,15,-84,-101,96,120,-8,-53,-71,58,121,-31,76,-8, 
  /* [14][0][][] */ -55,-95,74,61,67,-30,-18,-96,-73,-29,59,74,-26,-75,-79,-84,-46,-56,20,25,-39,33,4,51,-109,-65,-22,32,-101,-100,-73,29,94,-23,-26,2,93,103,34,-94,-16,-116,28,83,62,-127,61,-77,97,33,64,28,88,-18,-11,14,-46,13,44,76,-4,-72,-21,66,-84,-11,74,-102,-80,-81,-79,85,6,73,47,-70,52,-88,55,32,39,-28,-102,-50,-109,-90,-101,89,96,0,78,-52,75,99,-15,50, 
  /* [15][0][][] */ 7,-31,-34,65,85,-96,55,-106,58,-13,-76,1,97,-7,-100,-116,80,2,-102,16,42,8,67,99,83,60,29,87,12,49,59,-109,-5,-2,-73,-13,-75,111,104,-77,12,110,-52,-29,17,-80,-57,-85,-15,-86,-11,34,-106,-110,-57,-18,62,44,-51,107,-49,-76,-5,97,-45,89,-79,-4,-69,-4,54,-81,8,-15,53,-111,-7,44,101,74,-88,53,-118,-59,-127,-40,-98,38,82,69,-119,-49,47,104,-113,114, 
  /* [16][0][][] */ -76,1,101,-67,37,95,-56,28,53,34,-106,59,-23,-54,-63,-60,96,71,61,58,104,69,-41,48,-13,48,-84,58,-107,2,34,6,-112,69,47,51,-43,59,-58,-79,27,-40,74,84,49,112,88,-14,-64,-111,3,127,-44,109,55,35,26,78,74,15,103,95,27,56,46,4,-44,88,35,83,-40,-15,19,94,57,89,-13,85,-107,-15,12,-84,50,34,12,104,103,17,82,23,-17,107,62,-49,-86,39, 
  /* [17][0][][] */ 41,-117,19,75,-17,-17,-75,-48,5,-18,13,84,109,40,-47,3,67,55,68,102,-74,1,-13,6,-29,48,9,19,94,18,-12,66,-7,2,42,7,-2,21,-42,41,-106,-76,-23,2,56,-40,116,-90,106,31,-22,-12,-17,68,89,-17,-113,105,-85,-121,35,0,52,68,-21,0,30,-87,-48,52,84,8,66,-122,-69,11,56,18,10,-53,-13,-23,-24,-111,-127,14,30,-37,-42,6,-70,-56,4,91,-6,-53, 
  /* [18][0][][] */ -101,94,101,-79,-16,-119,-112,-7,-13,70,-117,-55,-43,30,53,-65,14,-30,50,-32,93,-50,13,-86,22,-105,-24,105,21,27,-8,35,39,-34,-116,-114,-42,25,-47,57,-51,-8,-57,-16,-121,10,21,-9,13,-32,62,26,-118,-18,-6,80,-50,28,-25,-125,76,102,3,28,-77,-127,-40,83,61,-86,-80,100,-104,-43,-95,-113,47,50,-9,-82,-65,-16,-26,-75,97,-40,61,61,-116,-81,-69,100,81,-61,38,-26, 
  /* [19][0][][] */ 17,31,72,35,52,-84,89,78,84,-67,22,-12,-96,28,-60,58,69,-103,92,53,-28,71,-57,16,74,-82,24,-68,-93,-118,-67,41,74,-82,27,-9,4,-74,-60,-99,41,-109,-76,8,-80,38,70,-93,-28,31,-45,55,-36,11,2,-10,15,91,-5,-26,49,-54,94,55,-75,-5,-34,-5,-15,51,69,-54,-62,-127,-57,-78,-20,-109,10,103,54,-109,-35,76,-79,-4,7,0,81,30,-6,62,-37,98,63,-47, 
  /* [20][0][][] */ -12,74,71,94,-90,83,15,53,31,6,-84,3,-11,90,36,-72,-59,-40,-70,-33,27,-48,-77,-75,96,-75,-110,44,20,9,-42,108,100,42,-18,53,37,-24,-17,-116,-85,-29,-88,-106,-33,-48,-69,110,55,-120,-101,47,48,113,49,-3,91,66,104,89,106,-61,-66,-37,-30,-71,-57,12,-88,-85,-63,78,-67,-76,30,23,108,71,114,111,87,4,82,-8,62,127,-11,86,26,108,29,64,18,17,-5,17, 
  /* [21][0][][] */ 104,88,78,-106,107,-62,87,24,-15,-64,-76,41,7,41,-53,-88,-104,-28,35,-10,114,-56,86,-95,51,-89,-31,89,21,9,0,-16,2,26,-94,-127,126,106,-118,-38,-10,17,30,-9,-105,-92,-86,102,-37,-69,-8,89,45,82,-94,32,-64,64,-52,127,70,-75,21,-4,92,40,-34,-72,-108,1,62,89,39,-19,83,78,-115,-37,71,113,17,110,40,-86,28,-103,74,-89,-112,83,117,-125,-53,-73,77,-38, 
  /* [22][0][][] */ 29,-45,-66,-94,86,-49,103,60,-99,84,-66,-104,108,-107,-108,-75,37,78,-103,-55,78,-73,40,29,81,-6,-106,103,-51,-74,-57,-104,46,59,21,8,13,-21,-50,-109,-11,-5,-1,93,52,-119,85,-24,-69,-80,5,-16,-53,-82,-46,35,-22,-25,-14,-30,114,-70,-78,-102,-55,22,-106,-44,109,93,-26,0,-64,5,63,-89,51,-47,66,86,103,-95,-74,-127,71,76,96,-37,-52,21,-68,57,13,16,-27,85, 
  /* [23][0][][] */ 68,-85,7,57,96,-94,6,-91,49,-64,81,78,23,-97,25,-35,90,-30,-98,98,90,-72,103,-32,-33,-7,89,26,73,53,76,-34,-32,48,25,37,99,-15,-101,4,-104,1,3,-103,-59,-94,118,28,74,-102,-87,-58,80,-54,-39,93,-76,-15,92,43,-102,-80,-47,-5,38,43,-109,-103,65,-13,113,-67,1,-41,-33,-94,46,-14,88,113,-51,-45,22,-127,89,4,107,-29,-91,33,103,-5,105,-35,-35,68, 
  /* [24][0][][] */ -56,-43,-88,-50,-66,-72,-55,-65,59,127,76,62,116,66,-19,-101,-57,47,40,-37,97,-60,-44,-26,34,-14,85,59,107,62,16,-43,11,20,56,40,-37,-77,68,-9,-69,-92,93,10,37,-39,57,67,-74,-30,-10,-11,71,61,81,-52,5,83,20,3,96,13,42,95,-74,100,-29,-73,-78,66,-39,-15,-22,42,90,93,60,-56,-93,-70,-65,-71,-47,-121,1,55,-11,-92,21,-103,12,-62,3,53,-75,20, 
  /* [25][0][][] */ -72,-52,-70,-2,91,-50,-93,64,41,-89,-34,30,76,6,-90,-18,-58,62,38,-95,72,86,-6,-50,-6,-41,-79,42,78,-70,44,114,94,-95,49,75,105,-65,-7,-11,-83,88,-102,9,104,28,74,34,-96,89,-61,-10,46,-13,-44,18,-17,58,-102,69,127,52,57,48,10,79,-8,-3,-74,9,-13,-98,42,-109,71,21,70,79,12,21,49,50,-38,65,-71,-50,-95,-87,-25,-51,100,25,-100,9,-12,-94, 
  /* [26][0][][] */ 55,-115,-23,-15,-100,-17,-11,-16,-92,-127,116,90,-85,-47,7,-15,108,28,-80,-70,19,72,102,15,70,66,6,43,11,2,-93,-7,-24,-65,-104,-105,-68,95,-52,105,-91,110,61,30,-77,86,-42,107,-26,40,0,112,12,-49,-3,-113,109,59,62,33,0,-105,69,-24,115,-26,-59,57,-94,76,94,100,78,-91,-90,15,44,-109,-96,11,-28,80,86,-51,80,10,-39,27,-76,125,12,18,-55,117,57,101, 
  /* [27][0][][] */ 3,3,-70,-111,-127,-75,-77,-25,36,91,30,-114,-36,48,74,-35,61,-23,54,-90,-102,2,-35,-29,-110,37,-116,-9,56,20,-40,-17,53,61,-99,-95,-92,-73,-120,83,-102,14,24,13,94,20,60,97,87,60,54,-79,-97,-92,-13,-42,93,-32,-117,-84,-62,-68,-41,47,32,-55,-120,97,41,3,-126,-1,53,-58,-16,-94,43,-70,82,96,77,-34,109,-50,-82,-88,-41,30,-56,-9,-44,-59,47,10,82,51, 
  /* [28][0][][] */ 82,14,95,42,-104,-41,-91,-68,-16,-107,57,58,-70,-78,7,109,94,106,-72,54,-6,15,-100,-82,-127,69,-66,-37,-62,-44,0,-9,-121,20,67,72,12,-121,-29,15,96,49,-91,58,-107,7,7,57,19,-76,-74,-31,-71,35,49,27,60,-11,61,50,14,-30,-74,2,59,84,-17,85,-60,12,-93,-30,69,-9,4,-72,-89,-100,-78,57,-57,-80,104,-76,62,-96,49,-77,-93,-82,-20,-67,-32,67,-116,-79, 
  /* [29][0][][] */ 52,51,60,-55,-96,4,-127,4,126,-20,-94,-100,109,-108,-55,-52,-113,103,28,-71,-75,-34,54,3,-22,6,-52,-37,-112,-11,104,-8,56,-3,-88,-60,-14,117,-10,94,53,111,-50,83,-5,115,-60,-27,20,-7,61,-84,74,-109,115,46,-94,53,-48,111,-127,98,-102,-58,-70,-72,52,90,96,-95,42,-77,115,93,61,29,116,-68,-32,36,-7,-89,-11,-58,66,124,50,93,-36,109,74,83,-107,18,-3,73, 
  /* [30][0][][] */ 18,44,-2,41,-37,22,-6,1,98,-22,54,-23,-73,15,30,65,0,37,57,-64,27,-74,-47,44,9,29,-64,97,-2,-83,-41,11,-47,-42,-86,-21,36,23,9,6,118,16,34,97,77,29,64,70,-22,61,39,-12,103,-2,17,63,-8,-45,-14,25,-49,4,-34,4,-68,-54,-54,87,-42,78,32,-6,-60,88,58,-1,-11,-33,-18,-17,59,39,-67,74,-38,81,-36,127,43,-26,70,69,-7,2,28,4, 
  /* [31][0][][] */ 78,-96,34,98,47,60,-63,-103,-30,-27,-83,-93,95,-126,-52,108,-66,-96,37,46,62,28,-36,103,53,-118,32,38,-75,-76,46,105,12,17,-96,-11,93,-29,-69,-116,56,-73,-31,28,2,-55,-44,24,68,20,94,-33,-119,-62,-86,19,-121,64,1,112,-42,-7,87,-79,68,110,-49,-82,70,-121,-127,7,-103,-40,-1,4,-62,-50,49,89,-79,-44,57,71,51,96,-98,18,17,-49,-87,-59,8,100,-7,-19, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017834495520219207, 0.0019148616120219231, 0.0018169519025832415, 0.0017809392884373665, 0.0017330640694126487, 0.0017456180648878217, 0.001781090977601707, 0.0018157276790589094, 0.0018102936446666718, 0.0018775651697069407, 0.0018587522208690643, 0.0018156879814341664, 0.0018022785661742091, 0.0018094165716320276, 0.0020197797566652298, 0.0018102845642715693, 0.0018394325161352754, 0.0025308490730822086, 0.0018040256109088659, 0.0018831935012713075, 0.0017993494402617216, 0.0016909635160118341, 0.0019523812225088477, 0.0019053638679906726, 0.0020514233037829399, 0.0019728157203644514, 0.0017808029660955071, 0.0018139905296266079, 0.0020027158316224813, 0.0017237791325896978, 0.0026890747249126434, 0.0018217480974271894, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1834, -74, 3895, 5724, 5810, -2766, 5070, -1470, -2448, -1093, 5710, -2956, 5734, 6377, 2986, 2402, -1030, -604, -2357, 5995, 2603, -936, 3130, -888, -1062, 4289, 1941, 2391, 7459, 2547, 5068, 1344, 1341, 6006, 7300, 4484, -680, 3723, 3160, -5817, -298, 1823, -33, 1829, -1382, 521, -1647, 1002, -9482, 2114, 1283, -5307, 8329, -819, 2414, 1676, 1140, 3912, -1044, -2712, 192, 1918, 463, 4984, 5675, 3619, 4124, 6940, 5825, -796, 3003, 6551, 3754, -1737, 4924, 7861, 973, -4269, 547, 1540, 9466, 1997, -450, -2988, 1208, 774, 1976, -2591, 4151, -578, 4588, 1537, 31, -4542, -220, 1932, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.0001097048880183138, 0.0001907299883896485, 0.00014274286513682455, 0.0001335988927166909, 0.00010919541819021106, 0.00015281357627827674, 0.00011762158828787506, 0.00016608444275334477, 0.00015850139607209712, 0.00014014491171110421, 0.00010448133252793923, 0.00015101689496077597, 9.8362157586961985e-05, 9.4555485702585429e-05, 0.00010620793182170019, 0.00017433187167625874, 0.00017375523748341948, 0.00017192710947711021, 0.00013416167348623276, 0.00010313536040484905, 0.00016211761976592243, 0.0001402127236360684, 0.00011378791532479227, 0.00014971083146519959, 0.00020098197273910046, 0.00014028398436494172, 0.0001528600841993466, 0.00013922688958700746, 9.6739015134517103e-05, 0.00016741779108997434, 0.00010343528265366331, 0.00016895844601094723, 0.00020839154603891075, 9.9433382274582982e-05, 8.2417383964639157e-05, 0.00010980666411342099, 0.000159392089699395, 0.00012479902943596244, 0.00012405775487422943, 9.0163375716656446e-05, 0.00018518725119065493, 0.00011104617442470044, 0.00024556339485570788, 0.0001442946377210319, 0.00018140608153771609, 0.00014522673154715449, 0.00015181697381194681, 0.00014359524357132614, 7.6282951340544969e-05, 0.00012125456851208583, 0.00019786359916906804, 9.5355702796950936e-05, 9.0355366410221905e-05, 0.00020657012646552175, 0.00013777491403743625, 0.00015171460108831525, 0.00015887767949607223, 9.9441109341569245e-05, 0.0001430188276572153, 0.00011577880650293082, 0.00020102628332097083, 0.00014415578334592283, 0.00017293624114245176, 0.00013221088738646358, 0.00012097433500457555, 0.00013248044706415385, 9.3263181042857468e-05, 0.00010738192213466391, 0.00011454473133198917, 0.00017151769134216011, 0.00016074239101726562, 0.00010342986206524074, 0.00012196690659038723, 0.00013499254419002682, 0.00014235232083592564, 0.00010174635826842859, 0.00010617002408253029, 0.00014921808906365186, 0.00016061516362242401, 0.00012930935190524906, 8.9043525804299861e-05, 0.00014753409777767956, 0.00019020400941371918, 0.00011941588309127837, 0.00016537646297365427, 0.00014892808394506574, 0.00013204527203924954, 0.00013177927758079022, 0.00014764680236112326, 0.00013864673383068293, 0.00013047152606304735, 0.00013998127542436123, 0.00012693947064690292, 9.7229501989204437e-05, 0.00018666269897948951, 0.00013898038014303893, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -14,111,-74,29,42,-36,88,71,-54,10,33,-83,84,127,-67,23, 
  /* [1][0][][] */ -17,2,-53,-31,-5,40,19,-127,35,-49,-27,-53,-17,-43,-50,1, 
  /* [2][0][][] */ -16,-29,33,80,34,44,-114,127,-14,-4,69,-68,-26,-73,-39,59, 
  /* [3][0][][] */ 81,-83,80,-14,-10,-39,-27,127,-33,65,73,57,0,62,0,18, 
  /* [4][0][][] */ -49,-15,-6,44,-100,12,-20,-125,-10,-4,41,-6,49,55,102,127, 
  /* [5][0][][] */ 127,29,-28,-21,-86,16,27,67,11,-16,57,83,116,34,-78,-3, 
  /* [6][0][][] */ 8,-35,-64,-68,-92,-6,7,-50,-62,-52,-23,33,110,53,127,-2, 
  /* [7][0][][] */ -56,40,-28,-83,1,-60,-67,12,-96,58,-60,-52,-127,-35,13,91, 
  /* [8][0][][] */ 50,51,67,12,48,27,70,9,59,-19,45,6,-127,-20,-77,16, 
  /* [9][0][][] */ -35,65,31,-48,-28,-16,27,-15,-35,51,-38,19,39,127,27,26, 
  /* [10][0][][] */ 83,49,-63,69,-39,-14,48,-63,-86,-51,-58,-117,-127,-84,13,121, 
  /* [11][0][][] */ 41,19,62,5,-16,-37,11,105,-82,34,-29,13,-9,-10,62,127, 
  /* [12][0][][] */ -60,-6,23,-10,14,-6,127,37,-64,34,6,-1,-4,80,-58,119, 
  /* [13][0][][] */ -3,46,27,42,86,19,113,94,-47,127,-62,-44,46,95,-115,-7, 
  /* [14][0][][] */ -116,127,12,-22,-8,-4,61,-1,-33,35,102,-1,-86,19,-42,54, 
  /* [15][0][][] */ -10,-10,-127,-37,84,-36,-86,-41,-22,-17,-13,-64,-11,-70,-49,42, 
  /* [16][0][][] */ 123,-31,-2,0,41,-25,43,-28,-37,14,127,43,55,8,-37,17, 
  /* [17][0][][] */ 20,15,-28,-87,-8,-56,106,-127,-1,-28,-52,33,31,73,12,42, 
  /* [18][0][][] */ 37,115,-20,-57,63,-79,-34,-62,-51,127,-22,4,-30,49,-6,-37, 
  /* [19][0][][] */ -76,-106,111,-95,28,-127,45,-36,30,47,93,103,40,-5,54,-20, 
  /* [20][0][][] */ -16,109,61,4,13,0,23,-26,58,-3,99,-19,-127,-24,-76,-11, 
  /* [21][0][][] */ -64,44,24,13,60,31,70,49,-127,52,-30,20,-28,19,-64,-20, 
  /* [22][0][][] */ 13,-82,37,13,11,-127,117,7,9,-48,-34,-79,55,-81,-53,-44, 
  /* [23][0][][] */ -60,-104,40,68,27,-18,15,-45,17,-49,81,6,5,71,90,127, 
  /* [24][0][][] */ 1,-7,17,75,41,9,-57,-127,67,14,-38,14,8,-1,-24,-28, 
  /* [25][0][][] */ -4,27,13,-43,-27,1,7,-34,-29,44,-45,-16,33,127,34,0, 
  /* [26][0][][] */ -69,87,7,17,25,-87,-2,-29,9,24,12,75,15,6,-84,127, 
  /* [27][0][][] */ -10,-127,-45,10,-57,94,-7,-61,23,-41,49,-33,28,-48,-97,-24, 
  /* [28][0][][] */ -40,5,42,78,23,7,-37,-127,-119,54,108,-6,79,9,-52,-19, 
  /* [29][0][][] */ -127,113,-13,-34,-31,17,-113,-64,-45,-25,-1,3,15,-50,-114,71, 
  /* [30][0][][] */ 45,76,-44,71,-102,-93,-62,-10,-42,-3,7,-100,127,32,-16,92, 
  /* [31][0][][] */ 127,34,-52,-39,-66,11,100,41,-57,-19,63,52,34,25,-27,8, 
  /* [32][0][][] */ -27,-20,127,3,-15,71,74,19,-21,-14,-13,22,4,66,59,37, 
  /* [33][0][][] */ -2,25,-62,-51,-31,21,127,26,-7,-10,26,-73,99,109,-52,50, 
  /* [34][0][][] */ -96,-28,95,23,29,-52,117,-11,-127,36,53,-37,54,52,-66,-27, 
  /* [35][0][][] */ -7,33,-40,7,-72,116,-28,-19,-18,127,4,95,-59,72,8,43, 
  /* [36][0][][] */ -7,-79,127,-42,-49,18,-41,-8,21,18,-56,73,-4,-87,-38,42, 
  /* [37][0][][] */ 99,-12,72,-27,127,-64,-54,31,-61,116,-76,-7,-101,-42,110,-30, 
  /* [38][0][][] */ 23,64,23,-127,-19,-69,-95,64,-112,78,-81,-31,-88,-109,-121,89, 
  /* [39][0][][] */ -73,24,-55,-27,-84,-74,65,15,-127,-39,20,85,31,3,1,51, 
  /* [40][0][][] */ 127,28,5,-69,-58,32,11,-28,-39,-33,-48,-74,1,46,46,25, 
  /* [41][0][][] */ 98,-81,-60,-49,-10,-5,-67,-18,61,-31,1,-61,127,-75,58,-37, 
  /* [42][0][][] */ -18,-93,-40,127,6,-91,-99,13,19,12,12,38,-80,78,-56,-10, 
  /* [43][0][][] */ -79,-36,-36,-116,-53,4,-9,74,47,-127,-40,34,-30,-53,-27,85, 
  /* [44][0][][] */ -33,23,36,-37,-18,-16,25,120,127,-88,75,108,106,46,-17,-4, 
  /* [45][0][][] */ 34,68,-63,90,127,-86,-48,-57,114,-63,59,-59,-38,1,-61,55, 
  /* [46][0][][] */ -26,-34,6,-11,88,-19,33,18,-4,127,-26,-111,39,62,-55,81, 
  /* [47][0][][] */ 87,-40,-31,-8,89,-15,-47,-64,5,127,-34,30,-10,-109,-74,5, 
  /* [48][0][][] */ 16,29,-7,-127,-5,-49,111,-123,6,3,-43,44,54,66,5,36, 
  /* [49][0][][] */ -35,127,-59,29,38,-51,63,56,-31,27,47,-73,-30,79,106,-78, 
  /* [50][0][][] */ 6,46,-12,-6,-127,-2,-65,-55,45,73,34,37,-39,-35,-1,37, 
  /* [51][0][][] */ 127,-48,-54,-9,-45,92,-94,-41,50,-20,-41,68,-36,-73,-5,39, 
  /* [52][0][][] */ -33,-48,57,67,-49,-109,-127,-11,-58,-53,-21,-59,34,-65,0,97, 
  /* [53][0][][] */ 22,91,51,-127,-3,103,82,-24,-6,-18,-2,-36,87,-111,3,56, 
  /* [54][0][][] */ 39,127,10,-14,-3,-90,-112,53,8,-27,-46,124,76,92,30,60, 
  /* [55][0][][] */ -41,-12,45,18,38,-32,94,74,-68,-2,19,17,127,40,-15,8, 
  /* [56][0][][] */ 127,17,8,28,-38,101,-49,-71,-18,38,-80,0,-58,87,-2,31, 
  /* [57][0][][] */ -56,-27,-38,-40,-71,-109,74,-23,-127,-31,63,64,27,39,-21,64, 
  /* [58][0][][] */ 44,-59,60,20,3,-68,-16,8,26,-11,-127,-25,30,-43,-40,47, 
  /* [59][0][][] */ 81,16,-126,103,15,36,88,-28,-74,-63,25,-114,-127,-62,33,110, 
  /* [60][0][][] */ -3,30,-8,26,-22,-30,-17,5,-38,-76,65,121,-41,-127,-37,-4, 
  /* [61][0][][] */ -39,22,77,-104,-79,47,5,111,-18,-93,60,80,103,-4,4,127, 
  /* [62][0][][] */ 65,42,-10,-127,-23,3,5,-34,-15,33,-23,47,26,-14,-84,-56, 
  /* [63][0][][] */ -6,-21,3,-11,-58,-69,-47,8,-70,-9,-25,-6,127,5,37,-3, 
  /* [64][0][][] */ 18,9,-8,45,-106,-43,-11,-78,47,127,39,6,46,-49,-58,117, 
  /* [65][0][][] */ -36,11,-13,-20,-81,67,27,-22,46,-104,103,-53,80,60,-127,69, 
  /* [66][0][][] */ -124,89,-91,-87,43,-35,-111,-73,-110,107,96,4,-127,-64,42,49, 
  /* [67][0][][] */ 2,-28,-127,-116,66,80,10,-26,-29,-3,51,-15,25,43,17,49, 
  /* [68][0][][] */ 46,30,-5,-46,-72,37,25,41,-66,77,122,-10,-7,-45,-127,5, 
  /* [69][0][][] */ 75,-88,52,-52,11,-113,-33,127,-2,63,78,95,-13,61,-33,5, 
  /* [70][0][][] */ 37,21,108,37,88,-16,127,19,25,27,-57,43,-61,69,-76,43, 
  /* [71][0][][] */ 14,22,95,-71,-127,-82,8,8,-18,-19,16,-111,-84,-4,16,21, 
  /* [72][0][][] */ -62,-82,30,-120,76,-9,8,47,-70,18,-125,-15,55,124,-67,127, 
  /* [73][0][][] */ 11,35,58,-13,127,-102,-40,9,-46,109,-87,44,-98,-51,123,-12, 
  /* [74][0][][] */ -93,-3,-116,-59,70,-44,-43,20,-77,-5,-127,-36,-40,-63,-28,68, 
  /* [75][0][][] */ 84,-18,55,-52,11,-1,-127,-25,-10,-93,71,12,7,-12,-15,-7, 
  /* [76][0][][] */ 4,-56,-25,118,46,86,98,-60,90,-127,61,113,33,-90,-65,35, 
  /* [77][0][][] */ -35,-32,127,-15,35,-23,-29,-108,19,22,32,99,35,53,21,-3, 
  /* [78][0][][] */ -48,-1,13,-31,0,-56,30,-9,29,-17,12,-85,-99,-75,-127,-54, 
  /* [79][0][][] */ -108,-85,-28,28,127,48,-13,33,23,30,-16,57,-40,-81,-89,-2, 
  /* [80][0][][] */ 17,-124,43,127,-23,-33,-117,69,6,3,47,-11,-91,-23,-6,35, 
  /* [81][0][][] */ 106,70,-21,76,-14,31,28,127,14,16,124,62,126,34,51,-15, 
  /* [82][0][][] */ -48,11,11,-28,29,-127,-113,-90,6,75,-47,-42,-21,102,-78,-21, 
  /* [83][0][][] */ 106,-14,94,-21,-36,-12,-116,-16,23,-127,13,-66,-23,-8,7,-12, 
  /* [84][0][][] */ 22,-60,-83,29,127,36,25,35,-103,14,-108,-24,37,-34,-56,4, 
  /* [85][0][][] */ 18,91,41,-38,101,5,36,-92,127,-24,32,-4,78,-78,20,-7, 
  /* [86][0][][] */ 123,-42,127,57,-3,-60,76,42,-63,-52,-100,-53,43,15,-68,7, 
  /* [87][0][][] */ 1,5,12,-69,78,-20,-46,12,46,-39,68,-38,-91,-127,-1,19, 
  /* [88][0][][] */ -63,-30,38,-3,31,33,-69,-50,-2,9,-80,-127,-55,-44,-14,-24, 
  /* [89][0][][] */ -66,11,16,-60,29,10,-127,17,94,20,-73,-15,-16,-84,-41,-27, 
  /* [90][0][][] */ -17,-8,-33,-93,127,24,-56,40,41,63,32,-8,38,24,-78,-12, 
  /* [91][0][][] */ -40,-75,30,66,-30,-6,-23,102,-35,-81,15,-65,-28,76,40,127, 
  /* [92][0][][] */ -29,89,0,-14,-21,54,-88,44,-37,-1,59,7,-28,127,41,25, 
  /* [93][0][][] */ -10,75,-46,-76,66,83,-81,7,63,62,75,65,-127,25,-46,75, 
  /* [94][0][][] */ 20,65,91,9,-127,-40,12,-10,19,-21,27,-16,-46,-24,9,-22, 
  /* [95][0][][] */ 8,28,39,7,127,-6,-88,71,21,11,-89,78,4,12,106,-48, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0014382789377123117, 0.0025005533825606108, 0.0018714213510975242, 0.0017515398794785142, 0.0014315996086224914, 0.0020034527406096458, 0.0015420704148709774, 0.0021774396300315857, 0.0020780225750058889, 0.0018373609054833651, 0.0013697958784177899, 0.0019798974972218275, 0.001289570820517838, 0.0012396636884659529, 0.0013924323720857501, 0.0022855668794363737, 0.0022780071012675762, 0.0022540395148098469, 0.0017589180497452617, 0.0013521496439352632, 0.0021254327148199081, 0.0018382499692961574, 0.0014918092638254166, 0.001962774433195591, 0.0026349613908678293, 0.0018391842022538185, 0.0020040625240653753, 0.0018253253074362874, 0.0012682906817644835, 0.0021949203219264746, 0.0013560816878452897, 0.0022151190787553787, 0.0027321041561663151, 0.0013036150485277176, 0.0010805279016494751, 0.0014396132901310921, 0.0020896999631077051, 0.0016361697344109416, 0.0016264512669295073, 0.0011820811778306961, 0.0024278857745230198, 0.0014558638213202357, 0.0032194431405514479, 0.0018917657434940338, 0.0023783128708600998, 0.0019039858598262072, 0.001990386750549078, 0.0018825962906703353, 0.0010001028422266245, 0.0015897003468126059, 0.002594078192487359, 0.0012501549208536744, 0.0011845983099192381, 0.0027082245796918869, 0.0018062893068417907, 0.0019890447147190571, 0.0020829557906836271, 0.001303716329857707, 0.0018750391900539398, 0.0015179107431322336, 0.0026355423033237457, 0.0018899452406913042, 0.0022672696504741907, 0.0017333425348624587, 0.0015860263956710696, 0.001736876554787159, 0.0012227210681885481, 0.0014078238746151328, 0.001501731458120048, 0.0022486718371510506, 0.0021074030082672834, 0.0013560106744989753, 0.0015990394167602062, 0.0017698111478239298, 0.0018663011724129319, 0.0013339391443878412, 0.0013919353950768709, 0.0019563143141567707, 0.0021057350095361471, 0.0016953020822256804, 0.0011673994595184922, 0.001934236497618258, 0.0024936576373875141, 0.0015655943425372243, 0.0021681576035916805, 0.001952512189745903, 0.0017311711562797427, 0.0017276839353144169, 0.0019357140408828855, 0.0018177193123847246, 0.0017105387523770332, 0.0018352157203480601, 0.0016642318805679679, 0.0012747212313115597, 0.0024472295772284269, 0.001822093385271728, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 9597, 13321, -1211, 3636, -770, 8593, 1436, 5154, 16931, -3552, -8631, 7539, -14699, 13247, 4555, 10484, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.7358713345602155e-05, 8.1819765910040587e-05, 4.9000347644323483e-05, 7.0257934567052871e-05, 7.1776739787310362e-05, 6.9816676841583103e-05, 5.4544660088140517e-05, 6.1030259530525655e-05, 9.8076408903580159e-05, 7.2164584707934409e-05, 5.4725358495488763e-05, 5.4749871196690947e-05, 7.95588712207973e-05, 6.5113563323393464e-05, 8.5325758846011013e-05, 7.1573769673705101e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -101,46,48,-19,-83,-3,-70,-17,-42,27,6,-28,48,49,28,-46,19,-6,94,0,15,-66,127,68,71,23,12,25,-66,-108,-99,8,-36,-44,31,38,3,37,2,44,-23,-4,-93,13,-59,-18,-2,90,-20,31,-37,-10,-11,-12,38,-53,-93,13,-32,67,68,28,5,17,-33,-75,-52,26,-76,-55,17,-4,-2,-11,-66,-48,-42,25,-62,-14,-77,65,94,-78,6,68,2,43,34,-19,5,-3,-29,-30,-66,9, 
  /* [1][0][][] */ 31,9,41,-59,-63,-18,-8,23,-22,10,43,-54,11,-28,-49,-25,-11,-2,-66,49,-2,-73,10,55,-25,-62,-6,-47,63,-108,116,-75,63,19,-17,44,33,74,-20,-52,46,26,-1,-13,12,41,-127,-30,-51,-65,-27,-34,39,-44,-47,58,9,-1,-25,23,5,50,-21,-100,-8,-2,-55,-4,10,-7,-87,-21,-40,-14,23,-83,8,21,47,-59,-12,-11,-89,-37,29,-44,-23,34,-78,-8,-60,39,22,60,-55,61, 
  /* [2][0][][] */ 89,-43,33,21,29,-95,68,17,-6,-27,-28,-16,-94,-37,22,-28,-107,-44,-40,59,-5,-46,-52,37,-24,-77,-4,-17,-38,50,-63,127,-71,125,-33,17,2,-26,-23,-23,-100,79,85,4,-86,4,-15,-13,39,-4,-46,-56,58,-4,-39,66,38,-6,59,8,-6,35,-38,6,81,19,1,-13,46,53,-50,-19,56,50,72,40,38,-95,82,63,102,-6,-53,34,-52,22,17,72,7,1,-37,20,-46,55,-21,37, 
  /* [3][0][][] */ 9,-1,-30,17,7,-10,21,-77,-29,67,46,52,24,-4,-67,37,6,-35,28,2,14,127,39,-43,25,23,-19,9,64,-31,60,-18,-22,32,-35,-21,23,55,35,15,-73,-30,-40,25,-37,36,23,-10,-22,-41,7,-17,48,-94,-27,-53,18,100,-34,-8,-1,-13,-37,14,28,36,-47,-15,-31,-3,18,-59,-37,-49,34,-6,17,-5,-59,-43,-37,-13,-57,11,-17,-30,32,-39,-6,33,37,-9,52,29,-38,55, 
  /* [4][0][][] */ 35,17,-47,17,28,28,-54,-7,-32,84,107,-22,8,6,0,-48,7,-31,-31,42,16,-48,48,85,-57,-2,-127,15,-40,-60,1,28,-54,-46,11,66,12,40,24,33,-44,-38,52,-18,0,22,-36,53,-40,69,23,26,35,-23,-79,29,59,-17,1,-10,57,-4,29,18,-56,0,-39,13,-76,30,-46,63,37,-67,-35,-55,22,-47,-15,-8,-54,82,-79,-2,-33,38,23,-66,52,4,37,20,-62,-32,32,32, 
  /* [5][0][][] */ -81,38,44,-9,49,-23,62,-52,-22,51,1,-23,43,-19,-28,-40,-5,-54,65,16,-113,-33,-91,43,-37,-8,64,-2,45,-81,-22,55,76,127,-7,51,-14,22,51,-20,-44,102,74,-21,6,74,52,-1,-4,25,-22,22,2,-49,37,-97,49,-47,-75,-76,74,111,-50,-13,81,-59,-85,-70,-76,-15,-58,-1,-18,15,-21,-49,17,-29,-50,-27,127,-36,15,-94,-100,53,35,-15,-40,51,36,0,-17,35,4,102, 
  /* [6][0][][] */ 42,-9,-76,22,-22,-108,98,88,-51,56,-32,75,-127,-76,64,68,0,-49,-3,8,-13,-8,-62,-58,-65,44,70,36,29,29,84,-53,11,13,15,-71,25,-9,24,60,15,11,-47,-36,-18,-65,-69,20,34,-119,-32,77,39,25,-32,-67,63,40,16,12,-122,38,-85,-7,28,13,5,45,47,19,-2,-60,-32,20,95,35,58,-30,35,-59,-1,-34,-68,67,9,-69,39,4,-48,64,26,25,-26,14,-36,108, 
  /* [7][0][][] */ 35,81,-35,-57,-23,-15,23,21,-56,21,-48,-56,-34,20,19,-14,-43,-50,-35,60,-17,127,5,28,-16,5,16,30,52,44,77,-34,63,30,-21,-3,11,-13,8,23,-57,-11,10,-63,19,-39,70,-21,37,-70,-83,-32,-55,11,-18,-4,20,1,-91,13,-7,101,18,-32,-31,8,-44,21,-39,-23,-100,16,13,68,-44,39,-56,48,28,-67,-15,-49,53,-75,53,-29,-13,9,-9,64,-85,41,52,-36,-40,7, 
  /* [8][0][][] */ -2,89,-56,46,-39,-20,-79,9,-93,-18,19,-1,-32,39,20,83,2,-56,5,-2,38,-10,6,-13,-16,75,5,21,-13,-17,-46,-24,-11,-47,-34,-56,-52,35,46,13,-12,-39,25,24,-33,-30,8,-18,-22,-7,55,74,-10,-36,-58,102,-25,37,-14,-52,-28,15,20,65,-33,-74,-46,-9,-59,15,5,23,-25,-55,-112,-15,-47,39,-82,-52,-49,-12,-33,-39,-13,12,21,20,10,66,-48,6,-91,-127,15,-53, 
  /* [9][0][][] */ -15,16,-59,40,-22,-36,60,62,-7,32,-32,86,-32,-23,34,127,8,15,68,25,8,23,34,-80,-52,-6,17,-5,12,-18,39,44,-33,-1,1,-120,33,-23,-22,-26,-8,18,45,-27,-13,2,17,15,33,72,18,-9,-50,-63,-11,-3,-8,-17,72,-6,-69,49,-60,-30,73,-3,-13,12,-52,13,32,20,-1,82,-21,-26,-25,6,-21,1,59,-22,51,2,33,-32,-13,-25,-52,9,-5,-12,60,32,-39,3, 
  /* [10][0][][] */ 64,-1,-33,-10,-28,-34,70,19,7,-40,-32,1,-102,-21,12,-2,-73,-19,26,29,34,41,25,5,-63,82,33,1,-49,-81,-23,-17,67,-34,48,-1,79,-101,79,121,28,-60,10,-1,-31,-96,-10,62,31,76,-77,-47,-16,41,4,48,7,-67,90,63,-22,46,-68,-29,-6,-41,23,54,38,-36,-16,24,127,40,18,-86,22,-59,72,9,-37,36,32,25,-34,-20,12,43,-45,-15,21,38,39,64,-25,12, 
  /* [11][0][][] */ -52,-42,56,-69,14,-18,-38,-29,49,-63,-11,3,-3,-11,16,10,-64,7,56,22,-52,28,-66,-79,-8,25,-52,40,38,-74,48,-34,16,0,18,-31,-69,3,-123,2,-68,62,-43,45,10,9,-7,-37,24,-47,-80,-56,22,31,76,-56,-30,-74,23,-46,-33,-45,-27,-125,17,-51,75,88,127,15,65,-47,-26,-14,66,-34,93,38,48,62,39,-4,-15,82,97,-8,1,-15,-72,-73,-23,23,59,42,61,78, 
  /* [12][0][][] */ 42,-27,7,-47,44,110,-11,55,50,44,-19,69,-2,44,25,3,-67,67,19,64,123,6,80,-70,15,22,-76,-63,-26,71,8,-3,18,-7,16,-53,57,-23,-43,-43,35,-24,46,38,-40,25,6,-10,-67,13,-5,20,-25,-7,2,11,-56,59,28,64,11,-97,7,-109,-3,121,-6,-38,16,-51,62,-1,1,18,-17,50,-11,37,-59,12,-8,45,127,24,1,59,-21,-69,76,4,-98,34,72,8,-5,-91, 
  /* [13][0][][] */ -9,33,-3,-58,-23,-18,1,-20,10,-51,-49,-66,53,-114,-31,-64,-23,-38,-78,-8,-100,-21,7,103,-57,2,107,14,22,-47,63,42,2,2,-117,110,-21,-71,23,-70,127,8,6,12,-17,-97,63,-24,82,-22,-54,26,22,14,-18,74,57,-64,-30,12,35,40,-7,-97,-2,50,-25,38,-57,-54,-87,-16,-57,29,-46,-93,-108,8,60,97,0,78,26,-86,68,26,32,-5,-23,-20,-23,-2,-62,18,-18,-3, 
  /* [14][0][][] */ -2,26,-99,-15,81,105,-90,-20,40,-32,97,-14,25,-26,-46,-85,-70,17,31,127,13,-34,-1,9,17,35,-23,69,14,2,-26,6,77,1,-45,14,-26,78,81,16,56,1,21,13,3,-46,62,-47,24,-1,-3,-17,49,3,-25,30,22,69,-114,-29,-8,-68,-44,-102,6,-54,-51,-4,-94,65,-18,46,-5,-44,-17,-35,53,-4,-69,-49,19,-3,3,-19,-21,60,-19,-21,-34,66,83,41,-1,-36,-55,-75, 
  /* [15][0][][] */ -79,-51,58,-78,27,-35,-45,-70,-2,-4,-20,76,-13,-29,44,104,-111,-20,20,-59,20,-22,-14,-88,33,-4,44,-49,-69,-119,-67,31,-48,59,91,-123,0,-52,27,-38,-9,-1,41,-28,-10,-5,66,119,-49,-24,3,-56,-39,77,-4,-62,-119,-25,127,33,-44,14,-103,10,-66,14,9,25,73,-93,83,-52,69,-29,-42,-50,-1,11,76,26,2,96,52,38,8,-33,-124,19,-13,-59,-102,7,41,-40,-16,76, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0020127452444285154, 0.0034773398656398058, 0.0020825148094445467, 0.002985962200909853, 0.0030505112372338772, 0.0029672088567167521, 0.002318148035556078, 0.0025937859900295734, 0.0041682473383843899, 0.0030669947154819965, 0.0023258277215063572, 0.0023268694058060646, 0.0033812520559877157, 0.0027673263102769852, 0.0036263447254896164, 0.003041885094717145, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -1946, 1499, -2853, -4751, 560, 1668, -2397, -560, -988, -3543, 7785, -1715, 526, 12356, 10511, -5174, 17617, 545, -4178, 682, -250, -2737, -1580, -1079, 197, -2839, -1273, -3974, 895, -8431, -4596, 896, 8645, -362, -1822, 117, -1752, -1575, -518, 5873, -888, 557, -271, -5891, 13732, 15742, 674, 13228, -2059, 12507, 16036, -2279, -1038, 2039, -387, 9838, -1062, 1324, 15632, 7487, 9596, 10319, 10278, -5699, -750, -627, -1826, 2282, -3530, -1622, 2935, 4795, 12837, -685, -1718, 10882, -1176, -916, 5734, -322, -1621, 17707, 97, 1659, 14521, 272, -630, -3833, 4058, -5798, 18210, 1310, -2766, -484, -5180, -3639, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00022535215248353779, 0.00023497198708355427, 0.00012942889588885009, 0.00016447360394522548, 0.00027633403078652918, 0.00028606035630218685, 0.00029118693782947958, 0.00020686324569396675, 0.00025251132319681346, 0.000155225585331209, 0.00014579478011000901, 0.00039838688098825514, 0.00023882747336756438, 0.00011272740812273696, 0.00011036538489861414, 0.00012868880003225058, 9.978513844544068e-05, 0.00028411968378350139, 0.00017366748943459243, 0.00011998258560197428, 0.00017242354806512594, 0.00035497808130457997, 0.00023315881844609976, 0.0002564889146015048, 0.00056240253616124392, 0.00022718087711837143, 0.00026301440084353089, 0.00013038366159889847, 0.00019619573140516877, 9.3203452706802636e-05, 0.00035859650233760476, 0.00022054476721677929, 0.00019473057182040066, 0.00020273202972020954, 0.00030330155277624726, 0.0003151823184452951, 0.00019945489475503564, 0.00028260689578019083, 0.00037963443901389837, 0.00017094978829845786, 0.00019346225599292666, 0.00023308742674998939, 0.0002351566799916327, 0.00010548973659751937, 9.6256087999790907e-05, 8.5689192928839475e-05, 0.00024639020557515323, 0.00010771600500447676, 0.00022822794562671334, 8.9460918388795108e-05, 0.00010789625230245292, 0.00015143862401600927, 0.00012845717719756067, 0.00016509203123860061, 0.00026626489125192165, 0.00015751528553664684, 0.00021433360234368593, 0.00023276107094716281, 0.00014284020289778709, 0.00014052694314159453, 0.00014071108307689428, 0.00017972892965190113, 0.00012948903895448893, 0.00012991171388421208, 0.0002021382242674008, 0.00030734209576621652, 0.0002871439210139215, 0.0002182973112212494, 0.00027874828083440661, 0.00022807947243563831, 0.00022177924984134734, 0.00013418242451734841, 9.8994125437457114e-05, 0.00020262878388166428, 0.00029550344333983958, 0.00011595678370213136, 0.0001830513501772657, 0.00025324852322228253, 0.00021919338905718178, 0.00026267790235579014, 0.00029804787482134998, 8.1038371718022972e-05, 0.00025321927387267351, 0.00018709646246861666, 0.00010231896885670722, 0.0002155281399609521, 0.00016446378140244633, 0.00020564503211062402, 0.00018988526426255703, 0.00018497247947379947, 8.5678046161774546e-05, 0.00034407648490741849, 0.00026222743326798081, 0.00027830971521325409, 9.6112351457122713e-05, 0.00032741192262619734, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 44,118,14,60,-31,2,50,40,67,-65,-91,23,-34,-28,12,-74,-115,29,23,21,29,62,78,76,35,-15,-59,13,-31,6,35,-21,-37,6,-25,121,-2,52,3,-14,32,-32,-2,33,-106,-84,1,-21,-12,-87,-40,-7,48,68,-17,-1,-65,-78,-67,-127,-127,15,-127,-1,-21,45,51,-20,-13,36,24,-10,-43,15,51,-1,2,-20,-66,45,6,-109,59,-26,-16,-50,-43,12,-127,27,-127,15,78,-4,75,2, -27,-29,3,87,-20,100,-14,-11,53,40,-127,43,-38,-71,-91,127,-127,63,34,78,121,22,108,127,37,9,11,57,0,88,5,-127,77,86,14,32,95,127,-37,-127,127,-10,94,82,-60,-127,127,-41,-5,-98,-95,-51,18,127,-26,-127,25,7,-105,-79,-58,-127,-71,88,-26,90,127,-35,9,127,127,-21,-45,16,-41,-99,33,-40,-8,127,-9,-37,127,-74,-58,-48,77,53,84,127,-126,-9,127,-30,127,43, 28,-117,26,26,-17,-12,3,33,40,65,-77,4,-25,27,-25,-105,-37,11,0,27,35,45,69,70,22,-42,16,29,4,13,5,-54,-28,-66,-27,64,18,-4,13,22,-7,30,-14,72,-49,-30,-6,22,18,-46,8,-11,24,-11,15,-6,58,-93,-16,-86,-79,31,-96,-27,41,28,-32,-8,-9,12,-3,-14,-24,-51,5,5,-2,-2,-67,-8,11,-103,28,-2,-20,-27,-24,-22,-107,-5,-45,13,26,43,33,2, 
  /* [0][1][][] */ 100,2,46,109,2,-54,124,41,-30,-127,-70,127,-15,-127,-61,46,-78,-51,67,18,-127,8,-127,-72,-6,38,-106,127,-88,70,127,61,30,64,13,127,-127,59,-27,-28,66,-127,29,61,-127,-73,1,-111,-94,-110,-121,11,125,-71,84,-15,-127,-8,-63,21,-56,-66,-51,48,-86,-26,68,-88,-32,20,-53,-127,-90,81,127,-104,79,81,-76,-38,127,-127,-44,99,-32,-12,-23,89,-9,11,-92,21,-5,-82,104,-1, -127,17,-87,127,-83,-127,-127,-127,50,4,13,43,-79,-86,-58,106,-107,-127,127,127,23,-127,-111,84,-127,127,21,85,-72,-43,-88,45,-127,70,127,-70,23,121,127,-65,-50,12,32,17,-43,-118,-85,-127,7,-127,-120,127,87,66,61,-82,22,21,97,-22,-2,-41,-117,127,-2,-127,101,127,25,40,-118,-87,-48,71,-113,-127,127,127,127,-63,-67,7,-112,62,-77,-90,127,127,113,117,-120,-127,-97,-61,109,127, 62,-25,107,75,-4,-24,9,37,-31,116,-30,63,-6,-19,-127,74,14,-31,11,-5,-122,7,-68,-75,-1,-3,127,-12,127,118,28,-99,-22,-127,-9,104,-115,-1,-33,-28,-13,90,46,127,-48,-13,-13,-43,127,-80,-127,-6,64,-95,-127,9,90,-13,-127,48,-12,-49,6,53,127,-32,-4,-15,-37,1,-43,-56,-106,-127,-3,-45,-6,-17,-102,-55,-46,-121,-19,127,-127,33,-28,9,-42,-25,-21,29,-18,127,31,-1, 
  /* [0][2][][] */ 37,-127,26,-11,5,26,49,59,-25,-33,5,-17,22,-24,-29,72,-36,26,-1,22,4,48,20,-32,29,54,-5,-7,-32,41,19,22,-22,-14,-25,3,63,-22,-4,-29,13,2,-12,-29,-26,-34,-13,-38,-4,19,-28,28,-4,-24,-39,-10,-15,-1,-17,30,-63,19,38,-24,-22,50,-84,-26,24,-5,20,56,-50,35,31,15,-32,-34,-19,5,22,-39,-14,-44,-86,36,-49,10,-95,65,-29,13,4,-3,30,-14, -50,-2,127,-10,127,79,-25,8,-127,18,-48,-22,127,-38,-94,51,16,66,-9,-56,33,14,69,-23,90,-67,-6,46,-26,127,10,-2,-76,28,4,-44,85,42,22,-75,-20,-5,-127,29,-8,-3,-43,-91,1,-69,-73,86,127,-83,-33,-69,-22,127,-76,-1,68,-127,91,56,-19,26,-77,12,127,-5,17,71,-127,27,-11,-59,-3,-83,-22,-30,0,-90,-21,-64,-68,127,14,10,71,56,33,16,-17,-8,-9,-2, 5,68,28,-39,-4,7,-3,52,19,75,14,9,13,-21,-37,69,-54,19,-15,25,-9,48,11,-50,20,54,28,21,-2,52,-5,-68,-35,-23,-21,-33,60,-16,1,-15,3,-17,9,26,-33,-21,-11,-16,15,30,-43,-8,14,-50,15,9,13,1,-19,38,-70,21,23,-35,30,18,-81,22,15,-6,3,56,17,-22,1,4,1,-11,-14,3,-1,-111,-18,-2,-61,29,-50,-5,-84,55,-5,11,-6,23,13,-12, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0095774661749601364, 0.0099863093346357346, 0.0055007282644510269, 0.0069901277311146259, 0.011744196526706219, 0.012157564982771873, 0.012375444173812866, 0.008791687898337841, 0.010731731541454792, 0.0065970872528851032, 0.0061962781473994255, 0.01693144254386425, 0.010150167159736156, 0.004790914710611105, 0.0046905288472771645, 0.0054692737758159637, 0.0042408681474626064, 0.012075086124241352, 0.0073808683082461357, 0.0050992597825825214, 0.0073280008509755135, 0.015086567960679531, 0.0099092498421669006, 0.010900778695940971, 0.023902107030153275, 0.0096551869064569473, 0.011178111657500267, 0.005541305523365736, 0.0083383182063698769, 0.0039611468091607094, 0.015240350738167763, 0.0093731526285409927, 0.0082760490477085114, 0.0086161112412810326, 0.012890315614640713, 0.013395247980952263, 0.0084768328815698624, 0.012010792270302773, 0.016134463250637054, 0.0072653656825423241, 0.0082221459597349167, 0.0099062155932188034, 0.0099941585212945938, 0.0044833137653768063, 0.004090883769094944, 0.0036417907103896141, 0.010471583344042301, 0.0045779300853610039, 0.0096996873617172241, 0.0038020890206098557, 0.0045855906791985035, 0.0064361416734755039, 0.0054594296962022781, 0.0070164110511541367, 0.011316257528960705, 0.0066943992860615253, 0.0091091776266694069, 0.0098923454061150551, 0.0060707083903253078, 0.0059723947197198868, 0.005980221088975668, 0.0076384791173040867, 0.0055032838135957718, 0.0055212476290762424, 0.0085908742621541023, 0.013062038458883762, 0.012203616090118885, 0.0092776352539658546, 0.011846802197396755, 0.0096933776512742043, 0.0094256177544593811, 0.0057027530856430531, 0.0042072501964867115, 0.0086117228493094444, 0.012558896094560623, 0.0049281632527709007, 0.0077796820551156998, 0.010763062164187431, 0.0093157188966870308, 0.011163811199367046, 0.012667033821344376, 0.0034441307652741671, 0.01076181884855032, 0.007951599545776844, 0.0043485560454428196, 0.0091599458828568459, 0.0069897104986011982, 0.0087399138137698174, 0.0080701233819127083, 0.0078613301739096642, 0.0036413169000297785, 0.014623249880969524, 0.011144666001200676, 0.011828162707388401, 0.0040847747586667538, 0.013915006071329117, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 7864, 4555, 1272, -1329, 5183, 10950, 8770, 1377, -168, 9491, 1287, -4183, 4721, 4083, 383, -195, 3723, 8389, -816, 80, 5893, 16053, 10567, -2115, -3863, -1396, 10098, -299, 1596, 2368, 7917, -1601, 8416, 3212, 4242, -5143, 1359, -4313, 391, 2603, 3059, 1244, 1681, -253, 1242, 2115, 4676, 5593, 3523, 2345, 5674, 2612, -2704, 2095, 1204, 2180, 1959, 3169, 9312, 1380, -720, 6503, 4972, 4182, 3785, 7874, -4317, 2903, 6000, -874, 6034, 2088, 4151, 3154, 4415, 2335, -485, 2049, 4397, 3211, 2126, 3662, 8788, 741, 2086, 5609, 858, -1099, 22311, -612, 675, -1349, 13422, 3725, 30, -1124, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 9.4166520284488797e-05, 8.6072883277665824e-05, 0.00012549829261843115, 0.00016405977657996118, 0.00013979191135149449, 7.3548151704017073e-05, 9.626033715903759e-05, 0.00019870295363944024, 0.00020331508130766451, 8.2972001109737903e-05, 0.00019173044711351395, 0.00011560245184227824, 0.00011736138549167663, 0.00012156896264059469, 0.00016737137048039585, 0.00015169076505117118, 0.00016801143647171557, 9.2105059593450278e-05, 9.9388598755467683e-05, 0.00013633808703161776, 0.00010468748223502189, 5.6950710131786764e-05, 7.9182034824043512e-05, 0.00013478679466061294, 0.00014393340097740293, 0.00011708958481904119, 8.6558909970335662e-05, 0.00013163950643502176, 0.00015786927542649209, 0.00011413294123485684, 0.00010831739928107709, 0.00015446166798938066, 9.1727051767520607e-05, 0.00015205610543489456, 0.00015796006482560188, 0.0001155356367235072, 0.00012466202315408736, 0.00014116338570602238, 0.00013376348942983896, 0.00011627130879787728, 0.00015760408132337034, 0.00018167472444474697, 0.00019758581765927374, 0.00020240977755747736, 0.00021623384964186698, 0.00018629830447025597, 0.00012264934775885195, 0.00011077848466811702, 0.00016227296146098524, 0.00019681226694956422, 0.00012695716577582061, 0.00014609956997446716, 0.00013661595585290343, 0.00019290533964522183, 0.00019897498714271933, 0.00017495323845651001, 0.00016012153355404735, 0.00012724031694233418, 8.2645434304140508e-05, 0.0001728148345137015, 0.00020377739565446973, 0.00010947826376650482, 0.00011787116818595678, 0.00014755413576494902, 0.00014602557348553091, 0.00010243189899483696, 0.00012869419879280031, 0.00013832407421432436, 9.1629379312507808e-05, 0.0001925854739965871, 0.0001167717418866232, 0.00010761641897261143, 0.00010938537889160216, 0.00011503632413223386, 0.0001279549760511145, 0.00011976886889897287, 0.00019904147484339774, 0.00016357321874238551, 0.00010775415285024792, 0.00016088332631625235, 0.00016816949937492609, 0.0001213414070662111, 8.8648383098188788e-05, 0.00013771648809779435, 0.00018774735508486629, 0.00012787163723260164, 0.00018007725884672254, 0.00020487137953750789, 4.3927095248363912e-05, 0.00015458057168871164, 0.00030023636645637453, 0.00017383509839419276, 6.4651430875528604e-05, 0.00010482841753400862, 0.00019686411542352289, 0.00012430493370629847, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -60,65,2,-53,-37,-87,-73,-14,52,-43,36,-84,102,-117,5,-127, 
  /* [1][0][][] */ -127,55,-103,-105,-92,10,-17,79,-39,-2,98,-75,64,123,48,57, 
  /* [2][0][][] */ -47,-21,-58,-8,-7,-67,30,-29,-86,127,62,11,74,56,-63,121, 
  /* [3][0][][] */ -65,-74,5,-47,-109,3,-74,-126,-17,23,54,-86,-77,-32,-127,-54, 
  /* [4][0][][] */ 79,-5,-15,51,-59,-1,-127,47,25,74,18,49,-3,-3,-50,-85, 
  /* [5][0][][] */ -94,41,-68,-23,71,-62,-17,-82,127,-26,-16,-36,16,-120,-98,-95, 
  /* [6][0][][] */ -16,-43,-32,20,-77,75,47,-43,-31,-47,127,-30,-6,-2,-124,35, 
  /* [7][0][][] */ -23,113,127,-85,24,71,-2,-45,21,90,-95,-17,69,7,19,84, 
  /* [8][0][][] */ -52,13,60,-10,30,-4,63,127,-45,-20,-48,-47,8,79,-44,-56, 
  /* [9][0][][] */ 36,55,90,26,-109,-40,-104,-106,61,7,127,31,-45,-103,62,-27, 
  /* [10][0][][] */ -19,-84,22,-76,-127,57,31,26,-44,-58,-2,26,-16,48,-115,31, 
  /* [11][0][][] */ 94,-79,-18,89,-96,-15,53,15,127,103,-35,31,34,-83,-34,94, 
  /* [12][0][][] */ -46,-72,127,-5,79,-46,45,40,96,-19,90,62,-31,19,-88,49, 
  /* [13][0][][] */ -12,-20,12,13,7,4,127,30,-119,18,12,4,-8,111,77,-60, 
  /* [14][0][][] */ 120,-64,127,9,65,48,86,56,76,52,44,38,32,-43,59,-62, 
  /* [15][0][][] */ -15,127,15,-54,34,106,-65,54,-36,-6,-42,-6,-32,122,-39,-52, 
  /* [16][0][][] */ -45,73,116,-52,24,82,-1,5,-22,7,-5,45,105,10,91,127, 
  /* [17][0][][] */ 3,81,93,-127,18,-47,12,-65,-61,75,-52,54,-42,-33,96,-65, 
  /* [18][0][][] */ -76,-10,-76,-67,98,73,-35,-59,47,75,127,64,5,104,-42,-7, 
  /* [19][0][][] */ 51,124,79,77,46,-21,-14,3,-35,127,51,121,51,69,-52,41, 
  /* [20][0][][] */ 95,3,6,62,-78,-23,-38,55,-32,-48,-127,-43,86,-43,38,-15, 
  /* [21][0][][] */ -121,-81,-50,112,-40,15,-127,93,-13,-2,68,12,0,73,-81,20, 
  /* [22][0][][] */ -7,5,-65,-57,127,-4,-34,60,48,76,29,71,-24,26,1,26, 
  /* [23][0][][] */ -71,8,-33,20,30,78,89,85,-18,127,-11,-18,-3,28,-58,-52, 
  /* [24][0][][] */ 29,-63,41,9,127,23,60,-27,47,12,34,18,-60,29,5,-14, 
  /* [25][0][][] */ 127,-49,81,6,15,-18,-27,75,108,-27,-52,11,117,-43,96,55, 
  /* [26][0][][] */ 62,60,98,73,62,-20,-69,-18,-7,50,17,127,25,-55,34,-62, 
  /* [27][0][][] */ -34,34,-83,20,-26,124,3,-86,16,-84,127,11,28,-29,112,90, 
  /* [28][0][][] */ -41,26,-83,-127,31,-67,-4,-60,-110,79,-46,27,-40,24,-23,75, 
  /* [29][0][][] */ 94,106,-90,47,15,103,-49,1,54,49,16,62,-127,13,-9,66, 
  /* [30][0][][] */ -47,43,-74,-57,52,-39,17,8,-37,53,-43,4,19,48,-24,127, 
  /* [31][0][][] */ 20,-127,98,37,73,-82,-83,39,-25,5,7,-53,-77,55,36,124, 
  /* [32][0][][] */ -44,77,-1,44,-112,60,3,49,31,-127,23,-79,25,29,51,48, 
  /* [33][0][][] */ -76,-2,55,96,-4,28,-53,16,-41,-51,22,-11,-19,-11,13,127, 
  /* [34][0][][] */ -8,6,-94,-89,67,-12,-2,67,36,-6,-15,-26,-65,-38,-31,127, 
  /* [35][0][][] */ 89,14,30,-16,-18,13,-78,-40,-41,-127,-57,10,19,-15,58,-23, 
  /* [36][0][][] */ -22,32,-127,-25,25,119,-5,58,-40,5,75,25,12,46,-94,57, 
  /* [37][0][][] */ 63,13,50,-43,86,-111,32,-12,-127,43,-69,-39,22,41,88,24, 
  /* [38][0][][] */ -35,127,24,-51,38,22,72,-103,14,-3,-121,46,-50,-102,-120,7, 
  /* [39][0][][] */ 107,63,-125,-127,-36,-58,1,-80,7,-1,10,-34,79,14,-122,-62, 
  /* [40][0][][] */ -48,24,-67,-90,-41,-34,33,-127,-6,-11,15,-18,33,75,30,72, 
  /* [41][0][][] */ -44,-95,-22,127,-9,-16,-54,-6,-1,-38,64,-70,-53,-9,-6,29, 
  /* [42][0][][] */ -34,52,-9,-127,25,6,3,-36,73,-7,-28,22,68,-28,-40,19, 
  /* [43][0][][] */ -4,46,-5,19,127,28,43,32,7,30,7,-83,-91,-30,3,-24, 
  /* [44][0][][] */ 79,-19,23,40,-27,-3,1,34,28,-31,20,2,127,-1,-57,-29, 
  /* [45][0][][] */ 2,-81,-61,27,-48,-92,2,62,23,-12,17,26,-70,127,35,-29, 
  /* [46][0][][] */ -33,-94,46,74,-4,-10,-87,52,38,-53,53,-23,33,71,62,127, 
  /* [47][0][][] */ -33,-75,6,94,-4,8,68,14,3,-81,-127,-39,47,-32,-63,20, 
  /* [48][0][][] */ -90,112,-17,-36,11,59,-3,-123,28,-18,42,-57,61,-127,-61,3, 
  /* [49][0][][] */ -51,10,39,-35,-2,8,117,127,-32,-27,-2,30,-53,35,-42,27, 
  /* [50][0][][] */ 47,20,-75,28,31,-125,-30,-9,-55,44,-47,-10,37,-82,-127,-36, 
  /* [51][0][][] */ -40,48,-30,94,-38,34,-46,-95,-48,-99,15,-53,-6,34,-16,127, 
  /* [52][0][][] */ -127,6,20,-2,17,58,64,0,18,-106,-48,-53,-116,-61,-122,-4, 
  /* [53][0][][] */ -66,-69,-55,-127,-34,-17,21,82,35,-89,-44,36,-49,32,61,89, 
  /* [54][0][][] */ 7,-52,0,-12,-52,56,41,-31,-4,-84,46,20,-13,-29,-127,41, 
  /* [55][0][][] */ -1,-24,-35,35,57,-21,53,68,-45,-66,-127,-29,53,-34,-18,25, 
  /* [56][0][][] */ 77,-19,-50,-24,-127,13,-96,-11,-13,5,-36,32,85,-36,53,34, 
  /* [57][0][][] */ -58,6,22,-34,127,29,74,29,-37,57,10,-8,-26,68,-100,-1, 
  /* [58][0][][] */ 47,0,-6,-7,41,12,-58,-78,57,-127,-74,6,-100,-51,-11,49, 
  /* [59][0][][] */ -59,-7,9,44,25,92,-121,-51,70,127,-105,13,-50,19,14,1, 
  /* [60][0][][] */ 7,-48,4,28,-127,-63,40,16,-20,46,-17,45,9,-27,43,52, 
  /* [61][0][][] */ 23,27,-97,-3,-56,-34,-120,-103,-18,3,54,127,77,-69,125,72, 
  /* [62][0][][] */ 34,-8,39,-17,-9,17,55,127,-53,109,42,68,38,54,67,102, 
  /* [63][0][][] */ 34,-122,-15,-15,-61,18,41,-27,-19,-15,8,-16,-47,127,104,33, 
  /* [64][0][][] */ -7,3,-127,-41,28,54,40,-15,-18,-106,47,-3,74,-26,-75,99, 
  /* [65][0][][] */ -26,4,47,43,52,-17,78,78,-66,-1,-66,-57,31,127,-84,0, 
  /* [66][0][][] */ -55,-127,-7,-119,-40,-122,36,-16,-8,-41,33,100,-57,-35,-73,68, 
  /* [67][0][][] */ -8,-82,-75,-15,-89,127,-27,-126,-72,-34,-55,-97,7,-31,-49,23, 
  /* [68][0][][] */ 127,45,41,-33,-94,-1,-67,-41,-96,-100,-43,3,81,-50,63,-104, 
  /* [69][0][][] */ 55,-8,42,-13,-11,-43,-68,26,-9,127,-25,6,5,33,78,-37, 
  /* [70][0][][] */ 35,-11,-35,66,-126,18,-15,-98,99,127,50,81,57,-38,-13,18, 
  /* [71][0][][] */ 98,-82,78,127,-81,-44,35,-4,123,6,-48,35,67,-77,50,34, 
  /* [72][0][][] */ 8,-57,54,103,63,15,-127,72,98,-21,36,14,-68,-80,-65,84, 
  /* [73][0][][] */ 93,34,76,-127,56,-97,-81,41,-30,103,-48,16,17,-77,37,-42, 
  /* [74][0][][] */ 94,24,44,27,-127,-24,37,8,-90,-40,14,-46,26,-59,1,10, 
  /* [75][0][][] */ 62,127,-102,6,50,42,-26,-25,-28,-26,48,77,-101,54,57,71, 
  /* [76][0][][] */ -78,-52,0,-41,-61,-14,100,-10,-58,17,106,42,-41,-127,-47,78, 
  /* [77][0][][] */ -58,127,-30,36,-58,-68,39,88,49,-66,-14,75,-24,59,1,87, 
  /* [78][0][][] */ 127,23,-72,45,-64,53,-108,-35,2,-24,-64,-6,41,-121,-3,77, 
  /* [79][0][][] */ -75,-51,117,29,-5,-104,-16,-49,-15,-31,38,9,-58,127,-99,48, 
  /* [80][0][][] */ 44,108,43,-127,-18,37,109,-41,11,30,-49,8,91,-38,-4,6, 
  /* [81][0][][] */ 46,-51,-18,-111,119,72,-10,127,89,37,1,-48,-21,39,-65,-72, 
  /* [82][0][][] */ 66,28,98,-13,127,-111,43,53,6,108,-25,29,-10,-38,22,-100, 
  /* [83][0][][] */ -57,64,36,21,100,51,126,127,15,55,-62,-84,-47,80,-63,-90, 
  /* [84][0][][] */ 14,-109,-24,117,28,-69,-49,25,-66,75,-87,-28,-127,71,-20,-57, 
  /* [85][0][][] */ -109,67,-16,-3,-19,-47,-52,-43,0,47,22,-64,-127,-97,-63,36, 
  /* [86][0][][] */ -9,46,103,101,43,-63,65,27,-3,21,-64,-72,26,78,-127,-66, 
  /* [87][0][][] */ -8,57,127,-27,-92,-35,16,12,29,-24,14,56,-59,19,-1,-9, 
  /* [88][0][][] */ -26,-83,-90,8,39,20,-14,17,-18,-96,-116,-116,127,-20,6,52, 
  /* [89][0][][] */ 32,23,30,-115,0,-73,-46,54,127,-6,26,-105,9,-24,62,-72, 
  /* [90][0][][] */ -4,67,15,-2,-30,27,30,109,7,-58,-1,127,53,9,-46,71, 
  /* [91][0][][] */ -73,17,-26,76,84,65,-37,-119,-58,41,5,14,-110,-127,-72,-4, 
  /* [92][0][][] */ -48,58,0,-40,-127,-29,-64,48,-38,42,108,82,-9,-7,54,17, 
  /* [93][0][][] */ 104,53,116,34,-127,-99,14,42,-33,-71,-29,-74,29,-58,-11,-9, 
  /* [94][0][][] */ -29,-127,30,-97,19,36,-23,4,80,-17,-2,58,9,56,-39,38, 
  /* [95][0][][] */ -53,-44,-20,-77,113,118,-53,50,85,54,-82,57,-55,127,-93,32, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0013812616234645247, 0.0012625418603420258, 0.0018408450996503234, 0.0024064760655164719, 0.0020505080465227365, 0.001078825443983078, 0.0014119744300842285, 0.0029146322049200535, 0.0029822841752320528, 0.0012170572299510241, 0.0028123573865741491, 0.0016956900944933295, 0.001721490640193224, 0.0017832085723057389, 0.0024550515227019787, 0.0022250439506024122, 0.0024644401855766773, 0.0013510235585272312, 0.0014578605769202113, 0.0019998464267700911, 0.001535586197860539, 0.00083536945749074221, 0.0011614649556577206, 0.0019770916551351547, 0.0021112565882503986, 0.0017175037646666169, 0.0012696710182353854, 0.0019309263443574309, 0.0023156721144914627, 0.0016741348663344979, 0.0015888308407738805, 0.0022656882647424936, 0.0013454788131639361, 0.0022304027806967497, 0.0023170036729425192, 0.0016947099938988686, 0.0018285784171894193, 0.0020706253126263618, 0.0019620815292000771, 0.0017055011121556163, 0.0023117822129279375, 0.0026648573111742735, 0.0028982458170503378, 0.002969004912301898, 0.0031717803794890642, 0.0027326771523803473, 0.0017990559572353959, 0.0016249307664111257, 0.0023802665527909994, 0.0028868990484625101, 0.0018622442148625851, 0.0021430305205285549, 0.002003922127187252, 0.0028295910451561213, 0.0029186224564909935, 0.0025662644766271114, 0.0023487089201807976, 0.0018663975642994046, 0.0012122670887038112, 0.0025348977651447058, 0.0029890656005591154, 0.0016058587934821844, 0.0017289682291448116, 0.0021643666550517082, 0.0021419452968984842, 0.0015025006141513586, 0.001887723570689559, 0.0020289774984121323, 0.0013440462062135339, 0.0028248992748558521, 0.0017128415638580918, 0.0015785486903041601, 0.001604496268555522, 0.0016873859567567706, 0.0018768804147839546, 0.00175680429674685, 0.0029195977840572596, 0.0023993391077965498, 0.0015805689617991447, 0.0023598829284310341, 0.0024667587131261826, 0.0017798707121983171, 0.001300320029258728, 0.0020200652070343494, 0.002753932261839509, 0.0018756580539047718, 0.0026414252351969481, 0.0030051125213503838, 0.00064433529041707516, 0.0022674323990941048, 0.0044039534404873848, 0.0025498634204268456, 0.00094832584727555513, 0.0015376535011455417, 0.0028876597061753273, 0.00182334054261446, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -31340, -285, 5747, -12112, 6467, -14359, 29958, -2526, 8561, -7598, 15632, 12598, -562, -25291, -3282, 8287, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 9.9112017778679729e-05, 6.0159611166454852e-05, 5.8853100199485198e-05, 6.4942498283926398e-05, 8.1659156421665102e-05, 0.00014741717313881963, 5.0215923693031073e-05, 7.6904376328457147e-05, 0.0001186570807476528, 9.0731788077391684e-05, 9.504015906713903e-05, 8.4668725321535021e-05, 9.3375288997776806e-05, 8.3754261140711606e-05, 7.650147017557174e-05, 7.6372190960682929e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 23,28,23,6,-30,-83,-21,-13,-20,-66,21,-2,64,-65,73,42,-88,-32,47,18,104,24,-59,1,8,67,127,61,-3,83,59,-31,13,8,-1,-22,30,35,-4,-6,126,18,21,-22,-10,1,15,-39,32,-33,94,-9,-55,10,44,32,-23,-55,13,25,-10,42,-58,4,24,1,66,27,-3,-10,20,32,10,34,12,35,62,-22,52,37,-21,52,36,33,-57,5,-1,64,27,18,-83,-18,29,2,107,72, 
  /* [1][0][][] */ 15,31,-65,12,11,-31,94,-54,-65,-35,-63,-33,-11,-43,-8,-56,-32,-31,-30,-30,-39,-90,109,-25,-7,9,5,69,-35,-1,-31,4,-34,17,12,14,-18,42,-51,84,33,11,5,-53,54,-58,-9,33,-86,-8,53,-112,-42,42,61,50,44,34,-80,12,-43,2,-18,-23,21,15,90,10,-35,-127,3,-2,36,66,-31,34,-57,-38,89,-42,51,-18,46,-60,-36,-55,-21,17,-26,-40,18,4,74,-39,-35,53, 
  /* [2][0][][] */ 1,-14,14,-1,70,44,-48,32,-62,31,10,-20,25,-12,10,25,24,-25,-127,-20,-19,-38,-18,31,-6,-11,-38,15,-23,-26,-7,52,-20,-39,-8,14,-38,20,-24,-20,58,10,6,35,8,48,-5,-9,-82,5,-18,16,-26,33,8,-59,37,16,42,29,-22,-15,-24,44,31,-8,-34,5,-2,-3,-17,-44,19,48,30,62,-58,-19,-25,-41,43,30,45,-29,-10,-44,-16,-44,-21,-35,-18,54,3,-3,82,-40, 
  /* [3][0][][] */ 29,-41,-8,-113,-20,-35,101,-40,27,127,-64,-13,16,-23,-13,62,57,41,-22,28,-23,25,20,-3,-38,82,41,-13,-54,-9,-52,71,-3,-19,24,-26,-1,-43,-22,49,7,11,-32,25,62,-43,-3,32,46,-27,15,-35,109,38,24,-5,-6,-24,-14,-37,-43,34,70,0,-24,-21,108,-33,-36,-3,-42,26,4,-70,6,-66,10,-48,114,12,-10,-54,-24,-45,-26,-44,71,65,-42,51,-55,6,2,-89,-13,31, 
  /* [4][0][][] */ -21,79,36,-3,-27,0,-35,-30,21,-30,13,-13,25,48,-12,27,-5,-35,-13,-50,30,-25,-51,20,-19,-30,-16,5,-41,127,-50,-20,9,-33,-4,-32,65,41,-32,2,30,7,11,-41,-45,-7,61,-13,27,-16,-56,-14,-62,35,37,24,-7,65,-19,23,-24,-61,-20,13,67,40,-49,-10,-2,-2,14,-62,-10,54,59,60,-21,28,-55,48,15,62,33,-53,53,-52,-21,-64,-31,-40,-46,-14,3,8,27,-35, 
  /* [5][0][][] */ -3,-10,38,-23,-22,-25,-16,-10,35,15,-11,-4,-12,-24,24,-18,-20,5,-51,-31,-22,18,-19,13,20,-45,63,-15,-15,34,7,72,0,-78,17,13,-37,-29,-39,6,-43,-3,-28,19,3,17,-74,21,-14,17,47,-22,21,-62,7,19,-28,-56,2,-34,36,28,30,56,-37,6,115,-20,1,-29,12,11,1,21,31,10,-4,-9,127,47,-20,-11,-29,36,40,64,8,89,7,-30,-7,20,16,-12,-32,19, 
  /* [6][0][][] */ 23,-64,69,28,-23,127,-44,-91,-33,-79,-85,58,-4,11,-43,88,9,32,4,-56,-113,-20,-97,-58,-7,-53,-6,80,-124,44,-19,-28,33,74,-31,-15,3,-47,20,-20,-73,37,35,-47,28,37,-106,-13,52,19,-93,-100,81,-18,-51,-24,32,-28,11,-29,-18,-67,45,-18,42,-87,-76,-51,-119,6,-6,-94,-43,-94,13,-101,82,-3,-91,36,-23,70,13,-110,68,-43,-24,-7,-86,77,-93,87,37,-45,81,-120, 
  /* [7][0][][] */ -4,-19,-62,68,-13,8,37,16,-94,-3,58,45,-5,-56,-19,-40,-7,-8,-1,-15,-67,-32,-41,-27,52,41,-3,67,17,21,21,12,-52,-127,23,90,-7,2,-37,17,-15,-17,7,-69,28,38,52,74,-5,38,-38,6,15,-51,27,-52,-9,39,-70,-23,58,-8,-1,-46,59,-51,94,-14,-52,-31,70,-9,-16,-31,-76,-27,30,-45,77,-42,0,-16,-74,-30,37,17,-75,36,-13,11,-5,20,58,-4,72,-6, 
  /* [8][0][][] */ -2,-55,11,-15,-23,-13,11,-21,-9,2,52,38,11,27,-26,0,66,6,18,11,3,-72,-27,-20,-14,-37,68,-3,-26,48,5,-23,-9,11,8,8,-51,-16,11,-22,6,38,20,-25,7,-13,20,-7,35,-8,45,6,-2,15,-47,10,-26,102,-50,4,-6,-54,-56,0,-69,-24,-8,12,-16,18,43,-12,-36,-127,42,-101,17,22,-49,25,-31,1,5,55,60,-50,-34,49,-30,85,19,-16,-47,-6,-8,-54, 
  /* [9][0][][] */ -32,-25,-30,33,12,26,14,47,-43,-3,64,56,-28,58,23,-52,-14,32,-27,-49,-10,44,-11,14,-31,29,6,24,32,-9,9,-7,-21,-32,0,50,-19,-9,24,-5,-18,-22,14,-8,19,44,4,35,-50,15,-19,35,127,11,-7,-5,23,-14,28,3,-44,-4,77,3,2,14,59,3,31,-3,-25,28,9,-120,-37,-121,-35,-20,38,-8,-3,25,-2,-37,46,11,-59,3,-10,109,31,37,54,47,-7,26, 
  /* [10][0][][] */ 20,46,7,6,-8,23,-36,-12,58,1,-39,19,20,13,-13,-59,-36,-2,16,-9,7,-17,-24,-24,3,-16,-95,48,-12,48,-8,6,15,13,-18,4,17,-1,3,-3,33,-7,63,-44,-25,-5,20,22,14,5,7,-21,-26,-20,3,30,1,16,-21,-11,-21,-43,-9,1,-11,-21,-91,-28,-52,-26,41,-21,-18,30,32,15,48,-26,-96,5,-12,31,-4,-4,10,7,-75,-127,-29,23,8,17,46,-20,21,34, 
  /* [11][0][][] */ 25,-34,-2,16,-47,31,8,19,76,-28,-29,-44,18,6,10,-11,-16,44,18,-61,-4,24,12,-16,24,16,66,2,46,-61,-31,10,14,96,-85,8,14,-18,51,14,-54,47,-10,15,-43,-1,-11,-4,49,-24,-22,-15,-31,1,-71,93,-23,2,1,-36,22,-4,-19,-75,-8,-43,-127,-75,1,-24,-91,28,56,14,-10,-5,34,46,-113,-44,-10,-4,-24,-4,-23,-10,52,74,18,-52,10,1,-29,35,84,40, 
  /* [12][0][][] */ 16,22,-42,-7,28,-20,10,56,54,-43,17,2,-7,-17,-8,9,11,-47,-25,5,-20,44,6,56,-47,-45,-127,-4,90,-33,15,-5,-22,-89,65,-5,42,-17,4,23,-9,-50,22,23,42,-3,29,-13,-71,-4,-51,99,69,-28,45,-77,24,29,-57,-38,5,50,69,-4,-28,-25,24,27,103,22,19,23,10,-11,-16,-9,-36,-63,43,-74,29,-58,24,-40,0,10,4,-96,-12,27,-46,19,9,83,11,46, 
  /* [13][0][][] */ -13,19,-77,42,41,30,-2,26,23,62,-51,40,-45,-18,49,-58,8,46,60,0,-41,-37,-6,25,33,52,-26,35,17,29,64,-30,-20,57,-11,42,26,-47,-55,-52,-5,-17,20,0,47,43,-33,43,-51,41,0,-2,-27,-48,61,30,19,-48,-17,-18,35,12,5,-36,5,80,127,43,27,-15,-51,-22,41,56,-83,54,14,-85,120,-54,-7,-40,14,0,31,57,-41,-26,-20,-28,-4,44,44,17,64,36, 
  /* [14][0][][] */ -7,53,24,13,-71,-46,13,27,-69,-14,77,18,-78,-10,82,-15,-43,31,-56,36,1,25,-93,4,-35,-2,-59,-122,-1,3,41,81,-52,37,11,-10,-29,-61,-8,-44,39,-37,44,-22,-13,63,-68,24,-5,-43,85,21,-5,39,-27,25,-77,22,11,44,39,70,-8,55,23,-46,-1,-71,41,79,69,42,-53,42,11,21,28,-5,39,31,-70,123,2,-127,85,-11,7,6,-104,-10,-14,3,-24,7,36,36, 
  /* [15][0][][] */ 70,-28,22,36,44,11,-8,3,13,21,-62,-21,57,65,-9,-19,-8,2,-77,34,-26,-31,14,37,53,-39,90,24,49,-34,-48,56,62,43,-3,-79,69,57,63,57,74,39,-10,0,-44,-127,33,-36,-25,-21,-13,0,-17,-60,-22,55,-5,11,-15,12,2,-63,-41,20,31,42,-75,36,-14,-42,-13,-10,4,-118,-47,-98,-20,14,-118,20,81,-37,35,24,-53,-1,-13,-16,31,80,12,-71,-30,-22,36,-35, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0042122607119381428, 0.0025567833799868822, 0.0025012567639350891, 0.0027600561734288931, 0.0034705139696598053, 0.0062652300111949444, 0.0021341766696423292, 0.0032684360630810261, 0.0050429259426891804, 0.0038561008404940367, 0.0040392065420746803, 0.0035984206479042768, 0.0039684497751295567, 0.0035595560912042856, 0.0032513123005628586, 0.0032458179630339146, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 9571, -502, -7266, 8597, -1172, -2333, 145, -1553, 2730, -5008, 246, -2329, 10571, -3986, -816, -7030, -1217, 1740, -10524, 131, -764, -57, -5141, 1130, 53, 6473, -8722, -7941, 1137, -2897, 1339, -1194, 14700, -826, -874, -1586, 716, 10178, 6258, 9742, 746, 4222, 567, 4531, -618, 435, 8982, 2683, -6553, 201, -4071, 620, -2048, -3167, -1447, 1760, -1682, 901, 997, 2642, 137, -1124, -3425, 8428, 11713, 169, 12925, 9441, 280, -1549, 9745, -2331, -86, 298, -3096, -800, 16742, 14219, 10744, 8696, 13191, -1364, 5917, 9116, -1207, -3041, 14948, -5470, 11032, -943, -7422, -3629, -582, 1154, 22105, -2602, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00010856418521143496, 0.00034808070631697774, 0.00015528594667557627, 0.00014216525596566498, 0.00027524936012923717, 0.00048201921163126826, 0.00010689423652365804, 0.00023827177938073874, 0.00038773255073465407, 0.00021166254009585828, 0.00031341769499704242, 0.00018464244203642011, 9.449426579521969e-05, 0.0001396522275172174, 0.00023817962210159749, 0.00016866056830622256, 0.0002572783560026437, 0.00033518808777444065, 0.00010979026410495862, 0.00039287228719331324, 0.0003462968161329627, 0.00030967095517553389, 0.00011245435598539189, 0.00021247148106340319, 0.0025997450575232506, 0.0001789684611139819, 0.00026333486312068999, 0.00012235967733431607, 0.00036269670818001032, 0.00017518056847620755, 0.00017016060883179307, 0.00031831153319217265, 7.6735406764782965e-05, 0.00046393799129873514, 0.0001780581078492105, 0.00018541999452281743, 0.00036789130535908043, 9.7800577350426465e-05, 0.00017068578745238483, 0.00011744508083211258, 0.00053935579489916563, 0.00022208083828445524, 0.00021897065744269639, 0.00016711608623154461, 0.00014401158841792494, 0.00029245670884847641, 0.00015014273230917752, 0.00025657369405962527, 0.00016947036783676594, 0.0004201826814096421, 0.00025972491130232811, 0.00020213406241964549, 0.00014296847803052515, 0.00027779096853919327, 0.00030283516389317811, 0.00028274577925913036, 0.00015613675350323319, 0.00053350161761045456, 0.00041522172978147864, 0.00034326882450841367, 0.00027937564300373197, 0.00027243001386523247, 0.00014096837549004704, 0.00013591306924354285, 0.00020299950847402215, 0.00050562695832923055, 0.00011879829253302887, 0.00013106483675073832, 0.00024713005404919386, 0.00035567034501582384, 0.00011154915409861133, 0.00025831378297880292, 0.00046514952555298805, 0.000188906051334925, 0.00016952797886915505, 0.0002237257722299546, 7.9632140113972127e-05, 0.00013740563008468598, 0.00011904543498530984, 0.00022889104729983956, 0.00010001331975217909, 0.00032423052471131086, 0.00011478111264295876, 0.00031707872403785586, 0.00011406257544877008, 0.00027272268198430538, 0.00011400250514270738, 0.00027112482348456979, 0.00010337236017221585, 0.00021898109116591513, 0.00010723486047936603, 0.00024055289395619184, 0.00032659026328474283, 0.00018233324226457626, 7.9962643212638795e-05, 0.00032745671342127025, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -47,-18,22,-45,94,11,16,-16,-8,4,-14,-18,-15,15,-4,-10,-13,-1,-20,-20,-16,21,-43,22,-7,1,-40,14,7,2,20,6,15,8,-14,-19,2,-59,-73,9,-2,-14,35,-20,-22,40,-54,-18,-23,-7,1,53,-56,17,42,-7,25,-4,7,-34,-14,-23,14,-67,-8,-23,-42,-40,-21,40,17,16,26,5,1,2,-15,-9,127,-47,-113,15,-122,-34,-23,-17,-6,13,-33,-10,19,-16,-1,36,-49,17, -27,32,82,-86,-40,23,127,-53,-2,-10,-48,17,-62,18,-102,97,-11,56,74,-40,-20,127,26,119,22,-8,36,88,125,63,127,-25,-99,-11,-91,-30,-34,-65,127,-47,-29,-127,-19,-31,77,-24,-22,-11,20,-4,40,127,-80,54,-75,10,-73,-1,-7,21,-18,-122,-113,-85,-50,8,-10,-88,-13,29,-47,110,-127,-16,20,-26,-127,-94,-3,-127,-127,16,20,-84,127,80,-104,32,-127,7,32,-2,12,127,-99,-71, -41,-7,16,-21,59,16,24,-21,-21,15,-18,12,-16,5,-18,-5,-10,-10,-9,-23,-12,4,-9,31,-9,8,20,-2,-5,10,12,16,4,5,-10,72,-3,-49,-64,11,-8,0,20,2,-22,-32,-49,-26,-15,-12,9,36,11,3,12,0,86,-11,8,-28,-16,-12,-42,-55,-19,-33,127,-33,-18,30,29,20,7,6,4,21,-18,15,-41,-43,-90,9,-107,-24,13,-34,-22,-15,-10,-27,-1,57,4,30,-48,23, 
  /* [0][1][][] */ -107,-6,41,-56,34,108,-27,-6,-6,-12,-17,-21,-127,33,22,51,-8,30,87,30,24,-12,127,-39,30,0,66,26,-20,4,-7,-18,-127,-7,53,-17,-8,-127,-85,-127,-19,14,98,-42,-65,127,-83,-94,74,63,17,-56,-104,70,62,-28,31,-20,30,-22,12,-2,103,-52,-51,10,-24,-69,-19,5,-127,19,76,127,10,-67,-89,-73,-62,-6,-49,-14,-28,-60,36,34,-122,51,-99,127,119,-74,127,5,-75,-1, 59,127,127,127,-127,-127,109,-55,127,127,-70,-85,-125,127,-31,127,127,-127,127,127,127,-68,109,-127,-127,-127,127,127,-127,127,-33,127,-75,127,127,-104,127,112,-2,-38,127,9,-127,-106,127,-25,127,127,127,-127,127,-122,121,127,-127,127,-127,127,-127,127,-102,127,116,-127,127,127,-12,127,-115,-127,-45,-127,3,109,127,69,28,-127,99,-52,23,127,127,127,117,81,-127,127,-122,49,-9,-24,-91,-21,-127,-30, -127,-30,50,-75,-1,64,-53,16,-39,-5,-2,127,-89,25,25,61,-17,40,77,10,18,-30,83,-29,28,10,50,11,-19,-5,8,-10,-88,-26,78,127,-5,-89,-102,-68,-35,-17,35,-40,-64,-79,-82,-127,61,67,-2,-37,127,9,87,-42,89,-20,38,-47,-2,-37,-127,-34,-101,-17,-50,-72,-30,12,-100,6,32,-91,6,127,-67,-48,-53,28,-97,-18,-53,-63,-2,38,-90,31,-46,-69,127,127,-47,-31,-88,2, 
  /* [0][2][][] */ -14,-38,-11,-26,44,2,12,33,-18,15,37,-30,51,0,-1,-29,12,-9,-29,-12,-27,-5,21,-34,-2,-20,-14,32,-1,-16,-29,3,3,1,-14,-20,-5,-58,-30,-24,-27,15,12,8,41,11,-76,1,-7,14,-20,-18,3,-43,45,-18,33,-22,4,-26,5,35,10,15,-47,-24,122,17,28,27,-27,15,16,-2,-13,-19,-30,-3,-27,-3,-31,-2,-69,-18,-11,7,30,-22,8,7,-13,-14,-8,-20,-17,-1, -25,-55,36,-117,-28,-2,55,127,-63,77,127,-35,-87,28,127,90,1,-40,90,-56,-32,-27,112,25,16,17,26,38,-4,-2,-112,-40,-53,-33,-104,-1,-96,-89,49,-58,-27,-83,-48,127,40,-23,-56,0,41,-5,-16,-7,70,30,-44,-43,-45,-51,37,-57,127,45,124,3,-110,-48,-16,-37,127,31,-65,28,44,-22,8,-18,-57,-71,2,56,-82,-17,-61,-73,33,-127,-14,0,-44,5,25,8,16,-116,-52,127, -6,9,10,-29,38,-4,1,26,-24,9,13,51,47,-1,-13,-20,8,6,0,-29,-17,-7,0,-14,-8,6,-24,12,2,-11,-47,5,-3,0,3,10,-8,-70,-44,0,-38,-14,-10,7,27,-14,-72,11,-6,1,-15,-17,10,-35,34,-15,78,-14,10,-27,10,27,11,29,-35,-30,-26,28,29,15,-28,11,-40,-33,-13,-5,-58,-6,96,-9,-11,-14,-64,11,-17,11,38,-10,9,7,-24,28,1,-24,-26,-4, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0046139778569340706, 0.014793429523706436, 0.0065996525809168816, 0.0060420231893658638, 0.011698097921907902, 0.020485816523432732, 0.0045430050231516361, 0.010126550681889057, 0.016478633508086205, 0.0089956577867269516, 0.013320252299308777, 0.0078473035246133804, 0.0040160063654184341, 0.005935219582170248, 0.010122633539140224, 0.0071680741384625435, 0.010934329591691494, 0.014245493337512016, 0.0046660862863063812, 0.016697071492671967, 0.014717614278197289, 0.013161015696823597, 0.0047793099656701088, 0.009030037559568882, 0.11048915982246399, 0.0076061594299972057, 0.011191731318831444, 0.0052002859301865101, 0.01541460957378149, 0.007445173803716898, 0.0072318254970014095, 0.013528239913284779, 0.0032612548675388098, 0.019717363640666008, 0.0075674694962799549, 0.0078803496435284615, 0.015635380521416664, 0.0041565243154764175, 0.0072541455738246441, 0.0049914158880710602, 0.022922620177268982, 0.0094384355470538139, 0.0093062529340386391, 0.0071024335920810699, 0.0061204922385513783, 0.01242940966039896, 0.0063810660503804684, 0.010904381982982159, 0.0072024906985461712, 0.017857763916254044, 0.011038308963179588, 0.0085906973108649254, 0.0060761603526771069, 0.011806116439402103, 0.012870494276285172, 0.01201669592410326, 0.0066358121111989021, 0.022673817351460457, 0.017646923661231995, 0.014588925056159496, 0.011873464100062847, 0.011578274890780449, 0.0059911557473242283, 0.0057763052172958851, 0.0086274789646267891, 0.02148914523422718, 0.0050489273853600025, 0.0055702556855976582, 0.010503027588129044, 0.015115989372134209, 0.0047408388927578926, 0.01097833551466465, 0.019768854603171349, 0.0080285072326660156, 0.007204938679933548, 0.0095083452761173248, 0.0033843659330159426, 0.0058397394604980946, 0.0050594308413565159, 0.0097278691828250885, 0.0042505660094320774, 0.013779797591269016, 0.004878197330981493, 0.013475845567882061, 0.0048476592637598515, 0.011590713635087013, 0.0048451065085828304, 0.011522805318236351, 0.004393325187265873, 0.009306696243584156, 0.0045574815012514591, 0.01022349763661623, 0.013880086131393909, 0.0077491626143455505, 0.0033984123729169369, 0.013916910625994205, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 864, 6436, 248, 1050, 4279, 12191, 16, 1396, 12808, -658, 18422, 4344, 1164, 505, 4271, 695, 2533, 3886, -293, 9185, 942, 7314, -814, 2166, -8157, 1001, 2278, 1596, 5343, 1193, 2827, 3896, 1539, 10474, 3166, 3623, 3114, 1575, 4340, 2578, 13785, 1235, 2136, 963, 1947, 8105, 4910, 7732, 1304, -696, 1550, 5242, 2316, -2361, 7664, 273, 1902, 10895, 1049, 2408, 1840, 9010, 3263, -65, 17163, 12083, 1627, 3535, 6409, 4763, 1640, 1129, -2744, 4419, 1574, 2529, 412, 8947, 3385, 7212, 1537, 974, 3622, 18656, -334, 8052, 6712, 1782, -664, 2125, 1444, 13171, 3101, 2341, 3793, 3566, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00031794206006452441, 0.00011842992535093799, 0.00035725848283618689, 0.00031574050080962479, 0.00015863636508584023, 7.6033240475226194e-05, 0.00029901729431003332, 0.00018816778901964426, 6.8766901677008718e-05, 0.00022016020375303924, 4.9691305321175605e-05, 0.00011427183926571161, 0.00027776730712503195, 0.00036960537545382977, 0.00014226351049728692, 0.00012787217565346509, 0.00022982421796768904, 0.00015830059419386089, 0.00014983689470682293, 9.6714495157357305e-05, 0.00026678823633119464, 0.00010624586866470054, 0.00025784652098082006, 0.00013292070070747286, 9.4791306764818728e-05, 0.00022020112373866141, 0.00021551344252657145, 0.00023260028683580458, 0.00016312957450281829, 0.00021045922767370939, 0.00019948957196902484, 0.00014185749751050025, 0.00024721879162825644, 8.0455931311007589e-05, 0.00017124017176683992, 0.00016709015471860766, 0.00018147393711842597, 0.0002190972154494375, 0.0001226291642524302, 0.00016271218191832304, 6.8334535171743482e-05, 0.00020077222143299878, 0.0001700835709925741, 0.00018562845070846379, 0.00019881072512362152, 0.000103232596302405, 0.0001392307021887973, 9.8892916867043823e-05, 0.00024420293630100787, 0.00023686181521043181, 0.00027178804157301784, 0.0001372329134028405, 0.00019442287157289684, 0.00017843073874246329, 9.5496041467413306e-05, 0.00028463767375797033, 0.00015811008051969111, 8.4678838902618736e-05, 0.00017174854292534292, 0.00013336489791981876, 0.00021161606127861887, 9.6546275017317384e-05, 0.00018110575911123306, 0.00029481176170520484, 5.5375141528202221e-05, 7.419934991048649e-05, 0.00024640615447424352, 0.00016546540427953005, 0.00012529882951639593, 0.000105945800896734, 0.00030367763247340918, 0.00019797529967036098, 0.00019033259013667703, 0.00014591762737836689, 0.00023582414723932743, 0.000238712367718108, 0.00023551838239654899, 9.3462433142121881e-05, 0.00016424708883278072, 0.00012893880193587393, 0.00026215828256681561, 0.00016666075680404902, 0.00012707560381386429, 5.380589936976321e-05, 0.00012886883632745594, 8.7651191279292107e-05, 0.00011364369856892154, 0.00024400682013947517, 0.00026330989203415811, 0.00025707934400998056, 0.00017636150005273521, 6.4543179178144783e-05, 0.00015556461585219949, 0.00018861040007323027, 0.00013899710029363632, 0.00016761239385232329, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 65,-7,4,80,-127,-17,117,59,97,126,-34,61,34,2,25,82, 
  /* [1][0][][] */ -25,17,-81,8,127,110,-1,4,-13,9,-64,28,-45,86,-52,-46, 
  /* [2][0][][] */ -44,64,84,-7,63,87,10,38,39,-8,41,-16,55,-127,-20,14, 
  /* [3][0][][] */ 127,-37,16,16,25,31,9,13,52,14,-52,-37,-33,45,-25,61, 
  /* [4][0][][] */ -85,-2,-18,5,-74,4,-52,-1,-2,21,-1,-35,-17,50,-34,127, 
  /* [5][0][][] */ -107,7,22,18,127,23,14,27,-60,24,-16,8,-56,69,-79,-14, 
  /* [6][0][][] */ -127,14,-31,33,-9,-79,78,17,6,-38,-59,32,14,-6,-43,14, 
  /* [7][0][][] */ 4,119,66,-127,56,32,120,16,25,-4,-7,40,100,13,-22,21, 
  /* [8][0][][] */ -31,-33,-78,93,-46,98,-70,-87,50,-33,105,53,127,33,-112,-11, 
  /* [9][0][][] */ -28,-127,-9,78,-48,-83,-5,87,59,42,5,70,-83,11,0,-44, 
  /* [10][0][][] */ -49,-68,-87,45,-100,127,85,-89,30,-80,43,-42,47,109,-102,52, 
  /* [11][0][][] */ -72,-94,-33,55,5,76,31,13,0,21,41,-89,-3,125,-101,127, 
  /* [12][0][][] */ -24,-58,-58,87,-99,-127,14,49,43,49,-24,76,-6,-53,-27,0, 
  /* [13][0][][] */ -71,-21,-36,-6,-10,8,38,7,-22,127,-14,-24,40,36,17,-10, 
  /* [14][0][][] */ -127,1,-45,-40,-14,73,-11,-64,82,-46,80,2,52,-10,-81,-48, 
  /* [15][0][][] */ -5,-127,120,-86,-67,-42,19,67,5,-49,-120,-43,105,-35,-43,-45, 
  /* [16][0][][] */ -24,-36,31,-28,37,15,-16,-20,70,-127,34,-21,-19,7,-68,-89, 
  /* [17][0][][] */ -28,10,28,-63,20,-6,-26,5,84,-57,13,62,115,-73,-40,-127, 
  /* [18][0][][] */ 72,0,-41,-121,9,-32,127,-50,26,67,-5,70,-2,86,-18,-124, 
  /* [19][0][][] */ -54,-32,-16,-77,-118,29,-13,14,31,-45,29,-127,-19,7,-40,1, 
  /* [20][0][][] */ 15,60,57,-101,59,19,-51,95,-111,-120,59,-88,-22,127,-34,10, 
  /* [21][0][][] */ 34,-119,-113,-23,114,28,92,81,-67,-84,-30,57,127,-121,-18,15, 
  /* [22][0][][] */ 48,5,76,-16,6,11,66,11,10,127,38,25,-10,8,104,2, 
  /* [23][0][][] */ -122,-81,-23,55,56,46,33,2,-5,-9,-17,-98,4,64,65,127, 
  /* [24][0][][] */ 11,-4,40,27,13,-104,8,-56,23,127,-123,71,-31,-75,86,-72, 
  /* [25][0][][] */ 127,-37,94,115,42,13,-10,12,-113,82,51,-37,-21,27,67,-12, 
  /* [26][0][][] */ -20,24,14,41,-55,111,-16,36,-58,-32,-86,34,3,22,43,-127, 
  /* [27][0][][] */ 37,10,-2,-61,-45,-4,-92,15,-104,-20,-74,-25,-91,39,-4,127, 
  /* [28][0][][] */ -77,16,34,13,17,-17,-127,14,-10,-56,0,-20,23,-32,-84,-37, 
  /* [29][0][][] */ -22,-103,-8,85,-28,0,118,5,72,63,-127,77,28,-17,-38,73, 
  /* [30][0][][] */ 50,-54,-46,14,-127,19,48,-48,4,-4,-2,-32,-7,27,-13,71, 
  /* [31][0][][] */ -127,-13,1,99,-35,12,-51,-4,-24,-64,15,-34,-27,-66,-17,92, 
  /* [32][0][][] */ -127,-80,-108,-7,-117,-54,4,-14,126,56,-53,-71,42,48,33,-27, 
  /* [33][0][][] */ -13,13,-110,46,-125,-102,53,2,-127,19,-51,-57,-30,112,63,74, 
  /* [34][0][][] */ 34,62,10,40,-67,-41,27,24,20,-127,-5,35,-25,-3,43,113, 
  /* [35][0][][] */ 25,-17,-72,-14,-124,12,127,-26,36,49,-23,-14,22,107,55,87, 
  /* [36][0][][] */ -4,-5,-49,61,127,-17,37,73,-58,19,-75,-75,18,-25,2,15, 
  /* [37][0][][] */ -112,50,2,-77,49,-89,-39,-37,-3,-21,-33,40,45,-93,20,-127, 
  /* [38][0][][] */ 31,91,17,-64,-87,-51,-127,-60,-45,-49,65,63,-77,-91,59,-18, 
  /* [39][0][][] */ 2,-42,22,86,29,79,77,-48,-4,66,-4,-30,-12,127,65,125, 
  /* [40][0][][] */ 98,36,88,73,-46,-51,13,23,-68,54,-31,-16,-29,-21,127,-3, 
  /* [41][0][][] */ -34,-2,10,54,-111,122,4,58,-73,24,-119,5,20,42,68,-127, 
  /* [42][0][][] */ -15,-90,17,-8,127,36,78,22,-41,-109,-80,-29,-16,9,-11,52, 
  /* [43][0][][] */ -36,-68,-21,9,103,16,-11,71,-67,-44,-127,-52,99,11,-34,43, 
  /* [44][0][][] */ -16,-47,-68,-105,-4,54,49,-1,-43,-127,-54,57,-24,30,26,95, 
  /* [45][0][][] */ 0,-63,-64,-14,-127,64,-22,-68,59,-45,32,-46,13,18,-51,40, 
  /* [46][0][][] */ 32,-75,-17,1,83,-97,0,96,-9,-27,33,61,-64,-56,71,-127, 
  /* [47][0][][] */ -79,-42,-4,80,-8,36,34,20,5,127,83,83,-35,79,-11,106, 
  /* [48][0][][] */ 44,-13,-74,-90,43,-68,11,51,51,-71,-11,20,-53,4,-40,-127, 
  /* [49][0][][] */ 40,40,-4,30,1,-21,49,52,-35,127,-29,34,-33,-4,74,94, 
  /* [50][0][][] */ -1,-2,15,7,-127,-14,-15,-49,52,26,20,51,-19,-56,13,-1, 
  /* [51][0][][] */ 10,-16,3,-127,-10,74,41,-52,5,14,25,-34,69,79,-28,5, 
  /* [52][0][][] */ 25,-14,4,-82,84,-126,-16,-17,43,-13,127,-67,43,-3,-20,114, 
  /* [53][0][][] */ -44,-62,30,-35,-56,-127,27,-107,-10,79,-77,78,-21,-20,30,-81, 
  /* [54][0][][] */ 59,84,44,1,-127,-60,-123,-79,-13,26,77,96,-92,-44,64,12, 
  /* [55][0][][] */ 11,11,-32,69,-34,19,36,-11,2,127,23,61,-12,7,7,40, 
  /* [56][0][][] */ 15,-109,-86,83,-70,29,13,106,127,2,64,62,-53,-5,92,125, 
  /* [57][0][][] */ 26,52,86,-74,70,-20,-2,16,40,-31,32,127,34,-2,110,-25, 
  /* [58][0][][] */ 81,-60,18,-62,39,10,5,127,58,86,-9,63,49,21,96,-3, 
  /* [59][0][][] */ -49,64,38,-42,-10,-107,-17,35,-2,25,-104,-94,-127,-50,75,-11, 
  /* [60][0][][] */ 35,-29,29,6,14,-17,8,-41,35,127,-21,62,-4,-15,-15,-41, 
  /* [61][0][][] */ 64,47,18,-23,-78,-127,-21,-39,-58,-11,-30,12,-63,-39,82,64, 
  /* [62][0][][] */ -14,99,-36,38,-65,127,-52,33,-54,5,-50,27,-39,35,69,-84, 
  /* [63][0][][] */ 32,5,-59,-127,-23,-49,69,-18,-2,-99,-34,26,-48,65,33,-38, 
  /* [64][0][][] */ -40,1,25,-18,65,-73,32,91,-127,-20,-102,-55,-51,81,87,71, 
  /* [65][0][][] */ -60,-23,-47,-10,89,52,-41,-106,-127,-56,0,-41,-126,102,-59,47, 
  /* [66][0][][] */ -11,62,-12,26,-42,127,-21,19,-55,24,-33,53,-35,49,52,-90, 
  /* [67][0][][] */ 17,-9,-42,-40,17,-80,75,-92,-12,40,12,127,-70,-21,-13,-108, 
  /* [68][0][][] */ -17,-127,-24,76,1,-9,15,101,43,62,67,32,-94,64,-19,-2, 
  /* [69][0][][] */ 10,53,58,-89,82,8,-57,100,48,127,72,119,75,-85,58,-106, 
  /* [70][0][][] */ 34,36,40,-30,77,7,-82,-46,-127,-96,10,40,-20,74,-90,3, 
  /* [71][0][][] */ -6,-63,37,-57,73,-28,30,16,-89,88,-127,-27,16,98,-11,37, 
  /* [72][0][][] */ 10,41,40,-6,-62,-48,-108,-63,-19,68,-3,58,33,122,-127,15, 
  /* [73][0][][] */ 21,-23,-19,-55,37,-123,26,-54,93,103,108,-5,30,-26,-83,127, 
  /* [74][0][][] */ 3,7,-23,79,-74,-9,91,36,69,78,24,127,118,42,-54,15, 
  /* [75][0][][] */ -26,36,-14,19,-48,127,-14,11,-31,33,-35,45,-11,51,15,-64, 
  /* [76][0][][] */ -70,90,-61,64,-127,-24,-3,40,40,32,-46,-49,69,-39,-122,47, 
  /* [77][0][][] */ 111,127,-115,108,68,47,43,64,33,28,106,-15,56,32,89,21, 
  /* [78][0][][] */ 21,-42,-1,-72,69,-123,34,-61,48,49,127,-18,18,-16,-44,126, 
  /* [79][0][][] */ -43,62,-6,19,-9,-51,-40,3,-127,-8,40,-5,74,33,-57,-26, 
  /* [80][0][][] */ -64,24,77,-15,62,48,-23,-127,-60,76,-59,-32,-24,-109,36,48, 
  /* [81][0][][] */ 78,58,-24,6,34,-18,76,127,-114,115,-60,-39,-25,36,92,118, 
  /* [82][0][][] */ 65,105,-18,-77,15,-55,100,-97,58,38,-78,84,127,-36,69,-63, 
  /* [83][0][][] */ -5,-24,9,19,-12,38,-28,-121,62,-43,123,18,28,-60,-56,-127, 
  /* [84][0][][] */ -127,-65,-47,-13,-3,95,75,14,77,72,110,113,45,97,-77,18, 
  /* [85][0][][] */ 127,-15,118,-79,86,-9,-18,74,32,125,-78,4,-39,54,124,6, 
  /* [86][0][][] */ -85,69,-49,18,25,72,12,27,80,24,127,-35,-33,53,-5,-12, 
  /* [87][0][][] */ 12,-58,28,-50,44,-127,27,-29,50,-8,62,-32,33,-40,-42,68, 
  /* [88][0][][] */ -68,49,36,-5,107,-24,43,34,-55,-71,102,-64,79,127,104,-123, 
  /* [89][0][][] */ -28,38,-11,31,-36,127,-24,37,-49,10,-39,19,-13,49,32,-86, 
  /* [90][0][][] */ 48,-77,11,22,127,-2,45,28,-8,-81,-100,-21,-14,-4,-56,33, 
  /* [91][0][][] */ -9,89,-18,-32,-1,-124,-119,59,-97,13,-114,-127,-126,-79,2,24, 
  /* [92][0][][] */ 63,52,74,37,-127,-102,7,21,-24,39,-25,-31,-24,-74,20,-2, 
  /* [93][0][][] */ 21,-127,-101,90,-44,-60,-23,113,91,47,2,55,-70,30,-15,-44, 
  /* [94][0][][] */ 97,-4,127,-12,34,-35,23,44,35,78,-15,46,18,12,109,-12, 
  /* [95][0][][] */ -71,-28,-27,-26,127,-3,41,80,-34,3,-86,-41,16,31,-64,38, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0050358935259282589, 0.0018758149817585945, 0.005658627487719059, 0.0050010229460895061, 0.0025126459077000618, 0.0012042926391586661, 0.0047361436299979687, 0.0029803949873894453, 0.0010892009595409036, 0.0034871238749474287, 0.00078706198837608099, 0.0018099549924954772, 0.0043995645828545094, 0.0058541903272271156, 0.0022533158771693707, 0.0020253709517419338, 0.0036401923280209303, 0.0025073275901377201, 0.0023732709232717752, 0.0015318637015298009, 0.0042256666347384453, 0.0016828313237056136, 0.0040840385481715202, 0.0021053347736597061, 0.0015014022355899215, 0.0034877718426287174, 0.0034135235473513603, 0.0036841626279056072, 0.0025838140863925219, 0.0033334698528051376, 0.0031597211491316557, 0.0022468850947916508, 0.003915705718100071, 0.0012743438128381968, 0.0027122779283672571, 0.0026465458795428276, 0.0028743708971887827, 0.0034702871926128864, 0.0019423268968239427, 0.0025772028602659702, 0.0010823527118191123, 0.0031800370197743177, 0.002693958580493927, 0.0029401744250208139, 0.0031489687971770763, 0.0016351040685549378, 0.0022052791900932789, 0.0015663678059354424, 0.0038679372519254684, 0.0037516611628234386, 0.0043048583902418613, 0.0021736361086368561, 0.0030794695485383272, 0.0028261695988476276, 0.0015125646023079753, 0.0045083845034241676, 0.002504310104995966, 0.0013412305852398276, 0.0027203301433473825, 0.0021123704500496387, 0.0033517929259687662, 0.001529199187643826, 0.0028685394208878279, 0.0046695321798324585, 0.00087708845967426896, 0.001175245619378984, 0.0039028343744575977, 0.002620811341330409, 0.0019846118520945311, 0.0016780785517767072, 0.0048099588602781296, 0.0031357365660369396, 0.0030146832577884197, 0.0023111933842301369, 0.0037352254148572683, 0.0037809719797223806, 0.0037303825374692678, 0.001480354112572968, 0.0026015143375843763, 0.0020422653760761023, 0.0041523324325680733, 0.0026397444307804108, 0.0020127540919929743, 0.00085223320638760924, 0.0020411571022123098, 0.0013883097562938929, 0.0018000057898461819, 0.0038648310583084822, 0.0041705728508532047, 0.0040718871168792248, 0.002793394960463047, 0.0010223012650385499, 0.0024639924522489309, 0.0029874055180698633, 0.0022015790455043316, 0.002654817420989275, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -6817, 12155, -19499, 576, 7618, -14442, -39303, -8613, -6510, 7882, -14739, -13350, 6523, -11792, -4140, -2780, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00015963459736667573, 0.00014646013732999563, 0.00016403678455390036, 0.00015061290469020605, 0.0001024958401103504, 0.00014986393216531724, 0.00010305547766620293, 0.00011496266961330548, 0.00010623351408867165, 9.948851220542565e-05, 0.00021182533237151802, 0.00012525358761195093, 0.00011537622776813805, 7.5202653533779085e-05, 0.00011139763228129596, 0.00012807094026356936, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 31,37,24,-36,68,67,-34,64,-12,108,7,50,-36,41,-7,48,30,87,58,-67,-67,77,-4,52,65,41,38,54,-41,-44,-4,96,-26,19,-71,49,55,-127,-30,4,13,-33,68,0,-4,-52,-67,-19, 
  /* [1][0][][] */ -56,10,-82,-46,14,94,-66,22,-8,-32,-47,27,57,-11,-34,-34,-32,-34,-2,24,-71,42,-101,-41,-56,-41,50,74,-27,-36,38,-52,10,-47,-31,56,7,-60,127,-32,-25,28,-53,-21,36,49,33,19, 
  /* [2][0][][] */ -2,8,61,-35,-14,-83,17,29,96,75,-63,20,108,-47,127,81,-69,-18,-28,31,79,-85,-37,-108,9,-37,39,-71,48,47,-45,20,34,-25,53,40,-70,8,4,-35,28,27,67,-19,23,-88,96,-54, 
  /* [3][0][][] */ 35,-5,-32,-24,27,112,24,-22,43,-50,29,-24,-52,12,18,41,-40,-63,35,-127,-9,-7,-25,-16,-45,94,118,64,-2,-41,36,47,52,-34,100,27,-51,-55,9,40,23,12,-17,3,29,26,-16,-32, 
  /* [4][0][][] */ 91,-19,13,-45,90,88,58,12,63,-16,-97,37,42,-24,24,-11,-92,-114,-22,-92,-19,28,-38,-33,-79,127,-97,117,-58,-49,29,79,39,-38,20,-32,-4,14,-21,30,-42,-3,10,48,-56,104,-24,-48, 
  /* [5][0][][] */ 6,-4,-60,4,-9,57,14,-30,64,52,40,87,54,-21,30,-6,-38,127,-22,38,12,-3,-63,-15,31,-5,-65,-33,-10,31,22,-19,-41,5,43,15,-49,11,-87,6,89,-24,24,47,-14,5,-38,34, 
  /* [6][0][][] */ 62,12,16,75,3,-28,111,-44,6,55,119,108,50,40,-35,66,42,-42,-77,76,47,-58,-32,66,-81,78,81,-9,105,48,-27,13,93,-58,-114,-7,106,31,-5,-4,15,61,58,-25,61,127,29,-7, 
  /* [7][0][][] */ -96,-3,-23,27,-59,-55,22,45,76,120,-60,-70,-98,12,-18,-13,-80,94,0,120,-46,39,18,40,-19,-88,-30,-81,25,37,-16,5,-14,15,12,-16,1,-58,127,18,10,43,18,-13,56,70,-29,0, 
  /* [8][0][][] */ -4,-107,57,-67,67,-61,83,-37,-28,-124,33,9,-39,7,40,36,-6,5,-46,106,14,37,-15,26,72,-16,-68,-39,-127,-26,-57,-112,5,-75,4,85,-8,30,122,11,16,0,85,126,-12,-71,-43,80, 
  /* [9][0][][] */ 16,-44,18,-60,39,90,-41,59,19,-39,-38,-14,26,-49,122,-19,12,-117,33,39,-68,41,61,-40,-28,-85,-33,85,52,78,-46,-25,-54,39,-7,127,-32,-45,-53,-26,-34,5,31,111,57,94,-72,12, 
  /* [10][0][][] */ -12,21,-25,-6,22,29,-69,-42,50,38,63,-5,-32,-11,46,-54,-59,127,-6,50,-1,-10,18,28,-44,41,2,95,28,7,-35,-15,73,11,-9,24,-11,-46,-41,24,-82,-4,25,-17,16,46,28,31, 
  /* [11][0][][] */ -20,53,-22,40,32,62,-9,7,11,21,-127,-70,73,20,-12,-46,3,23,-51,-44,-7,-8,104,1,50,9,-14,37,-8,25,-7,47,32,-6,-53,3,45,81,99,24,36,-31,57,-1,-56,-22,91,7, 
  /* [12][0][][] */ -64,8,34,25,-57,-56,-4,5,-37,-38,-127,21,74,-101,18,31,53,102,79,-121,-35,43,-41,-77,-2,-22,40,-29,1,14,-19,69,71,83,37,-33,-52,-28,27,1,-32,20,60,-3,35,-14,-37,-36, 
  /* [13][0][][] */ -66,-113,-53,-99,10,29,57,5,-127,31,122,-61,61,43,118,1,126,28,-9,-100,78,-85,116,5,-86,11,-29,18,-51,-99,-116,8,47,-21,-73,64,28,-54,85,-71,-11,62,64,42,61,-24,108,-71, 
  /* [14][0][][] */ 72,16,-58,5,-47,16,-85,-14,-28,64,59,45,-18,-56,15,-44,50,-117,33,13,96,-63,30,-1,-8,127,-90,4,-48,-29,-91,9,123,48,96,-21,-87,8,-19,58,-15,-48,110,-26,-60,-45,-60,55, 
  /* [15][0][][] */ -68,18,39,20,93,7,0,31,23,80,-20,51,54,-11,-35,-24,9,38,-6,-37,23,-35,-48,-49,51,-60,-40,64,-43,4,10,3,-54,1,127,-5,-92,17,60,-10,-46,-17,20,-2,-36,-27,-13,8, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0067844702862203121, 0.006224555429071188, 0.0069715632125735283, 0.0064010485075414181, 0.0043560732156038284, 0.0063692172989249229, 0.0043798577971756458, 0.0048859133385121822, 0.0045149242505431175, 0.0042282617650926113, 0.00900257658213377, 0.0053232773207128048, 0.0049034897238016129, 0.0031961125787347555, 0.0047343992628157139, 0.0054430151358246803, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 17243, -1216, 19093, -446, 15461, -1893, 39554, 330, 11420, 43070, 1299, 23679, 4102, 11984, 31984, 27307, -642, -121, 2511, 57616, -440, 19760, 219, 16875, 18725, 33508, 897, -1174, -3925, 14119, 21073, -190, 2217, -997, -320, 14719, 12253, 33160, 550, 18528, 27450, 531, 810, 18706, -44, -169, 40565, 24804, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.1845584393013269e-05, 0.00012885246542282403, 7.305102190002799e-05, 0.00012091302050976083, 0.00010703143925638869, 9.0278968855272979e-05, 5.3570725867757574e-05, 0.00025257497327402234, 0.00010992601892212406, 4.6709341404493898e-05, 6.7335815401747823e-05, 0.00011413570609875023, 5.4202821047510952e-05, 9.5842187874950469e-05, 5.3790321544511244e-05, 7.7741678978782147e-05, 0.00011735004227375612, 6.0958416725043207e-05, 0.00014881642709951848, 3.6749250284628943e-05, 7.660041592316702e-05, 6.5880827605724335e-05, 0.00010780465527204797, 0.00010937231127172709, 6.9494271883741021e-05, 6.9558678660541773e-05, 5.4303800425259396e-05, 4.5996868720976636e-05, 0.0002395945048192516, 9.5860938017722219e-05, 6.7028406192548573e-05, 0.00031163665698841214, 9.8859018180519342e-05, 0.00017585222667548805, 9.6965661214198917e-05, 7.2275404818356037e-05, 0.00010227506572846323, 4.9172951548825949e-05, 0.0001046585020958446, 7.7275799412745982e-05, 5.1695038564503193e-05, 0.00015589818940497935, 0.00029776120209135115, 6.4818676037248224e-05, 0.00014976225793361664, 6.6027103457599878e-05, 4.8649006203049794e-05, 5.622330354526639e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -101,65,-127,90,-96,83,-65,85,-69,-79,67,-58,66,-90,-39,-62,70,80,109,-101,100,-127,73,-83,-86,-44,75,119,-98,-51,-95,72,75,-90,53,-120,-83,-116,76,-33,-17,-89,105,-127,100,61,-67,-57, -127,88,-66,115,-70,119,-64,116,-127,-98,97,-78,92,-112,-59,-85,90,113,127,-120,110,-110,81,-127,-101,-72,92,127,27,-90,-105,127,97,-127,82,-126,-88,-127,109,-70,-98,104,127,-124,-30,102,-89,-71, -53,53,-2,33,-20,68,-33,23,-67,-23,54,-31,40,-45,-20,-2,39,41,68,-43,48,-51,21,-50,-81,-43,39,34,105,-13,-64,52,24,-81,35,-32,-25,-38,35,-48,-112,-35,40,-61,-71,65,-23,-67, 
  /* [0][1][][] */ -97,85,-71,103,-73,117,-117,108,-99,-100,79,-84,98,-103,-81,-95,104,105,-63,-110,105,-121,111,-76,-127,-92,92,117,-127,-81,-104,76,96,37,102,-111,-117,-106,99,-101,-93,-103,95,-116,127,72,-102,-107, -123,127,-98,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-79,-127,127,-111,127,-114,-113,-127,127,114,12,-127,-127,100,127,40,127,-127,-127,-115,127,-127,-127,127,114,-125,-62,127,-127,-127, -77,83,-87,36,-62,41,-49,61,-45,-31,52,-59,71,-61,-47,-14,59,60,-56,-39,29,-46,52,-42,-101,-57,59,42,109,-54,-77,50,25,20,56,-31,-34,-28,53,-64,-63,-70,26,-75,-93,72,-29,-77, 
  /* [0][2][][] */ -55,40,-10,47,-30,65,-77,40,-50,-51,22,-52,45,-51,-31,-88,56,40,-54,-42,18,-42,34,-35,-63,-42,37,14,-60,-74,-34,53,44,56,41,-52,-49,-51,27,-70,-117,-45,28,-73,85,25,-88,-54, -79,66,-73,53,-64,41,-87,29,-70,-60,45,-72,58,-58,-49,-87,66,59,-76,-39,21,-56,53,-43,-51,-61,59,45,20,-101,-45,44,27,77,62,-64,-63,-39,31,-71,-63,68,33,-71,-29,49,-91,-75, -34,53,-66,13,-38,-6,-47,16,-25,-13,27,-43,44,-36,-26,0,38,26,-43,-8,5,-2,31,-22,-46,-32,41,18,78,-26,-19,15,0,54,27,4,-19,-1,5,-43,1,-25,2,-32,-42,31,-24,-41, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0039034374058246613, 0.0054762298241257668, 0.0031046683434396982, 0.0051388032734394073, 0.0045488360337913036, 0.0038368559908121824, 0.0022767558693885803, 0.010734436102211475, 0.0046718558296561241, 0.0019851468969136477, 0.0028617719653993845, 0.0048507675528526306, 0.0023036198690533638, 0.0040732929483056068, 0.002286088652908802, 0.0033040214329957962, 0.0049873767420649529, 0.0025907326489686966, 0.0063246982172131538, 0.001561843091621995, 0.0032555176876485348, 0.0027999351732432842, 0.0045816977508366108, 0.0046483231708407402, 0.0029535065405070782, 0.0029562439303845167, 0.0023079114034771919, 0.0019548668060451746, 0.010182766243815422, 0.0040740896947681904, 0.0028487071394920349, 0.013244557194411755, 0.0042015081271529198, 0.007473719771951437, 0.0041210404597222805, 0.0030717046465724707, 0.0043466901406645775, 0.0020898503717035055, 0.0044479863718152046, 0.0032842212822288275, 0.0021970390807837248, 0.0066256728023290634, 0.012654851190745831, 0.0027547937352210283, 0.0063648959621787071, 0.0028061519842594862, 0.0020675826817750931, 0.0023894903715699911, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2955, -1429, 866, -2329, 3785, -876, 4554, -4155, 1129, 759, 2378, 3772, 370, -432, 742, 5213, -1739, 4125, 4416, 904, -667, 2680, -861, 6368, 2182, 1937, 1555, -950, 12912, -377, 2615, -2122, -866, 4298, -727, 1827, 1803, 1021, 702, 5027, 1730, 8033, -4671, 1855, 7358, 140, 1843, 2767, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00017619814025238156, 0.00025195800117217004, 0.00027810517349280417, 0.00019219552632421255, 0.00020184005552437156, 0.00018857083341572434, 0.00016670690092723817, 0.00013681840209756047, 0.00027127770590595901, 0.00025833182735368609, 0.00018507108325138688, 0.00020060883252881467, 0.00028847411158494651, 0.00030126806814223528, 0.00024345074780285358, 0.00015680436627008021, 0.00024990658857859671, 0.00019232780323363841, 0.0001857748138718307, 0.00027703290106728673, 0.00028605444822460413, 0.00021281896624714136, 0.00020207033958286047, 0.00013738610141444951, 0.00020598767150659114, 0.00021690338326152414, 0.00022545288084074855, 0.00025337282568216324, 7.7113276347517967e-05, 0.00028791159274987876, 0.00017283851047977805, 0.00017000420484691858, 0.00017978601681534201, 0.0001738571299938485, 0.00024008576292544603, 0.00026041691307909787, 0.00023492175387218595, 0.00021349822054617107, 0.00019482399511616677, 0.0001570993335917592, 0.0002806177653837949, 0.00010737530828919262, 0.00012521870667114854, 0.00023363203217741102, 0.00011377257033018395, 0.00020469658193178475, 0.00028962656506337225, 0.00021645308879669756, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 71,33,127,-36,71,121,-92,-52, 
  /* [1][0][][] */ 10,-84,-127,6,53,25,34,2, 
  /* [2][0][][] */ -127,-10,-45,-26,49,23,-65,-42, 
  /* [3][0][][] */ 38,80,127,-82,-19,-122,-12,-14, 
  /* [4][0][][] */ -127,21,-44,-27,45,9,-36,-59, 
  /* [5][0][][] */ -102,25,-58,-8,8,46,-88,-127, 
  /* [6][0][][] */ -41,-127,-117,42,93,11,6,49, 
  /* [7][0][][] */ -61,-127,-104,-83,-72,-72,17,83, 
  /* [8][0][][] */ 94,30,-13,-2,94,-79,-127,17, 
  /* [9][0][][] */ -38,57,-54,88,-57,-41,127,-29, 
  /* [10][0][][] */ -25,127,35,65,112,-21,-11,60, 
  /* [11][0][][] */ -71,-34,-22,-7,-71,97,127,-4, 
  /* [12][0][][] */ 66,32,-127,36,-7,-30,-62,-12, 
  /* [13][0][][] */ 65,-28,-67,14,22,-127,-28,-22, 
  /* [14][0][][] */ 3,-80,74,2,127,-116,-54,13, 
  /* [15][0][][] */ -48,-48,1,127,66,83,-77,27, 
  /* [16][0][][] */ 109,27,-34,16,76,-104,-127,-27, 
  /* [17][0][][] */ 60,127,53,77,47,58,27,-86, 
  /* [18][0][][] */ 42,-24,-8,-9,127,3,35,-21, 
  /* [19][0][][] */ 11,127,37,17,-108,21,21,-31, 
  /* [20][0][][] */ -40,23,78,-127,19,28,-10,102, 
  /* [21][0][][] */ -37,78,47,-125,37,55,-17,127, 
  /* [22][0][][] */ -68,-66,-91,17,-127,117,106,-26, 
  /* [23][0][][] */ 106,21,-127,8,13,-53,-70,-31, 
  /* [24][0][][] */ -51,34,12,-2,-16,74,-127,88, 
  /* [25][0][][] */ -94,-59,-127,10,-46,-63,64,88, 
  /* [26][0][][] */ 42,-7,-43,-32,101,-18,127,-37, 
  /* [27][0][][] */ 127,-71,24,96,-3,33,-25,100, 
  /* [28][0][][] */ 53,48,52,-18,127,-66,60,-40, 
  /* [29][0][][] */ -24,-13,-25,-49,-73,17,127,-33, 
  /* [30][0][][] */ 39,-127,-55,-82,-115,-9,13,-48, 
  /* [31][0][][] */ 10,27,-9,-11,-127,3,-30,-8, 
  /* [32][0][][] */ 38,-62,-57,76,-4,-99,121,-127, 
  /* [33][0][][] */ 51,127,43,36,61,-16,-38,-25, 
  /* [34][0][][] */ -111,-33,127,1,-19,100,82,6, 
  /* [35][0][][] */ -23,68,127,-16,-53,-70,-35,18, 
  /* [36][0][][] */ -105,8,103,-27,-20,127,72,24, 
  /* [37][0][][] */ -19,-94,-8,-127,-47,-81,78,47, 
  /* [38][0][][] */ 42,-17,85,-58,55,56,-127,11, 
  /* [39][0][][] */ -28,110,-127,-34,-13,7,29,109, 
  /* [40][0][][] */ 65,-55,23,35,12,2,8,127, 
  /* [41][0][][] */ -29,74,127,2,-5,87,-72,23, 
  /* [42][0][][] */ 59,-126,-117,-27,-127,-6,22,-89, 
  /* [43][0][][] */ -6,-89,19,-57,127,-49,22,37, 
  /* [44][0][][] */ 3,123,127,21,-3,56,-63,17, 
  /* [45][0][][] */ -33,43,7,82,-117,58,-127,22, 
  /* [46][0][][] */ -50,-40,52,41,-127,-108,-27,3, 
  /* [47][0][][] */ -8,62,40,-104,-127,35,-31,56, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0021881225984543562, 0.003128949087113142, 0.0034536584280431271, 0.0023867867421358824, 0.0025065576191991568, 0.0023417733609676361, 0.0020702553447335958, 0.001699084066785872, 0.0033688715193420649, 0.0032081024255603552, 0.0022983115632086992, 0.0024912676308304071, 0.0035824254155158997, 0.0037413076497614384, 0.0030233014840632677, 0.0019472803687676787, 0.0031034734565764666, 0.0023884293623268604, 0.0023070508614182472, 0.0034403426107019186, 0.0035523769911378622, 0.0026428995188325644, 0.0025094174779951572, 0.0017061340622603893, 0.0025580648798495531, 0.0026936221402138472, 0.0027997943107038736, 0.0031465189531445503, 0.00095763389253988862, 0.0035754400305449963, 0.0021464009769260883, 0.0021112030372023582, 0.0022326787002384663, 0.0021590506657958031, 0.0029815132729709148, 0.003233996219933033, 0.0029173837974667549, 0.0026513349730521441, 0.0024194284342229366, 0.0019509433768689632, 0.0034848614595830441, 0.0013334439136087894, 0.0015550327952951193, 0.0029013673774898052, 0.0014128885231912136, 0.0025420314632356167, 0.003596737515181303, 0.0026880300138145685, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 245, -276, 24055, -4323, 6702, -13483, 348, -12214, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.7969983471557498e-05, 0.00010289065539836884, 0.00013785096234641969, 0.00010944363020826131, 0.00013724167365580797, 0.0001265376340597868, 8.6065279901959002e-05, 7.8187389590311795e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -35,-37,-16,-60,0,-11,88,80,-90,-84,-23,6,-54,0,-57,41,-71,12,18,127,59,-21,8,91,68,69,35,10,-84,-56,-69,-56,-43,92,30,-41,37,-22,84,-6,23,3,6,-91,41,-32,-29,-75, 
  /* [1][0][][] */ -17,56,-20,-23,-71,57,-22,-44,-29,73,-20,9,59,49,-51,-4,-17,-111,77,-44,127,9,-64,19,61,-9,-94,58,37,-7,63,32,-28,-16,2,-15,-5,103,-18,-20,59,43,-1,10,112,20,-25,58, 
  /* [2][0][][] */ -27,-36,118,4,86,-45,-7,30,-33,0,-14,50,15,-47,-49,-127,-50,-102,-23,20,-102,16,-41,-36,-51,18,-12,-51,-42,16,-32,-10,-2,-4,30,-10,26,-29,-58,8,29,-37,42,-45,-37,-47,-65,-51, 
  /* [3][0][][] */ 49,14,65,15,20,-38,39,73,-55,-32,51,-39,-68,65,-15,50,72,37,-32,33,-100,-62,127,-2,7,-8,-56,-31,-58,68,114,-60,4,-116,-24,48,-33,-86,-19,78,-85,-61,58,6,-90,-75,58,-3, 
  /* [4][0][][] */ 15,-19,60,-31,4,-13,-9,-7,-60,-10,-23,1,38,-66,41,-99,41,45,-10,-31,14,29,15,5,-5,1,53,-14,20,20,-127,-13,-30,-26,4,16,47,-5,31,-1,-42,-17,-64,21,-20,-90,0,18, 
  /* [5][0][][] */ 19,-52,57,22,28,15,24,3,-78,-12,-46,24,25,9,12,-52,91,76,-6,-15,93,-64,127,-92,-19,41,-7,46,7,21,-38,-49,-18,-46,-42,17,34,22,61,10,-78,26,32,29,48,-10,80,-3, 
  /* [6][0][][] */ -46,65,-122,90,53,14,32,26,-17,-6,59,-78,-93,-27,-36,38,-122,31,-6,92,23,50,-98,-85,-5,-20,24,82,-29,-31,-44,5,48,79,-51,-25,-22,-1,91,0,83,69,-127,-64,-36,122,-48,-35, 
  /* [7][0][][] */ 28,68,-84,10,9,60,122,69,36,65,-110,11,-51,2,-64,-54,24,36,127,95,83,7,124,25,100,101,-60,88,-67,34,-2,-81,13,-70,-21,25,11,95,-57,83,-62,37,-7,-95,73,-19,50,-30, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0041637243703007698, 0.0043728528544306755, 0.0058586657978594303, 0.0046513541601598263, 0.0058327708393335342, 0.0053778495639562607, 0.0036577743012458086, 0.0033229640685021877, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -331, 10464, -365, -685, 1188, -1082, 810, 2663, -3859, 175, -3219, -153, -2205, -853, -2881, 5114, 5230, 3206, 493, -3980, -9177, -2298, 17170, -4948, -1377, -1093, 5226, -6987, -627, -512, -7945, 10453, 3313, 572, 3512, -1306, -75, -109, 9560, -662, 7500, -2228, 2181, 5527, -1730, 10388, -1984, 1086, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00028062946512363851, 0.00015561396139673889, 0.00074782897718250751, 0.00020978879183530807, 0.00022507790708914399, 0.00026402575895190239, 0.00025467225350439548, 0.00029321538750082254, 0.00011040089884772897, 0.00034469735692255199, 0.00031033490085974336, 0.0016074748709797859, 0.00046472501708194613, 0.00054297770839184523, 0.00036990945227444172, 0.00064499728614464402, 0.00019079730554949492, 5.8632576838135719e-05, 0.00022057053865864873, 0.0003052226675208658, 0.00023062556283548474, 0.00025020592147484422, 8.3100996562279761e-05, 0.00044586003059521317, 0.0001734246761770919, 0.00037403998430818319, 0.00059937697369605303, 0.00019394353148527443, 0.00024659468908794224, 0.00033827903098426759, 0.00013526309339795262, 0.00011923022248083726, 0.00016273098299279809, 0.00028184597613289952, 0.00016059842891991138, 0.00029887005803175271, 0.0024068297352641821, 0.00030481902649626136, 0.000148120874655433, 0.0001707294286461547, 0.00020293825946282595, 0.00015186089149210602, 0.00033330710721202195, 0.00019992220040876418, 0.00030270195566117764, 7.8420242061838508e-05, 6.4764863054733723e-05, 0.00017767479585018009, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 11,-42,9,8,-17,-97,-34,49,-48,-11,-17,9,49,0,-8,-1,98,19,24,0,13,-7,-63,21,11,-18,-11,-29,-62,85,-11,-120,72,-11,-53,-40,-5,-39,9,-6,-26,38,15,1,-11,61,127,-18, -127,-98,-23,127,-72,80,-86,127,17,22,4,-3,54,23,-2,-49,-28,60,24,6,9,127,15,127,127,-32,-56,42,72,-124,-7,-83,92,-13,-32,-113,29,8,-62,-41,-127,-11,-90,-127,37,48,60,111, -6,-1,11,13,-32,33,41,41,0,-27,-11,6,-14,4,-4,-1,-53,44,-73,-27,-2,-19,127,21,-44,5,6,7,22,47,8,0,5,-21,-36,80,9,2,17,62,18,-24,30,-29,-8,33,-15,-16, 
  /* [0][1][][] */ -13,-17,-30,0,33,-116,127,-90,-19,5,7,38,127,20,3,-34,-13,-32,27,42,84,-53,50,12,-55,127,-77,-23,127,-101,47,-127,-33,1,-72,24,16,-72,-38,13,112,127,16,-122,-60,-56,-8,74, 94,-127,127,2,127,75,-66,-67,38,127,127,-127,-83,127,127,127,127,127,108,127,127,115,7,9,112,-98,-127,127,36,127,127,3,-127,127,127,127,-127,127,-127,-113,38,25,-127,-37,127,-127,-19,77, 23,36,-42,0,-57,127,-117,79,121,-77,14,67,-29,14,13,-66,18,18,-127,17,24,-98,-37,-5,63,-11,-15,118,-74,-42,19,-37,-30,18,92,-18,38,-10,-1,-94,105,-5,32,45,-52,110,98,-80, 
  /* [0][2][][] */ -4,21,5,-28,1,-83,-9,-18,-2,-4,-15,4,-6,-13,2,-1,-36,17,14,-37,16,-12,97,-10,-108,5,50,-14,5,1,0,30,-4,-23,-60,49,7,-15,27,58,-37,1,16,8,-12,22,-3,5, 39,-23,-35,-35,28,20,121,-127,127,-36,-9,9,-62,-22,-13,-69,-11,111,0,27,17,35,-16,-29,-87,61,87,1,-102,15,-32,-16,-21,-15,-33,8,61,-27,6,127,-124,-1,-6,59,38,62,19,-127, 1,32,4,-16,-18,-9,-7,-71,-31,-21,-21,8,22,-12,-3,16,47,56,-30,-15,-4,-14,-43,-15,12,-22,34,-24,-15,5,-13,8,32,-25,-29,-45,-6,-2,35,5,-20,-7,13,13,-10,27,70,-56, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011926751583814621, 0.0066135930828750134, 0.031782731413841248, 0.0089160231873393059, 0.0095658106729388237, 0.011221094988286495, 0.010823570191860199, 0.012461653910577297, 0.0046920380555093288, 0.014649637043476105, 0.013189232908189297, 0.068317681550979614, 0.019750813022255898, 0.023076552897691727, 0.015721151605248451, 0.027412384748458862, 0.0081088850274682045, 0.0024918843992054462, 0.0093742478638887405, 0.012971962802112103, 0.0098015861585736275, 0.010633751749992371, 0.0035317922011017799, 0.018949050456285477, 0.0073705483227968216, 0.015896698459982872, 0.025473520159721375, 0.0082425996661186218, 0.010480273514986038, 0.014376858249306679, 0.0057486812584102154, 0.0050672842189669609, 0.0069160666316747665, 0.011978453956544399, 0.006825433112680912, 0.012701977044343948, 0.10229026526212692, 0.01295480877161026, 0.0062951371073722839, 0.0072560003027319908, 0.0086248759180307388, 0.0064540877938270569, 0.014165552332997322, 0.0084966933354735374, 0.012864832766354084, 0.0033328603021800518, 0.0027525066398084164, 0.007551178801804781, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2395, 5173, 13537, 1663, 2273, -1431, 5187, 13569, 3480, -636, 3812, -2384, 20757, -1577, 1725, 20604, -341, 2155, 196, 2706, 3890, 3855, 453, 19947, 4615, 3373, 19709, 1631, 5283, 4959, 510, 972, 675, 1758, -176, 299, -2888, -492, 2375, 2341, 7524, 2102, 3540, 4245, 4174, 3661, 1729, 5380, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00022249360335990787, 0.00016185206186491996, 7.1553135057911277e-05, 0.00018336214998271316, 0.0002277570019941777, 0.00025277462555095553, 0.00014489865861833096, 7.0403264544438571e-05, 0.00015780075045768172, 0.00025176652707159519, 0.00021386818843893707, 0.00021739368094131351, 4.7534937039017677e-05, 0.00028494762955233455, 0.00025656694197095931, 5.3355106501840055e-05, 0.00029896947671659291, 0.00020420360669959337, 0.00029278019792400301, 0.00022636791982222348, 0.00019367657660041004, 0.00019942659127991647, 0.0003852669324260205, 5.3438168833963573e-05, 0.000172701824340038, 0.00016166410932783037, 5.4698408348485827e-05, 0.00026492413599044085, 0.00014160193677525967, 0.00015117862494662404, 0.00049036939162760973, 0.00043074323912151158, 0.00020697763829957694, 0.00024472014047205448, 0.00031488286913372576, 0.00032078326330520213, 0.00020927769946865737, 0.00029597483808174729, 0.00024650697014294565, 0.00021114389528520405, 0.00012024572788504884, 0.00024292409943882376, 0.00022181381064001471, 0.00018748160800896585, 0.00016834691632539034, 0.0001861785858636722, 0.00039758646744303405, 0.00015452210209332407, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 59,127,-91,-104,-2,89,11,96, 
  /* [1][0][][] */ 54,-70,45,-127,-61,65,-89,-42, 
  /* [2][0][][] */ -35,127,118,45,103,-8,44,14, 
  /* [3][0][][] */ 120,47,-105,80,1,-102,-127,-56, 
  /* [4][0][][] */ -48,45,30,-77,-35,112,127,48, 
  /* [5][0][][] */ 31,87,-127,-70,51,104,26,-40, 
  /* [6][0][][] */ -7,127,68,72,75,13,9,-96, 
  /* [7][0][][] */ 127,-35,-41,22,12,0,106,14, 
  /* [8][0][][] */ 56,127,48,90,125,95,106,-93, 
  /* [9][0][][] */ 41,103,-127,-88,4,97,7,50, 
  /* [10][0][][] */ -69,-44,21,-49,-5,-28,-48,127, 
  /* [11][0][][] */ 18,-106,-127,-18,21,-12,37,-7, 
  /* [12][0][][] */ -23,-106,-127,-22,-127,18,-80,38, 
  /* [13][0][][] */ -13,8,-98,102,-127,-25,0,-15, 
  /* [14][0][][] */ -68,-45,-127,-10,33,-7,-13,-55, 
  /* [15][0][][] */ 12,-102,-127,13,-93,-25,-22,-12, 
  /* [16][0][][] */ 127,-71,-22,67,-93,26,34,98, 
  /* [17][0][][] */ -27,113,127,-27,-52,-6,-25,-24, 
  /* [18][0][][] */ 18,-127,54,85,-7,-59,47,-88, 
  /* [19][0][][] */ 127,-44,-55,40,-99,8,40,104, 
  /* [20][0][][] */ -30,-127,82,78,-15,-94,-5,-79, 
  /* [21][0][][] */ -2,-56,-13,-35,127,-8,49,27, 
  /* [22][0][][] */ -127,20,-68,49,40,51,-89,-107, 
  /* [23][0][][] */ -84,-48,56,-12,-96,107,127,-41, 
  /* [24][0][][] */ -30,56,-6,-38,-51,119,127,-2, 
  /* [25][0][][] */ -57,-121,-127,-57,-48,-18,-14,-58, 
  /* [26][0][][] */ -12,70,-15,127,-90,34,-67,0, 
  /* [27][0][][] */ 9,-123,34,82,16,-53,1,-127, 
  /* [28][0][][] */ 16,127,55,35,100,-12,6,-62, 
  /* [29][0][][] */ 103,35,-28,-4,70,-127,-121,48, 
  /* [30][0][][] */ 35,-5,28,-127,28,-34,12,-29, 
  /* [31][0][][] */ 41,-40,8,62,-11,29,16,127, 
  /* [32][0][][] */ -96,-69,17,-54,-62,127,82,107, 
  /* [33][0][][] */ -31,42,47,-39,36,127,-107,73, 
  /* [34][0][][] */ 23,127,-64,-51,24,41,-61,66, 
  /* [35][0][][] */ 13,-127,36,55,-37,-56,36,-77, 
  /* [36][0][][] */ -20,-43,-97,-7,-127,-64,-11,18, 
  /* [37][0][][] */ -58,-127,75,84,-47,-93,-14,-54, 
  /* [38][0][][] */ -63,25,57,-69,-127,-75,-60,77, 
  /* [39][0][][] */ 67,-127,123,72,-4,-92,-36,-79, 
  /* [40][0][][] */ 2,81,28,66,-127,-24,-78,32, 
  /* [41][0][][] */ 113,127,-70,-97,54,26,2,19, 
  /* [42][0][][] */ -8,-41,-20,15,127,17,51,15, 
  /* [43][0][][] */ 127,22,79,25,-77,-20,66,104, 
  /* [44][0][][] */ 81,41,-22,17,68,-117,-127,16, 
  /* [45][0][][] */ 54,13,20,23,81,-127,-3,-57, 
  /* [46][0][][] */ 59,-38,-10,127,32,54,17,74, 
  /* [47][0][][] */ -68,-78,41,63,-61,27,127,-74, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0030752334278076887, 0.0022370659280568361, 0.00098898389842361212, 0.0025343713350594044, 0.0031479822937399149, 0.0034937676973640919, 0.0020027416758239269, 0.00097309076227247715, 0.0021810701582580805, 0.0034798341803252697, 0.0029560157563537359, 0.0030047439504414797, 0.00065701227867975831, 0.0039384523406624794, 0.0035461839288473129, 0.0007374567212536931, 0.0041322577744722366, 0.0028224349953234196, 0.0040467116050422192, 0.0031287828460335732, 0.0026769340038299561, 0.0027564086485654116, 0.005325032863765955, 0.00073860480915755033, 0.0023870277218520641, 0.0022344682365655899, 0.00075602339347824454, 0.0036616942379623652, 0.0019571753218770027, 0.0020895411726087332, 0.0067777247168123722, 0.0059535913169384003, 0.0028607768472284079, 0.003382441122084856, 0.0043522072955965996, 0.0044337608851492405, 0.0028925675433129072, 0.0040908670052886009, 0.0034071381669491529, 0.0029183614533394575, 0.0016619969392195344, 0.0033576169516891241, 0.0030658375471830368, 0.0025913091376423836, 0.0023268356453627348, 0.0025732992216944695, 0.0054953093640506268, 0.0021357536315917969, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7480, 15450, -4424, 7635, -1007, 4011, -11773, -17896, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00022643191914539784, 0.00010511917207622901, 0.0001559705997351557, 0.00013692236097995192, 0.00016497376782353967, 0.00015641273057553917, 0.00020843453239649534, 0.00014000522787682712, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -45,-3,34,11,-34,-14,9,7,-44,-5,-67,-57,-23,-66,-11,-32,46,-40,41,43,-16,31,-37,15,0,-40,57,-14,-4,-20,17,11,83,35,35,-127,13,0,-16,-34,2,-17,46,48,37,7,27,4, 
  /* [1][0][][] */ -1,41,68,-26,-14,48,-53,-29,3,28,-14,-98,9,93,-13,63,-13,20,-25,-58,7,-80,-32,24,-78,-15,-1,-119,-26,-14,35,-55,47,85,-45,2,127,-29,4,48,-26,41,-86,-28,119,-19,-31,-25, 
  /* [2][0][][] */ -5,-16,-57,14,-4,48,23,2,-10,43,-3,25,62,-89,18,-58,39,-87,18,34,-31,56,-7,29,-21,53,-22,-70,12,5,23,-67,-48,-83,27,-32,104,24,-10,-54,3,33,75,25,127,16,17,23, 
  /* [3][0][][] */ -5,26,-71,43,16,-40,-68,-103,14,-24,-36,1,5,26,34,76,-9,15,-30,26,2,-101,29,-58,-75,-8,127,-10,-42,2,-61,16,-5,-85,8,-13,-20,-42,-21,102,-46,-36,0,16,38,5,-42,41, 
  /* [4][0][][] */ -30,-44,-8,8,29,-28,-12,-7,26,-32,57,-76,6,27,10,11,-15,-24,12,-12,-6,-52,7,-18,16,-11,41,50,30,21,-14,28,-11,-2,3,0,-67,88,37,-26,31,-20,-20,-25,-77,11,127,9, 
  /* [5][0][][] */ 46,-17,-2,17,27,-43,34,-127,28,-28,-15,120,-79,66,21,-69,-3,-87,17,9,-47,68,-36,-47,-57,77,-27,2,-26,52,-41,-36,23,49,26,-6,-41,-10,-45,-39,14,-39,-45,-13,-34,56,84,24, 
  /* [6][0][][] */ 55,-25,22,-10,-37,-21,-39,17,-37,7,-41,127,-42,-37,-6,60,13,44,15,33,37,-84,-22,19,19,37,-62,5,8,-42,14,37,7,18,-13,0,13,3,-4,-6,-7,-15,41,60,-2,-35,76,-18, 
  /* [7][0][][] */ -30,4,-4,64,30,31,9,30,20,2,67,1,123,104,61,45,42,50,-13,4,24,-23,-88,-24,15,-1,-32,66,33,-29,-36,-14,39,2,40,-100,-80,37,40,57,-35,32,83,127,-63,-24,-112,63, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0096233561635017395, 0.0044675646349787712, 0.0066287503577768803, 0.0058192000724375248, 0.0070113851688802242, 0.0066475411877036095, 0.0088584674522280693, 0.0059502222575247288, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 14120, 5574, 4962, -121, 1621, -353, -443, 36070, 248, 1751, 7072, 63026, 1777, 3452, -85, 12041, -1339, 12380, -206, 7333, 12998, -326, 4235, -9013, 11768, 814, 2882, 14015, 540, -2349, -8973, 11548, 5552, 2335, 1124, 4361, -9219, 6263, -1269, 17406, -872, -385, 5449, 901, 1336, -2179, 1508, -52, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.4829203842673451e-05, 8.8107546616811305e-05, 0.0001644262665649876, 0.0001507322012912482, 0.00073744682595133781, 0.00014365548850037158, 0.00010794875561259687, 9.0146968432236463e-05, 0.00013309501809999347, 7.6215997978579253e-05, 6.7868655605707318e-05, 4.7525922127533704e-05, 8.9097607997246087e-05, 6.7192631831858307e-05, 0.00022156703926157206, 0.0001494407479185611, 0.00012428790796548128, 0.00037676832289434969, 0.00013321483856998384, 0.00015318626537919044, 0.00013846420915797353, 0.00038391377893276513, 0.00014307221863418818, 0.00025843828916549683, 0.00012660089123528451, 8.6505860963370651e-05, 5.627442806144245e-05, 9.8122320196125656e-05, 0.00015438646369148046, 0.00073968945071101189, 0.00025434748386032879, 7.86809396231547e-05, 0.00010566382843535393, 0.00015086554049048573, 0.00017429364379495382, 6.2141050875652581e-05, 9.3099326477386057e-05, 5.4794738389318809e-05, 0.00011425642878748477, 6.8299967097118497e-05, 0.00015080785669852048, 0.00014164921594783664, 6.6032007453031838e-05, 8.9091488916892558e-05, 8.4156788943801075e-05, 0.00028792468947358429, 6.6467197029851377e-05, 0.0002261024055769667, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -69,-106,-16,-19,127,-65,81,-66,-79,-87,-23,-41,114,35,76,-127,65,-22,6,-34,-81,101,-5,16,-17,76,54,-39,69,-63,13,-45,-114,-79,37,62,24,82,127,-67,-127,-24,48,67,52,-127,92,67, -78,-127,-83,54,-92,112,71,-62,-66,45,78,-112,127,92,109,-86,-84,-75,39,-56,-85,86,-73,103,-91,112,89,-122,89,-44,8,-116,-47,-80,65,127,103,120,125,-52,-126,-59,72,86,75,123,93,63, 0,-55,-74,97,-48,-22,30,-13,87,22,56,-81,9,56,-39,-1,-88,-19,38,-30,-37,20,-77,-5,-80,53,16,-86,28,56,100,-72,23,16,-14,48,79,68,47,-4,-15,95,62,29,32,39,20,-103, 
  /* [0][1][][] */ -127,-122,-10,-88,-82,-79,105,-127,-127,-127,83,-77,89,46,-118,-73,127,-127,-61,-65,-77,127,-34,12,-7,98,105,-54,-107,-73,5,-48,-99,-127,-127,61,48,86,20,-92,64,-20,87,122,84,115,127,-127, -100,-125,-127,-113,-27,127,127,-125,70,68,127,-127,105,127,69,-119,63,-87,-127,-127,-127,102,-127,127,-127,127,127,-127,-127,127,-15,-127,-127,-99,38,126,127,127,-2,-127,94,-89,127,127,127,3,127,81, -45,-64,-116,127,75,-43,35,-34,51,28,17,-64,6,61,69,-50,-28,4,-15,-59,-58,13,-72,-18,-125,40,29,-85,-54,41,127,-92,-53,10,48,76,82,72,-26,-30,53,127,76,16,40,-42,26,14, 
  /* [0][2][][] */ -117,-34,22,21,-50,-39,29,-59,32,-51,16,-52,-4,22,-40,-30,-89,-18,97,-30,-12,64,-62,-5,2,73,81,-15,36,59,-6,-4,-2,-84,-46,37,15,7,-70,-34,11,-13,48,44,27,56,15,-54, -80,-49,-35,-73,86,44,67,-66,97,23,-42,-75,-7,40,-127,-84,46,7,50,-78,-52,51,-52,54,-63,72,81,-35,37,9,-26,-35,-61,-20,-63,62,30,17,-115,-65,19,-40,79,77,50,-109,27,-4, -37,-33,-61,-17,-26,-13,24,-32,-61,13,-12,-28,-9,13,34,-21,34,39,0,-47,-29,4,-16,-31,-69,11,23,-18,8,-55,49,-27,-86,15,18,44,12,10,-64,-31,5,47,27,27,13,5,10,41, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0036052411887794733, 0.0037445705384016037, 0.0069881160743534565, 0.0064061186276376247, 0.031341489404439926, 0.0061053582467138767, 0.0045878221280872822, 0.0038312459364533424, 0.0056565380655229092, 0.0032391797285526991, 0.0028844177722930908, 0.0020198517013341188, 0.0037866481579840183, 0.002855686703696847, 0.0094165988266468048, 0.0063512315973639488, 0.0052822357974946499, 0.016012653708457947, 0.0056616305373609066, 0.0065104160457849503, 0.0058847288601100445, 0.016316335648298264, 0.0060805692337453365, 0.010983627289533615, 0.0053805378265678883, 0.0036764990072697401, 0.002391663147136569, 0.0041701984591782093, 0.00656142458319664, 0.031436800956726074, 0.010809767991304398, 0.0033439400140196085, 0.0044907126575708389, 0.0064117852598428726, 0.0074074799194931984, 0.0026409944985061884, 0.0039567211642861366, 0.0023287762887775898, 0.0048558982089161873, 0.00290274852886796, 0.0064093335531651974, 0.0060200914740562439, 0.0028063601348549128, 0.003786388086155057, 0.0035766635555773973, 0.012236799113452435, 0.0028248557355254889, 0.0096093518659472466, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1195, -455, -460, 1055, 16013, 2010, -441, 4608, 1474, 1321, 287, 2913, 1069, 548, -755, 376, 3552, 11009, 3123, -812, 1301, -1153, -62, 2365, -269, -627, 1740, -13, 3420, 13572, 2405, -14, 442, -77, 2572, 30, 485, -124, 1260, 1119, 1888, 1991, 169, -265, 530, 2373, 1308, -167, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00042726047104224563, 0.00040493812412023544, 0.00029096103389747441, 0.0003340848779771477, 6.4029227360151708e-05, 0.0003222688683308661, 0.00050074630416929722, 0.00019766083278227597, 0.00029601433197967708, 0.00051153625827282667, 0.00031263715936802328, 0.00030071780201978981, 0.00022195314522832632, 0.00035518413642421365, 0.00033129326766356826, 0.00032080177334137261, 0.00021499097056221217, 8.6122803622856736e-05, 0.00024499555001966655, 0.00033606300712563097, 0.00034468816011212766, 0.00020296599541325122, 0.00044101098319515586, 0.00032399379415437579, 0.00048642582260072231, 0.0007928951526992023, 0.00029411446303129196, 0.00090364378411322832, 0.00023159425472840667, 7.0087495259940624e-05, 0.00030403403798118234, 0.00070617062738165259, 0.00039423021371476352, 0.00040184601675719023, 0.00028064890648238361, 0.00033482644357718527, 0.00044559361413121223, 0.00057339249178767204, 0.00037582882214337587, 0.00050888437544927001, 0.00029930082382634282, 0.00032594578806310892, 0.0003323022392578423, 0.00045128172496333718, 0.00045786236296407878, 0.00021856985404156148, 0.00026708404766395688, 0.00030439902911894023, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -42,29,1,-27,-80,-36,-127,27, 
  /* [1][0][][] */ 81,-74,-57,-58,127,-79,100,26, 
  /* [2][0][][] */ -99,121,-50,-127,48,-22,-32,41, 
  /* [3][0][][] */ 49,28,79,3,101,104,127,-8, 
  /* [4][0][][] */ -75,-127,67,14,-55,-97,3,-31, 
  /* [5][0][][] */ 127,-19,74,61,-70,-14,4,-26, 
  /* [6][0][][] */ 27,37,127,-25,39,-41,-43,24, 
  /* [7][0][][] */ 28,10,-127,-34,-39,94,96,-78, 
  /* [8][0][][] */ 11,127,-26,17,67,107,41,53, 
  /* [9][0][][] */ -1,127,-62,84,17,-109,39,120, 
  /* [10][0][][] */ 11,-127,-4,-28,-77,-118,-59,-84, 
  /* [11][0][][] */ -127,-80,106,47,-13,-65,90,64, 
  /* [12][0][][] */ -23,45,-127,82,34,-54,-81,100, 
  /* [13][0][][] */ 96,-127,95,79,14,36,36,-61, 
  /* [14][0][][] */ -18,96,-30,-127,-20,-99,-30,-60, 
  /* [15][0][][] */ 42,119,33,-6,36,-68,100,-127, 
  /* [16][0][][] */ -119,-127,-63,104,-53,29,-17,72, 
  /* [17][0][][] */ -29,-104,-127,83,-64,72,-48,72, 
  /* [18][0][][] */ -89,-77,-53,86,-4,59,-10,127, 
  /* [19][0][][] */ 65,-126,97,-127,18,-73,28,-29, 
  /* [20][0][][] */ 0,87,39,12,50,127,75,-16, 
  /* [21][0][][] */ 27,114,47,-30,38,-66,95,-127, 
  /* [22][0][][] */ 21,13,103,16,-11,127,30,-40, 
  /* [23][0][][] */ -100,-63,37,-72,84,93,-53,-127, 
  /* [24][0][][] */ -86,-81,40,-74,101,100,-40,-127, 
  /* [25][0][][] */ 127,11,-56,-12,12,28,-64,-14, 
  /* [26][0][][] */ -127,-30,-120,-25,-49,-32,16,-4, 
  /* [27][0][][] */ 77,35,-2,-58,-127,-20,94,92, 
  /* [28][0][][] */ -127,-82,6,42,-73,-118,1,3, 
  /* [29][0][][] */ 124,94,44,-127,33,10,-70,-95, 
  /* [30][0][][] */ -101,-80,48,-71,76,102,-60,-127, 
  /* [31][0][][] */ 51,46,-3,127,3,-75,8,6, 
  /* [32][0][][] */ -25,127,-7,36,25,70,-17,46, 
  /* [33][0][][] */ -33,127,-72,22,24,-28,-28,-1, 
  /* [34][0][][] */ -127,-108,-45,108,-14,9,15,101, 
  /* [35][0][][] */ -51,127,-30,0,65,110,60,74, 
  /* [36][0][][] */ 64,24,10,-36,-127,-27,97,105, 
  /* [37][0][][] */ -68,120,28,19,-127,105,-27,-106, 
  /* [38][0][][] */ 33,35,21,11,127,64,103,50, 
  /* [39][0][][] */ -26,-70,36,-17,6,38,-90,127, 
  /* [40][0][][] */ -77,-61,-84,127,-32,-4,19,72, 
  /* [41][0][][] */ 127,13,53,101,-47,-5,-3,-12, 
  /* [42][0][][] */ -42,7,-70,-127,53,-104,4,83, 
  /* [43][0][][] */ 22,-3,83,-7,40,127,89,4, 
  /* [44][0][][] */ -30,-28,-64,127,41,8,-35,-38, 
  /* [45][0][][] */ 77,127,116,-110,61,-59,16,-115, 
  /* [46][0][][] */ -40,-122,-45,34,-9,41,-63,127, 
  /* [47][0][][] */ 34,45,118,-3,98,123,127,-29, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0044717723503708839, 0.0042381435632705688, 0.0030452420469373465, 0.0034965826198458672, 0.00067013956140726805, 0.0033729146234691143, 0.0052408864721655846, 0.0020687479991465807, 0.0030981306917965412, 0.0053538158535957336, 0.0032721075695008039, 0.0031473578419536352, 0.0023229951038956642, 0.0037174108438193798, 0.003467365400865674, 0.0033575596753507853, 0.0022501279599964619, 0.00090137426741421223, 0.0025641603861004114, 0.0035172859206795692, 0.003607558086514473, 0.0021242727525532246, 0.0046156872995197773, 0.003390967845916748, 0.0050910059362649918, 0.0082985600456595421, 0.0030782462563365698, 0.0094576720148324966, 0.0024239004123955965, 0.00073354627238586545, 0.0031820661388337612, 0.0073908884078264236, 0.0041260728612542152, 0.0042057810351252556, 0.0029373138677328825, 0.0035043440293520689, 0.0046636499464511871, 0.0060012121684849262, 0.003933480940759182, 0.0053260605782270432, 0.0031325274612754583, 0.0034113978035748005, 0.0034779254347085953, 0.0047231824137270451, 0.0047920565120875835, 0.0022875850554555655, 0.0027953418903052807, 0.0031858859583735466, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7586, -2799, 12563, -10175, 23056, 7430, -8573, 10737, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00018263260426465422, 0.00021794282656628639, 0.00018077032291330397, 0.00023105718719307333, 0.00017035759810823947, 0.00016460911137983203, 0.00015458666894119233, 0.0002694301656447351, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -10,-14,-18,-65,-23,-32,18,-20,38,9,-33,-4,105,127,-18,-95, 
  /* [1][0][][] */ 127,-60,-42,16,-43,74,-72,-47,-37,85,-37,-53,-6,5,-64,-19, 
  /* [2][0][][] */ -40,-97,40,43,43,-56,-77,-22,30,-92,27,-127,44,-21,-75,23, 
  /* [3][0][][] */ 35,14,15,21,-12,71,-51,-17,127,46,11,23,4,-14,10,24, 
  /* [4][0][][] */ -99,-39,-33,-127,-11,40,56,-118,35,-19,-50,-43,-119,34,-39,-27, 
  /* [5][0][][] */ 94,51,66,-28,46,-48,-127,-125,-18,-77,62,49,-59,48,63,-43, 
  /* [6][0][][] */ 109,40,-126,-85,32,-70,-2,-99,-42,22,-127,98,93,-92,5,77, 
  /* [7][0][][] */ -127,1,101,-27,-65,0,3,-61,-53,60,84,-29,61,-26,29,32, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0077618854120373726, 0.0092625701799988747, 0.0076827388256788254, 0.0098199304193258286, 0.0072401980869472027, 0.006995887029916048, 0.006569933146238327, 0.011450782418251038, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 20896, -615, -173, 2901, -1182, 412, 9829, 1428, -496, 196, -2302, 2466, 1984, -862, -338, -880, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00010878178727580234, 0.00019175840134266764, 0.00015504303155466914, 0.00018865354650188237, 0.001023376127704978, 0.00083783111767843366, 0.00015760571113787591, 0.00081234110984951258, 0.0003051176609005779, 0.0011240605963394046, 0.00024718767963349819, 0.00019734646775759757, 0.00010006627417169511, 0.00022262979473453015, 0.00020466968999244273, 0.00062641233671456575, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 2,-4,7,5,-18,11,4,16,-5,-11,2,-7,1,-7,1,-3, 5,-6,7,4,13,-2,11,-27,-9,9,0,85,-11,22,3,-3, 2,-4,-1,5,3,-14,-5,11,1,2,0,-9,2,-4,-4,-3, 
  /* [0][1][][] */ 12,-11,1,5,127,-24,-127,-21,127,127,-3,-5,110,-23,-1,-21, -127,127,127,0,-87,-92,-13,-102,16,-105,127,127,127,127,127,127, 20,-2,-2,2,-9,127,4,-10,-2,-12,-6,-4,9,-3,-14,-11, 
  /* [0][2][][] */ 0,-1,5,-11,-16,16,60,7,-9,-8,-5,0,-5,3,-4,-13, 19,-17,3,-127,8,-16,-8,127,-5,1,-2,-13,-12,-54,-10,-38, 0,-6,5,0,2,-5,2,-3,2,2,-6,3,-7,-3,-8,-14, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0046232258901000023, 0.0081497319042682648, 0.006589328870177269, 0.0080177756026387215, 0.043493486940860748, 0.035607822239398956, 0.0066982423886656761, 0.034524496644735336, 0.01296750083565712, 0.047772575169801712, 0.010505476035177708, 0.0083872247487306595, 0.0042528165504336357, 0.0094617661088705063, 0.008698461577296257, 0.026622522622346878, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 857, 527, 194, 1118, 62014, 59028, 4859, 7526, 6007, 8788, 1198, 736, 6616, -12475, 359, 42431, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00018553301924839616, 0.00089343840954825282, 0.00021653584553860128, 0.00013230301556177437, 2.4637964088469744e-05, 2.7422265702625737e-05, 0.00012416216486599296, 2.676684562175069e-05, 0.00013230679905973375, 2.9641125365742482e-05, 0.00041706927004270256, 0.00067440426209941506, 0.00027877680258825421, 1.4727612324350048e-05, 0.00066589942434802651, 3.4612487070262432e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -84, -108, -29, 
  /* [0][1][][] */ 67, -36, 17, 
  /* [0][2][][] */ 32, 127, 20, 
  /* [1][0][][] */ 105, -95, -10, 
  /* [1][1][][] */ -127, 103, 23, 
  /* [1][2][][] */ 13, -2, -13, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 25, -57, 2, 
  /* [4][1][][] */ 26, -127, 3, 
  /* [4][2][][] */ 20, -81, -13, 
  /* [5][0][][] */ -63, 27, -6, 
  /* [5][1][][] */ -127, 34, -1, 
  /* [5][2][][] */ -81, 25, -5, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -51, 56, -15, 
  /* [6][2][][] */ -36, -51, -88, 
  /* [7][0][][] */ 36, 24, -22, 
  /* [7][1][][] */ 127, 63, -16, 
  /* [7][2][][] */ 35, 8, -25, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -25, -60, 96, 
  /* [9][0][][] */ -22, 50, -6, 
  /* [9][1][][] */ -13, 127, -9, 
  /* [9][2][][] */ -6, 87, -4, 
  /* [10][0][][] */ 25, 87, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -20, 9, 
  /* [11][1][][] */ 64, -95, 35, 
  /* [11][2][][] */ -86, 127, -47, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 5, 
  /* [12][2][][] */ -79, 79, 4, 
  /* [13][0][][] */ 91, 34, -9, 
  /* [13][1][][] */ 127, 105, -15, 
  /* [13][2][][] */ 87, 117, 44, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 80, 
  /* [15][0][][] */ -86, -22, 23, 
  /* [15][1][][] */ -127, -121, 18, 
  /* [15][2][][] */ -22, -78, -8, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.047310918569564819, 0.22782677412033081, 0.055216636508703232, 0.033737268298864365, 0.0062826806679368019, 0.0069926772266626358, 0.031661350280046463, 0.0068255453370511532, 0.033738233149051666, 0.0075584864243865013, 0.10635265707969666, 0.17197307944297791, 0.07108808308839798, 0.0037555408198386431, 0.16980434954166412, 0.0088261840865015984, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.095546111464500427, } };
const TfArray<1, int> quant46_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.072350151836872101, } };
const TfArray<1, int> quant50_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.07098764181137085, } };
const TfArray<1, int> quant53_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.080524802207946777, } };
const TfArray<1, int> quant54_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.063135184347629547, } };
const TfArray<1, int> quant58_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.054539788514375687, } };
const TfArray<1, int> quant61_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.068174280226230621, } };
const TfArray<1, int> quant62_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.03876650333404541, } };
const TfArray<1, int> quant65_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.076275110244750977, } };
const TfArray<1, int> quant66_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.022948352620005608, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.02787831611931324, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.069131992757320404, } };
const TfArray<1, int> quant69_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_9_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
