/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 25.04.2024 19:58:30

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 35350, -39326, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00014536907838191837, 0.00012371863704174757, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 8,-21,-61,124,54,12,-35,46,99,-6,6,-46,-51,52,-8,43,63,-31,68,-32,127,105,74,-84,-54,-92,29,83,3,-25,108,69, 
  /* [1][0][][] */ 49,65,67,-59,-104,67,-5,12,-35,-15,33,97,100,39,34,-2,-35,-2,-74,-83,-71,34,25,97,77,65,-50,-5,89,-93,-127,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0047738617286086082, 0.0040628695860505104, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 337, 114, 145, -102, 1092, 161, -567, 411, -97, -122, 120, 44, 187, 300, -106, 28, -226, -889, 865, -235, 96, 560, 9, 201, 34, 81, 110, 161, -175, -198, 1399, 517, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.3933992856182158e-05, 5.5859025451354682e-05, 4.4362604967318475e-05, 4.5303335355129093e-05, 5.7134711823891848e-05, 4.9525533540872857e-05, 4.3578875192906708e-05, 4.2832412873394787e-05, 4.4483240344561636e-05, 4.4468582927947864e-05, 4.3068361264886335e-05, 4.3489733798196539e-05, 4.3070482206530869e-05, 4.1478564526187256e-05, 4.6472508984152228e-05, 4.3465763155836612e-05, 4.5633918489329517e-05, 4.6062930778134614e-05, 5.7328157708980143e-05, 4.2034931539092213e-05, 4.6470388042507693e-05, 4.3542360799619928e-05, 4.6151340939104557e-05, 5.3816311265109107e-05, 5.477628656080924e-05, 5.1280407205922529e-05, 4.3607607949525118e-05, 6.0475274949567392e-05, 4.6871104132151231e-05, 4.4868469558423385e-05, 6.2964274547994137e-05, 5.0644001021282747e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -25,-55,107,16,105,0,-75,-80,72,-87,-90,10,65,19,-26,56,-50,-20,-55,-46,-52,-88,4,106,-115,17,88,-39,117,7,-8,-71,82,-51,-81,70,-89,-71,-78,26,69,-74,-88,108,44,-115,110,-8,-39,-55,-20,92,-63,-49,-84,110,25,80,127,-96,-63,87,-36,55,4,24,78,95,61,99,97,-103,108,-85,50,88,-102,28,-42,36,60,23,107,-36,-58,-57,-80,108,31,119,-7,-101,7,70,36,20, 
  /* [1][0][][] */ -36,15,-51,4,-22,74,35,19,64,-69,-77,92,59,-14,26,50,89,-26,33,98,-31,7,24,22,20,20,-21,84,16,11,83,-45,48,87,0,28,56,50,-3,-48,-56,3,-14,-69,-28,11,-17,-35,-47,-69,95,31,13,60,-54,-32,19,88,47,64,-41,97,-46,-55,-36,32,66,34,88,29,22,12,-78,79,-32,36,60,-19,-27,61,-57,67,-27,-127,21,73,-57,-53,60,64,74,27,61,72,21,-6, 
  /* [2][0][][] */ 56,22,-53,100,-11,-40,93,107,-86,97,-31,127,99,-5,90,-110,-47,-18,40,62,-84,2,102,23,-31,85,116,12,-57,86,85,99,-64,-11,-80,-94,-62,96,112,-22,-123,-76,19,1,-82,91,-15,-65,60,32,95,-101,-39,55,30,26,-69,106,-60,5,-11,69,-26,75,99,52,56,87,-82,77,22,-64,46,-62,37,26,-56,-1,12,16,42,-88,7,-85,-1,-115,-24,-31,85,111,-20,17,-46,-75,-46,-68, 
  /* [3][0][][] */ 58,9,33,-25,-77,52,-111,36,73,4,56,-1,77,90,55,11,118,98,-48,16,109,-95,-62,-109,-7,-110,-91,106,41,-104,70,5,-60,-40,-25,-15,-85,-11,33,37,-15,-74,-104,-7,69,38,-53,-57,94,-87,42,24,82,32,81,-105,-100,-127,-109,-62,-90,21,-21,63,50,-39,-66,-26,-34,-68,6,86,11,-84,52,-40,41,126,89,-49,-90,-108,28,113,42,61,-42,-84,-76,56,11,-124,66,-57,-97,55, 
  /* [4][0][][] */ 40,127,1,43,-19,-18,58,3,67,71,14,31,15,-12,-21,-12,-18,46,-34,23,94,-70,88,14,37,21,27,-24,-29,28,-54,-29,71,95,12,-71,-32,42,-81,34,51,11,-33,-62,35,123,17,73,115,-12,-19,0,-54,71,-26,14,77,-89,62,25,3,-63,5,-33,-46,46,-5,-5,17,-93,-53,-53,-34,55,95,93,64,1,8,-27,9,-21,-64,84,26,101,107,22,-39,0,55,24,33,80,-53,54, 
  /* [5][0][][] */ 92,-90,71,78,42,-90,30,62,94,-90,3,-49,28,92,38,31,56,58,-57,92,34,57,10,-23,-96,-49,-3,-78,49,33,20,-82,-33,8,-53,21,-83,-27,48,19,-85,-46,39,89,-33,3,35,-37,-127,88,28,12,39,9,37,-14,90,53,-46,-34,32,-52,38,-56,-19,91,-15,27,71,7,98,-56,-33,76,-18,-63,4,-27,16,76,97,37,37,54,-71,53,-9,32,59,-83,104,85,-20,24,62,-73, 
  /* [6][0][][] */ 10,-48,97,65,-93,-65,-12,57,-18,-84,-4,-94,77,46,106,-127,37,-1,-3,92,-84,-122,98,46,-67,-86,-15,-67,-37,-119,36,-79,-98,-125,-52,-109,-16,33,-113,75,80,43,12,-25,-119,93,-92,-50,-84,8,-32,-66,47,-55,85,-35,3,-15,-72,100,-102,-8,61,-80,-59,54,91,-57,70,-12,-112,-13,48,-71,-97,-51,-89,-105,-62,-37,22,-40,37,-32,-76,-91,-46,-100,74,86,87,4,-60,-66,67,-36, 
  /* [7][0][][] */ 122,71,-36,-43,-65,105,-12,15,127,10,-80,9,60,-79,53,82,40,28,11,120,70,44,-6,77,-61,112,44,61,-72,112,-18,34,26,30,72,108,-92,100,-2,-43,97,-70,84,74,39,-3,96,-99,5,-47,-98,-71,-20,93,23,27,124,-86,10,-48,17,-12,96,-110,-65,-59,79,28,-105,6,77,96,84,39,71,68,-60,58,-89,50,97,-39,-11,-93,90,36,-108,104,92,18,90,65,-63,-37,10,-57, 
  /* [8][0][][] */ 12,48,-50,-94,41,19,-81,-46,33,25,40,69,-6,-39,-95,-70,-58,93,-61,4,26,-30,83,95,-97,86,21,80,-73,-1,-102,111,91,-33,38,-19,88,0,-39,51,86,113,-111,-124,-12,12,-30,99,54,-91,-91,17,-73,-1,-39,-109,51,87,-89,99,96,25,33,93,-53,-44,-43,99,-91,43,38,-10,66,53,-2,30,-35,85,73,64,27,81,-127,-19,36,72,95,-38,36,-39,-77,86,-79,-103,-54,70, 
  /* [9][0][][] */ -5,14,100,41,83,-120,-39,-127,42,53,-20,46,-35,-82,-106,-42,-9,-1,-97,-66,6,85,-119,-92,108,-1,-27,12,-15,-67,-91,80,75,-6,22,-22,-71,22,-47,-56,53,-58,48,-92,87,27,-105,40,92,-1,-86,-43,72,-69,-61,94,82,-71,-15,-15,-96,97,80,-67,-97,0,95,38,-54,91,102,-82,1,85,-114,-88,-87,-98,-55,91,28,23,100,48,-58,-89,46,-17,99,24,-36,103,113,1,73,-27, 
  /* [10][0][][] */ -53,68,97,-59,-6,119,115,44,37,43,26,-56,109,90,-27,8,-33,87,-92,-55,-13,42,49,-72,24,63,-104,-111,-40,88,-85,-77,86,108,126,83,-21,10,-25,31,-45,113,-108,-33,-99,-85,1,-53,-52,-3,47,-8,67,15,-53,-30,-103,-4,30,-48,-2,88,118,50,127,-71,-89,-20,29,-13,-85,-63,97,74,-77,107,-22,85,72,25,82,2,73,57,-104,46,94,-33,34,10,-3,-60,-56,-47,-48,-70, 
  /* [11][0][][] */ 118,0,-13,107,124,61,60,40,127,103,-71,118,-1,-74,31,-69,-49,-88,72,43,40,89,2,-121,-103,-86,-8,70,86,-1,32,-12,-86,-65,56,54,-34,82,-20,-65,-27,108,-74,2,-46,-70,-89,-73,22,99,118,40,-91,-95,28,28,-62,-49,-18,-85,-77,91,95,14,36,89,-52,30,91,61,-67,-73,48,117,-95,52,-66,59,-44,91,-104,-22,-53,-86,45,-94,13,-29,-100,5,14,-99,-88,-26,-75,-40, 
  /* [12][0][][] */ 24,53,-47,10,98,23,-27,52,-68,72,-9,28,-33,22,58,-79,-92,-25,-40,-70,37,6,12,99,-76,-40,115,-94,103,24,-27,122,-84,-61,-35,25,20,-69,-7,45,106,39,-102,-32,-23,-104,-31,127,-82,-118,-67,89,45,-5,-73,93,-22,-44,55,68,65,124,3,63,123,41,-35,120,66,111,54,79,96,125,-8,-5,-39,57,-106,-86,-50,106,66,-31,-36,9,49,116,-93,-103,96,54,97,-11,29,73, 
  /* [13][0][][] */ 124,-72,111,105,108,123,93,84,81,-96,23,-22,103,86,78,-44,-124,-63,-62,37,83,-15,119,-52,-68,52,17,20,-81,-86,95,43,44,117,-13,46,-68,-21,36,66,-69,86,-54,19,-53,16,1,-16,-5,108,-25,-119,-94,30,114,-80,-45,39,-14,-73,-23,125,-68,22,-45,-63,-86,95,-32,-16,114,7,-86,52,-68,-38,-111,83,94,-61,60,-96,112,-14,-81,-116,95,127,-7,-49,-75,63,112,-50,75,-3, 
  /* [14][0][][] */ -55,-114,83,63,76,-37,-12,-87,-95,-37,65,88,-27,-77,-87,-73,-50,-44,10,28,-55,37,-8,62,-110,-67,-22,14,-101,-102,-73,24,94,-25,-29,-3,102,112,41,-102,-18,-107,30,84,43,-127,59,-71,100,18,66,28,95,-15,-10,13,-54,14,47,85,-15,-73,-24,72,-84,-23,80,-99,-91,-86,-81,85,13,85,57,-70,41,-77,43,35,41,-36,-101,-74,-100,-101,-107,100,100,8,82,-47,63,82,-29,57, 
  /* [15][0][][] */ 13,-19,-26,66,87,-127,56,-104,61,-14,-65,-12,96,4,-95,-109,68,9,-87,16,48,11,66,108,89,67,26,88,17,46,52,-121,5,-1,-70,-7,-79,118,98,-90,17,119,-43,-31,10,-54,-55,-80,-4,-60,-11,39,-100,-96,-49,-21,75,35,-44,114,-46,-89,-1,93,-49,81,-74,5,-72,-17,66,-77,6,-10,56,-94,4,40,93,78,-80,54,-117,7,-115,-15,-86,43,89,71,-109,-48,57,115,-109,126, 
  /* [16][0][][] */ -83,19,89,-69,28,86,-58,21,40,26,-104,45,-30,-60,-66,-52,88,68,61,50,93,52,-30,40,-18,40,-83,58,-108,2,27,1,-111,59,38,43,-53,48,-56,-75,34,-34,61,78,55,125,80,-17,-22,-108,-2,127,-45,117,55,26,30,66,68,8,106,87,28,49,38,1,-45,84,29,75,-46,-17,12,79,54,87,-4,67,-109,-19,5,-88,36,67,11,122,100,16,76,14,-17,90,63,-32,-83,30, 
  /* [17][0][][] */ 21,-127,24,67,-53,-103,-77,-91,6,-93,57,48,86,44,-114,28,38,26,88,95,-117,-15,-20,-56,1,49,-65,6,93,-49,-42,65,-55,-37,20,1,-49,77,-87,-19,-108,-67,-26,-24,-13,-21,82,-111,61,73,-34,-4,-36,47,78,-78,-126,82,-108,-118,6,-86,53,81,-87,-90,41,-99,-102,5,81,6,16,-127,-65,35,79,-44,17,-61,-2,-33,-71,-118,-111,31,41,-56,0,58,-97,-118,-22,89,-23,-8, 
  /* [18][0][][] */ -91,127,82,-41,-9,-80,-66,3,17,65,-80,-52,-41,30,46,-32,1,-5,91,9,102,-42,46,-68,99,-57,-35,105,28,22,-12,31,48,-28,-78,-60,-15,55,-28,44,4,51,-25,-1,-63,67,22,23,51,8,79,97,-81,11,4,57,-4,14,-13,-83,66,74,32,31,-46,-93,-12,73,60,-45,-53,97,-93,1,-70,-48,46,88,32,-43,-32,7,-13,41,67,38,54,64,-34,-5,-16,66,80,2,62,53, 
  /* [19][0][][] */ 18,31,76,34,57,-72,93,81,108,-62,29,-16,-101,36,-61,56,60,-109,103,50,-18,78,-59,10,78,-79,17,-67,-97,-127,-69,45,95,-85,30,-3,5,-72,-67,-112,47,-124,-90,5,-79,36,69,-102,-34,43,-45,49,-40,15,7,-13,29,88,-1,-26,53,-63,97,57,-81,4,-38,-9,-16,42,79,-52,-72,-123,-65,-83,-13,-113,12,103,57,-107,-36,90,-92,-6,24,-2,91,28,-10,64,-30,107,84,-49, 
  /* [20][0][][] */ -10,83,64,82,-82,79,19,43,33,3,-70,-17,-13,82,32,-61,-52,-28,-56,-36,30,-50,-66,-65,81,-66,-110,51,18,6,-36,105,97,42,-18,48,26,-24,-21,-112,-61,-13,-89,-92,-27,-26,-68,95,85,-97,-94,52,45,106,49,-7,89,55,100,94,102,-59,-57,-32,-31,-59,-53,17,-80,-88,-63,76,-67,-80,27,31,111,56,100,94,80,10,64,37,59,127,-1,77,26,91,26,55,18,26,8,14, 
  /* [21][0][][] */ 96,71,77,-90,112,-61,97,33,1,-44,-63,39,10,46,-47,-83,-110,-20,35,-2,113,-39,69,-95,59,-64,-26,83,30,21,9,-21,10,30,-80,-99,127,106,-100,-46,-6,18,31,-5,-93,-92,-85,102,-86,-73,13,79,49,74,-71,30,-43,63,-44,108,62,-62,35,9,93,38,-26,-63,-93,-3,63,88,44,-9,82,82,-113,-18,69,108,22,101,49,-97,24,-101,65,-77,-94,86,113,-109,-52,-71,75,-20, 
  /* [22][0][][] */ 26,-51,-66,-93,81,-52,97,58,-99,72,-73,-114,105,-108,-104,-80,28,79,-110,-53,88,-75,32,27,91,-10,-99,95,-53,-62,-60,-110,34,55,18,8,5,-18,-50,-109,-2,-14,9,88,53,-114,81,-15,-71,-93,8,-19,-58,-89,-47,29,-25,-27,-26,-39,100,-75,-63,-107,-58,17,-101,-47,107,97,-25,-2,-65,5,64,-86,40,-45,71,93,101,-98,-52,-127,71,80,83,-39,-50,37,-59,55,-1,10,-30,88, 
  /* [23][0][][] */ 60,-82,10,55,86,-69,12,-64,48,-55,73,72,24,-78,24,-32,77,-28,-73,87,84,-51,78,-28,-18,-4,78,20,65,47,65,-22,-33,41,23,38,94,2,-78,1,-104,3,13,-82,-56,-88,96,29,11,-90,-60,-57,70,-56,-31,77,-66,-5,81,40,-84,-64,-33,-2,36,36,-82,-83,60,-1,98,-52,5,-16,-24,-73,32,0,82,96,-37,-33,34,-127,72,-10,85,-16,-73,37,88,2,84,-34,-28,69, 
  /* [24][0][][] */ -61,-47,-79,-51,-60,-73,-48,-63,51,97,68,36,91,53,-34,-97,-71,37,25,-36,78,-62,-50,-31,37,-18,63,51,88,47,11,-52,-2,9,41,27,-19,-60,55,-25,-63,-77,90,8,20,-49,32,64,-105,-45,-5,-7,62,43,64,-61,-5,65,25,0,74,-1,40,83,-69,80,-36,-77,-79,47,-42,-16,-26,42,77,82,47,-40,-82,-64,-57,-76,-33,-127,-5,36,-12,-86,22,-80,5,-56,-24,23,-67,27, 
  /* [25][0][][] */ -63,-61,-61,3,87,-44,-78,64,45,-83,-28,36,72,7,-84,-24,-52,55,29,-82,65,85,-15,-44,3,-37,-71,34,72,-71,42,103,78,-86,45,70,103,-43,-10,-12,-81,84,-73,8,81,14,64,39,-127,72,-54,-7,44,-23,-42,17,-20,58,-84,62,103,46,48,46,11,70,-8,-5,-69,15,-6,-91,43,-77,65,17,54,83,20,21,49,46,-14,31,-66,-60,-90,-80,-24,-35,88,31,-102,-10,-22,-72, 
  /* [26][0][][] */ 48,-95,-24,-16,-88,3,6,-22,-101,-118,120,101,-86,-50,-2,-8,111,32,-79,-73,13,56,104,16,65,71,-1,53,7,-2,-77,18,-11,-60,-106,-101,-77,96,-57,106,-45,122,57,33,-64,99,-52,99,-10,46,-8,127,16,-17,16,-111,125,56,66,40,7,-93,65,-14,106,-17,-63,63,-95,67,84,97,73,-87,-82,24,62,-120,-95,4,-26,83,73,-14,83,21,-20,20,-72,116,7,23,-36,108,61,104, 
  /* [27][0][][] */ 9,19,-40,-73,-84,-64,-49,-12,55,70,30,-83,-21,47,59,-25,37,-15,44,-63,-50,8,-28,-5,-70,37,-95,1,46,7,-33,-12,60,49,-63,-60,-77,-32,-95,38,-66,20,13,7,80,20,44,71,75,61,31,-53,-68,-56,-5,-23,72,-32,-77,-52,-41,-51,-27,32,13,-36,-85,78,29,-11,-70,6,39,-20,-10,-51,49,-39,55,76,64,-10,71,-7,-53,-31,-17,127,-25,-2,-24,-32,46,16,73,51, 
  /* [28][0][][] */ 76,-14,75,36,-106,-67,-89,-70,-53,-110,51,60,-78,-86,-3,89,78,98,-78,66,-44,16,-104,-71,-127,65,-82,-61,-72,-71,-6,-22,-104,10,69,57,17,-106,-41,32,69,36,-97,49,-98,-18,4,37,14,-62,-86,-57,-80,18,44,32,35,-12,69,42,-3,-39,-104,3,45,60,-23,70,-77,15,-106,-45,59,24,-7,-95,-110,-76,-90,35,-72,-91,83,-56,50,-107,51,-76,-105,-82,-39,-63,-44,31,-97,-67, 
  /* [29][0][][] */ 43,64,42,-56,-88,6,-116,-4,118,-19,-83,-101,97,-102,-52,-43,-92,106,25,-64,-67,-37,57,2,-21,5,-48,-24,-103,-16,90,-4,51,-2,-82,-58,-10,98,-14,83,64,109,-48,73,-12,116,-54,-20,38,-9,55,-71,62,-87,103,37,-75,46,-36,107,-115,80,-82,-57,-61,-64,42,84,86,-86,38,-71,102,73,54,26,114,-58,-24,30,-11,-88,-14,-27,61,127,51,83,-35,94,66,68,-112,16,-2,58, 
  /* [30][0][][] */ 20,91,-28,39,-40,16,-7,-17,94,-4,23,-31,-76,25,41,37,0,33,68,-55,54,-78,-50,26,39,49,-76,117,1,-72,-44,16,-15,-35,-75,-23,21,24,7,2,121,4,6,81,98,22,48,43,-27,89,34,-6,87,-1,22,69,3,-43,-20,-25,-50,5,-12,10,-85,-35,-65,82,-37,79,35,19,-72,92,24,5,-7,-28,-23,-41,41,40,-67,75,-70,110,-24,127,32,-21,69,52,10,12,43,4, 
  /* [31][0][][] */ 49,-68,44,91,44,45,-48,-63,-30,-46,-50,-79,72,-105,-48,111,-73,-90,70,45,57,4,-9,78,49,-105,22,35,-64,-59,49,89,-4,6,-87,1,84,-9,-29,-107,63,-53,-10,32,-1,-25,-41,30,51,40,110,-23,-78,-49,-50,1,-83,51,13,103,-19,-13,78,-51,70,81,-26,-71,66,-100,-123,28,-109,-32,23,25,-49,-60,49,86,-49,-32,47,127,59,100,-67,23,47,-27,-66,-57,10,95,34,-3, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018671946600079536, 0.0023740085307508707, 0.0018854107474908233, 0.0019253917271271348, 0.0024282252416014671, 0.0021048351190984249, 0.0018521022284403443, 0.0018203775398433208, 0.0018905376782640815, 0.0018899147398769855, 0.0018304053228348494, 0.0018483137246221304, 0.0018304954282939434, 0.0017628390341997147, 0.0019750816281884909, 0.0018472948577255011, 0.0019394415430724621, 0.0019576745107769966, 0.0024364467244595289, 0.0017864846158772707, 0.0019749915227293968, 0.0018505502957850695, 0.0019614319317042828, 0.002287193201482296, 0.0023279921151697636, 0.0021794172935187817, 0.0018533233087509871, 0.0025701990816742182, 0.0019920219201594591, 0.0019069098634645343, 0.0026759814936667681, 0.0021523700561374426, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1338, 207, 3178, 5530, 3759, -2426, 3786, -1249, -1675, -839, 4994, -1912, 5031, 5815, 2850, 1808, -666, -560, -1624, 5282, 2151, -1029, 2171, -513, -955, 2793, 1771, 1753, 5973, 2112, 3498, 1014, 1076, 4738, 6350, 2928, -519, 3287, 2537, -5493, 39, 1559, -141, 1344, -1227, 707, -1467, 975, -5759, 1644, 903, -4398, 6034, -772, 1710, 1950, 1184, 3010, -620, -2191, 204, 1721, 303, 3578, 4485, 2539, 3171, 4717, 5182, -759, 2584, 5192, 3170, -1330, 3354, 7337, 758, -3995, 566, 1224, 8354, 1613, -621, -1951, 1018, 1073, 1470, -1787, 2736, -504, 3783, 1390, 144, -2539, 27, 1652, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00014569995983038098, 0.00026004482060670853, 0.00017587387992534786, 0.00013877489254809916, 0.00016511297144461423, 0.00017862435197457671, 0.00015558309678453952, 0.0002312851429451257, 0.00020555724040605128, 0.00020808030967600644, 0.0001213058058056049, 0.00021595241560135037, 0.00011116410314571112, 0.00010246253805235028, 0.00011325033847242594, 0.00022303541481960565, 0.0002756587928161025, 0.00021134111739229411, 0.00019407282525207847, 0.00011653367255348712, 0.00020935125940013677, 0.00015495074330829084, 0.00016890358529053628, 0.00020847018458880484, 0.00020195494289509952, 0.00021080361329950392, 0.00017713925626594573, 0.00021056343393865973, 0.00012095707643311471, 0.00020744203357025981, 0.00014617042324971408, 0.00023225875338539481, 0.00026159407570958138, 0.00012947707728017122, 8.8919652625918388e-05, 0.00016552576562389731, 0.00020832767768297344, 0.00014287793601397425, 0.00014021525566931814, 0.00010186280269408599, 0.00019308626360725611, 0.00014131453644949943, 0.00018892461957875639, 0.00017517902597319335, 0.00019566612900234759, 0.00015133102715481073, 0.00016491625865455717, 0.0001428797550033778, 0.00011818012717412785, 0.00016330087964888662, 0.00026782247005030513, 0.00011144324525957927, 0.00012454224633984268, 0.00018036903929896653, 0.00018901284784078598, 0.00013648121966980398, 0.0001603310665814206, 0.00012746555148623884, 0.00021701074729207903, 0.00013976714399177581, 0.00022090472339186817, 0.00015928478387650102, 0.00021414793445728719, 0.00018007300968747586, 0.00015328440349549055, 0.00018446514150127769, 0.00011638875730568543, 0.00015738261572550982, 0.0001286976330447942, 0.00016145734116435051, 0.00018730280862655491, 0.0001330337836407125, 0.00014899040979798883, 0.00017468159785494208, 0.00020792233408428729, 0.00010866292723221704, 0.00014396557526197284, 0.00015566435467917472, 0.00017292982374783605, 0.0001760927407303825, 0.00010177352669415995, 0.00018779760284814984, 0.0001926241529872641, 0.00015674244787078351, 0.00019396314746700227, 0.00016554913599975407, 0.0001913048472488299, 0.00018101054592989385, 0.00020741569460369647, 0.00019314319069962949, 0.00015949187218211591, 0.0001565702841617167, 0.00016476842574775219, 0.00017608959751669317, 0.00025868171360343695, 0.0001554354967083782, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -2,97,-81,35,50,-20,91,68,-57,3,24,-84,72,127,-67,18, 
  /* [1][0][][] */ -14,4,-72,-18,-5,52,28,-127,28,-49,-20,-55,-8,-38,-43,-1, 
  /* [2][0][][] */ -15,-25,28,83,23,52,-119,127,-11,-9,72,-71,-25,-87,-37,57, 
  /* [3][0][][] */ 83,-87,74,-12,-7,-36,-30,127,-43,67,69,64,-1,62,5,22, 
  /* [4][0][][] */ -37,-18,-15,29,-94,10,-39,-127,-12,-9,29,-3,41,51,100,125, 
  /* [5][0][][] */ 127,26,-27,-29,-73,19,29,59,19,-26,68,86,108,16,-73,2, 
  /* [6][0][][] */ 6,-29,-66,-68,-80,5,-4,-44,-72,-43,-37,41,105,59,127,9, 
  /* [7][0][][] */ -39,31,-26,-78,3,-50,-65,7,-89,33,-71,-65,-127,-37,22,85, 
  /* [8][0][][] */ 40,43,76,14,55,22,71,14,60,-18,41,16,-127,-26,-86,9, 
  /* [9][0][][] */ -31,64,36,-45,-25,-7,22,-15,-27,38,-42,17,47,127,29,11, 
  /* [10][0][][] */ 71,54,-45,63,-35,-19,46,-31,-88,-38,-60,-107,-127,-76,16,109, 
  /* [11][0][][] */ 54,12,56,7,-11,-22,1,105,-96,27,-43,10,-5,-6,66,127, 
  /* [12][0][][] */ -54,-31,2,-11,20,-9,119,37,-83,40,-5,4,-9,84,-62,127, 
  /* [13][0][][] */ 4,48,34,73,90,60,124,127,-29,103,-115,-101,36,100,-127,-63, 
  /* [14][0][][] */ -125,127,7,-24,-2,1,60,3,-53,40,111,4,-102,26,-44,48, 
  /* [15][0][][] */ -15,-6,-127,-32,78,-41,-68,-23,-16,-12,-13,-72,-6,-77,-58,49, 
  /* [16][0][][] */ 113,-13,13,-18,27,-31,46,-17,-38,5,127,37,52,3,-35,23, 
  /* [17][0][][] */ 29,13,-27,-82,3,-47,110,-127,12,-35,-53,16,37,63,7,43, 
  /* [18][0][][] */ 35,127,-8,-48,58,-72,-34,-59,-27,118,-34,-13,-31,50,-4,-55, 
  /* [19][0][][] */ -73,-105,108,-102,49,-127,26,-36,32,54,80,118,29,-9,56,-17, 
  /* [20][0][][] */ -14,88,53,8,17,6,18,-27,66,-7,83,-23,-127,-21,-74,-31, 
  /* [21][0][][] */ -55,31,9,18,57,28,71,54,-127,45,-23,22,-25,19,-63,13, 
  /* [22][0][][] */ 10,-90,41,3,19,-127,104,6,16,-50,-44,-61,39,-78,-64,-53, 
  /* [23][0][][] */ -60,-104,46,64,31,-30,27,-49,15,-46,75,-7,2,71,64,127, 
  /* [24][0][][] */ -1,1,13,85,53,17,-48,-127,68,14,-38,11,6,5,-19,-30, 
  /* [25][0][][] */ 1,42,17,-38,-18,5,11,-33,-18,33,-43,-26,26,127,38,-2, 
  /* [26][0][][] */ -73,76,7,15,28,-89,-9,-28,3,33,13,82,12,9,-84,127, 
  /* [27][0][][] */ -13,-127,-60,8,-70,121,3,-75,34,-54,66,-39,22,-55,-107,-47, 
  /* [28][0][][] */ -38,-3,38,77,22,6,-43,-127,-127,56,99,-3,76,11,-50,-19, 
  /* [29][0][][] */ -127,96,-12,-31,-29,15,-124,-66,-54,-21,-7,8,10,-49,-110,65, 
  /* [30][0][][] */ 53,83,-52,77,-115,-95,-77,-11,-53,4,8,-101,127,45,-18,108, 
  /* [31][0][][] */ 127,15,-48,-33,-64,17,104,39,-53,-19,68,42,40,18,-27,0, 
  /* [32][0][][] */ -18,-27,127,0,-14,75,74,5,-6,-22,-15,12,3,60,62,14, 
  /* [33][0][][] */ -4,29,-83,-75,-20,26,127,16,5,-15,13,-77,102,113,-51,47, 
  /* [34][0][][] */ -88,-31,91,21,28,-62,104,-7,-127,37,46,-37,63,55,-67,-4, 
  /* [35][0][][] */ -8,9,-47,7,-68,97,-30,-17,-31,127,0,97,-57,64,1,49, 
  /* [36][0][][] */ -9,-74,127,-51,-53,16,-47,-11,16,20,-48,79,1,-79,-36,47, 
  /* [37][0][][] */ 112,9,71,-36,126,-68,-61,17,-51,127,-83,-5,-90,-48,116,-34, 
  /* [38][0][][] */ -2,42,44,-117,-18,-74,-89,76,-119,80,-94,-44,-83,-117,-127,102, 
  /* [39][0][][] */ -76,22,-60,-26,-80,-70,76,19,-127,-36,30,73,23,9,-4,44, 
  /* [40][0][][] */ 127,32,2,-102,-54,23,15,-33,-42,-34,-11,-88,14,65,56,21, 
  /* [41][0][][] */ 93,-78,-54,-45,-10,-4,-63,-26,59,-18,-3,-49,127,-62,58,-29, 
  /* [42][0][][] */ -21,-85,-46,127,-5,-105,-108,11,9,8,9,48,-83,69,-40,8, 
  /* [43][0][][] */ -75,-38,-40,-112,-53,7,-2,65,54,-127,-36,24,-30,-62,-29,86, 
  /* [44][0][][] */ -31,43,55,-53,-22,-20,24,118,127,-114,86,108,121,42,-2,-10, 
  /* [45][0][][] */ 51,77,-74,93,127,-97,-61,-75,112,-85,47,-66,-18,3,-60,56, 
  /* [46][0][][] */ -35,-45,20,-6,90,-24,23,26,-10,127,-29,-115,30,70,-61,65, 
  /* [47][0][][] */ 106,-48,-48,-16,93,-5,-65,-78,12,127,-43,27,-11,-127,-74,-5, 
  /* [48][0][][] */ 5,2,-9,-111,20,-44,127,-117,0,-9,-32,41,56,63,-4,44, 
  /* [49][0][][] */ -19,127,-66,50,35,-44,60,56,-22,16,24,-81,-28,86,126,-92, 
  /* [50][0][][] */ 11,44,-16,-4,-127,2,-68,-63,49,72,24,36,-31,-36,0,32, 
  /* [51][0][][] */ 127,-36,-53,-6,-44,87,-89,-34,46,-17,-40,61,-29,-61,4,35, 
  /* [52][0][][] */ -38,-59,65,65,-62,-111,-127,-17,-63,-43,-33,-55,18,-55,-2,86, 
  /* [53][0][][] */ 18,95,46,-127,2,103,98,-12,-9,-18,-11,-41,91,-113,2,42, 
  /* [54][0][][] */ 39,127,14,-19,3,-90,-107,41,18,-34,-41,114,63,89,26,47, 
  /* [55][0][][] */ -56,-14,55,19,45,-37,98,92,-95,7,24,28,127,51,-16,-2, 
  /* [56][0][][] */ 127,15,10,25,-30,107,-51,-71,-7,31,-77,-7,-68,95,2,21, 
  /* [57][0][][] */ -46,-37,-42,-30,-78,-103,58,-29,-127,-26,56,57,18,35,-16,64, 
  /* [58][0][][] */ 40,-49,54,13,-5,-56,-27,6,15,-11,-127,-19,31,-31,-30,43, 
  /* [59][0][][] */ 71,10,-127,82,9,31,94,-29,-77,-46,37,-106,-119,-67,19,121, 
  /* [60][0][][] */ -1,31,-13,21,-27,-23,-28,12,-31,-84,61,113,-35,-127,-31,-15, 
  /* [61][0][][] */ -42,13,77,-97,-79,39,-2,113,-33,-82,50,80,91,-1,14,127, 
  /* [62][0][][] */ 68,40,-4,-127,-21,-3,5,-36,-13,33,-37,56,27,-11,-85,-65, 
  /* [63][0][][] */ -3,-30,10,-5,-64,-65,-61,11,-75,-11,-35,-12,127,9,43,-9, 
  /* [64][0][][] */ 16,1,-11,45,-94,-46,-21,-66,30,127,39,23,42,-33,-51,121, 
  /* [65][0][][] */ -31,5,-20,-14,-78,67,22,-20,44,-96,90,-55,76,77,-127,62, 
  /* [66][0][][] */ -127,74,-99,-80,32,-45,-93,-66,-96,101,109,1,-114,-68,37,97, 
  /* [67][0][][] */ 14,-27,-127,-112,65,80,11,-34,-27,-6,46,-21,26,42,21,37, 
  /* [68][0][][] */ 52,20,-12,-49,-64,29,13,37,-73,82,117,2,-12,-41,-127,9, 
  /* [69][0][][] */ 70,-100,52,-47,26,-112,-33,127,-9,76,82,86,-15,76,-38,-6, 
  /* [70][0][][] */ 42,21,105,38,82,-21,127,22,10,25,-51,45,-93,74,-91,39, 
  /* [71][0][][] */ 11,34,98,-70,-127,-71,12,10,-13,-18,26,-115,-82,-2,22,15, 
  /* [72][0][][] */ -55,-87,14,-108,62,-13,5,40,-75,21,-105,-1,53,111,-65,127, 
  /* [73][0][][] */ 18,21,61,-30,127,-93,-60,-4,-50,99,-96,57,-84,-60,116,-13, 
  /* [74][0][][] */ -67,-3,-106,-61,53,-32,-48,1,-55,-11,-127,-38,-34,-56,-22,55, 
  /* [75][0][][] */ 92,-23,48,-45,11,6,-127,-33,-10,-91,56,11,10,-12,-8,-10, 
  /* [76][0][][] */ 19,-57,-41,110,25,94,106,-71,98,-127,48,83,35,-73,-57,25, 
  /* [77][0][][] */ -28,-41,116,-36,29,-30,-41,-127,27,13,46,103,47,52,23,-10, 
  /* [78][0][][] */ -55,9,14,-41,-1,-59,39,-12,24,-17,17,-110,-110,-90,-127,-56, 
  /* [79][0][][] */ -111,-69,-28,16,127,27,-11,22,-2,35,20,61,-40,-46,-74,-4, 
  /* [80][0][][] */ 8,-93,38,127,-28,-20,-81,70,-1,0,57,-24,-79,-9,-5,46, 
  /* [81][0][][] */ 95,60,-19,73,-7,31,26,127,2,12,112,59,114,45,50,-10, 
  /* [82][0][][] */ -50,0,19,-30,18,-127,-99,-87,8,79,-39,-40,-32,99,-74,-14, 
  /* [83][0][][] */ 110,-16,79,-24,-39,-1,-123,33,15,-127,22,-49,-25,20,0,-33, 
  /* [84][0][][] */ 26,-72,-105,27,127,34,46,17,-87,22,-119,-34,54,-41,-75,14, 
  /* [85][0][][] */ 24,72,9,-26,84,14,31,-110,127,-39,28,-25,104,-63,27,-8, 
  /* [86][0][][] */ 127,-29,118,49,3,-49,72,36,-50,-58,-106,-41,35,11,-62,-3, 
  /* [87][0][][] */ 2,15,16,-80,74,-21,-44,21,49,-44,82,-44,-98,-127,-15,12, 
  /* [88][0][][] */ -56,-26,32,5,14,30,-47,-36,-2,7,-62,-127,-43,-32,-11,-10, 
  /* [89][0][][] */ -64,18,11,-66,25,9,-127,14,95,12,-72,-23,-18,-87,-40,-23, 
  /* [90][0][][] */ -17,-20,-35,-81,127,16,-58,44,35,66,36,2,33,24,-83,-16, 
  /* [91][0][][] */ -46,-82,47,67,-51,-4,15,83,-18,-82,36,-69,-24,74,34,127, 
  /* [92][0][][] */ -35,85,-2,-23,-20,65,-113,61,-52,-1,68,4,-38,127,51,26, 
  /* [93][0][][] */ -7,63,-47,-69,66,85,-90,-1,77,45,60,41,-127,10,-31,54, 
  /* [94][0][][] */ 2,65,90,16,-127,-33,17,-1,10,-8,31,-24,-47,-12,17,-29, 
  /* [95][0][][] */ 20,45,29,-6,120,-12,-127,64,37,4,-77,97,-11,16,107,-69, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0016309014754369855, 0.0029108275193721056, 0.0019686550367623568, 0.0015533852856606245, 0.0018482020823284984, 0.0019994426984339952, 0.0017415289767086506, 0.0025889044627547264, 0.002300917636603117, 0.0023291597608476877, 0.0013578439829871058, 0.0024172766134142876, 0.0012443221639841795, 0.0011469207238405943, 0.0012676746118813753, 0.0024965605698525906, 0.0030856037046760321, 0.0023656596895307302, 0.0021723660174757242, 0.0013044268125668168, 0.0023433861788362265, 0.0017344506923109293, 0.0018906326731666923, 0.0023335237056016922, 0.0022605950944125652, 0.0023596431128680706, 0.0019828190561383963, 0.0023569546174257994, 0.0013539404608309269, 0.0023220151197165251, 0.0016361675225198269, 0.0025998025666922331, 0.0029281692113727331, 0.0014493095222860575, 0.00099532760214060545, 0.0018528227228671312, 0.0023319285828620195, 0.0015993128763511777, 0.001569508109241724, 0.0011402075178921223, 0.0021613228600472212, 0.0015818129759281874, 0.0021147392690181732, 0.0019608770962804556, 0.0021902008447796106, 0.0016939330380409956, 0.0018460002029314637, 0.0015993333654478192, 0.0013228565221652389, 0.0018279183423146605, 0.0029978873208165169, 0.0012474467512220144, 0.0013940712669864297, 0.0020189718343317509, 0.0021157269366085529, 0.0015277108177542686, 0.0017946755979210138, 0.0014267935184761882, 0.0024291230365633965, 0.0015644921222701669, 0.0024727105628699064, 0.0017829639837145805, 0.0023970780894160271, 0.002015658188611269, 0.0017157983966171741, 0.0020648217760026455, 0.0013028046814724803, 0.0017616719705983996, 0.0014405848924070597, 0.0018072825623676181, 0.002096585463732481, 0.0014891218161210418, 0.0016677333042025566, 0.001955309184268117, 0.0023273914121091366, 0.0012163250939920545, 0.0016114874742925167, 0.0017424384132027626, 0.0019357005367055535, 0.0019711048807948828, 0.0011392082087695599, 0.0021021240390837193, 0.0021561502944678068, 0.0017545062582939863, 0.0021711383014917374, 0.0018530844245105982, 0.0021413825452327728, 0.0020261525642126799, 0.0023217203561216593, 0.0021619601175189018, 0.0017852820456027985, 0.0017525791190564632, 0.0018443454755470157, 0.001971069723367691, 0.0028955696616321802, 0.0017398768104612827, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 12351, 18292, -953, 3313, -1896, 7210, -3058, 1279, 16918, -4740, -7135, 7196, -13861, 12619, 5495, 9563, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 3.7216144846752286e-05, 7.497508340748027e-05, 6.8531167926266789e-05, 7.0123081968631595e-05, 7.9118493886198848e-05, 6.4387932070530951e-05, 6.0481212130980566e-05, 6.2749139033257961e-05, 0.00011380098294466734, 7.1456219302490354e-05, 7.5731986726168543e-05, 6.2112390878610313e-05, 7.7832242823205888e-05, 7.1460461185779423e-05, 0.00010070516145788133, 8.9927787485066801e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -117,39,43,-23,-87,-11,-78,2,-48,23,3,-34,29,57,21,-37,29,-11,106,17,7,-90,127,71,55,45,20,36,-65,-121,-105,6,-45,-34,39,29,8,33,-6,24,-14,-4,-105,8,-90,-19,28,102,1,9,-39,-12,1,3,41,-48,-117,35,-55,94,77,22,12,7,-29,-86,-64,38,-54,-76,0,2,0,-1,-79,-48,-43,31,-87,-4,-56,78,78,-61,12,61,9,48,49,1,-6,-7,-48,-49,-63,15, 
  /* [1][0][][] */ 28,31,16,-64,-70,-12,-3,26,-7,27,59,-57,-1,-17,-83,-43,-2,1,-88,27,-28,-112,29,52,5,-60,4,-64,67,-123,95,-76,79,45,-37,63,39,99,-19,-41,30,10,-25,-21,10,55,-127,-48,-47,-66,-27,-52,36,-55,-29,61,11,23,-58,12,45,35,-7,-90,-18,-28,-64,-19,-3,-5,-103,-9,-50,-11,37,-69,-3,19,6,-67,-28,-37,-87,-33,30,-35,-29,34,-83,-9,-61,62,14,71,-47,69, 
  /* [2][0][][] */ 81,-48,24,20,29,-83,67,14,-26,-10,-22,-16,-89,-41,21,-29,-109,-36,-28,38,19,-54,-45,36,4,-81,10,-24,-19,43,-52,125,-64,127,-42,22,-5,-31,-19,-20,-93,82,100,16,-73,-11,-33,-25,25,3,-41,-58,57,-12,-23,53,41,-7,42,-18,-5,48,-41,1,73,12,5,-13,32,54,-24,0,44,47,70,37,21,-79,68,58,72,-15,-31,25,-63,36,30,62,0,0,-23,27,-45,53,-13,40, 
  /* [3][0][][] */ 11,1,-36,14,8,-14,14,-75,-23,62,42,66,34,3,-66,48,11,-41,31,5,8,127,34,-50,9,39,-19,12,86,-38,71,-12,-24,42,-26,-22,19,50,25,13,-84,-36,-47,28,-39,46,30,-5,-17,-56,-1,-27,60,-98,-31,-55,9,105,-53,-8,2,-26,-40,3,34,41,-43,-3,-18,-9,12,-71,-37,-49,41,-2,29,2,-53,-41,-27,-11,-67,8,-15,-57,31,-35,10,34,35,-3,53,28,-44,66, 
  /* [4][0][][] */ 30,12,-34,26,18,25,-58,16,-25,89,95,-13,-1,2,-4,-49,20,-15,-40,56,13,-52,54,89,-52,4,-127,16,-57,-58,14,11,-58,-44,14,60,20,23,22,21,-44,-47,34,-22,-8,9,-26,56,-35,49,12,27,36,-5,-64,22,74,-1,12,2,50,-12,30,13,-38,23,-34,21,-58,35,-58,50,34,-75,-45,-48,30,-51,-14,3,-44,75,-82,15,-29,27,27,-59,55,6,25,4,-66,-35,38,23, 
  /* [5][0][][] */ -51,31,31,0,35,-25,55,-34,-9,46,10,-27,28,-13,-32,-33,8,-38,57,24,-127,-40,-73,39,-45,0,53,13,35,-56,-24,43,57,116,-10,43,-2,29,43,-23,-40,90,48,-28,-6,62,76,2,25,11,-16,27,11,-33,26,-75,42,-15,-83,-68,78,75,-32,-6,77,-50,-85,-56,-54,-21,-73,-2,-23,12,-22,-47,34,-33,-59,-24,120,-26,16,-73,-83,28,23,-23,-38,42,34,12,-26,36,14,98, 
  /* [6][0][][] */ 35,2,-81,35,-44,-118,108,96,-75,80,-8,92,-127,-62,49,66,12,-56,1,3,-27,-10,-59,-68,-48,57,85,30,23,36,96,-60,26,16,14,-62,15,2,48,73,0,18,-69,-35,3,-59,-58,17,50,-120,-15,71,30,12,-20,-62,94,76,19,7,-105,41,-81,-5,12,7,-5,68,18,33,-10,-72,-45,14,108,34,67,-24,41,-72,-14,-63,-81,78,0,-66,32,-4,-36,71,40,43,-24,18,-28,127, 
  /* [7][0][][] */ 35,64,-24,-37,-10,-18,24,14,-56,24,-50,-66,-33,10,17,-6,-52,-30,-27,55,-6,127,7,33,-6,-9,13,25,47,35,80,-25,56,17,-18,-3,2,-15,3,29,-53,-2,20,-41,23,-39,55,-17,21,-69,-79,-23,-40,-2,-4,-11,13,-12,-58,3,-12,106,4,-29,-18,21,-38,18,-30,-5,-81,23,24,55,-34,34,-48,38,37,-55,-26,-45,58,-71,39,-17,1,2,-18,51,-76,28,50,-23,-39,11, 
  /* [8][0][][] */ 6,73,-58,48,-43,-30,-82,26,-80,-18,11,-3,-44,36,19,94,10,-52,7,20,19,-21,3,-4,-32,76,4,18,-15,-12,-41,-30,-20,-40,-33,-72,-41,31,38,2,-12,-41,7,13,-42,-31,34,-10,-2,-37,48,73,-4,-22,-61,121,-21,62,-26,-44,-27,-2,22,59,-26,-77,-45,-7,-45,11,-10,17,-29,-48,-113,-8,-36,38,-97,-50,-23,0,-46,-21,-9,-4,22,20,13,59,-59,12,-96,-127,26,-49, 
  /* [9][0][][] */ -22,23,-58,43,-24,-34,73,55,-20,35,-34,95,-26,-29,40,121,4,19,75,10,28,37,38,-98,-35,-10,19,-11,11,-29,45,48,-33,-14,2,-127,28,-25,-21,-16,-8,22,63,-27,-3,-4,-10,10,8,98,19,-13,-59,-74,-10,-22,-10,-43,102,-16,-75,73,-71,-34,79,10,-13,4,-72,27,53,24,-6,91,-30,-31,-36,4,-9,-3,43,-30,71,-12,32,-14,-11,-35,-62,14,2,-15,72,35,-48,-2, 
  /* [10][0][][] */ 63,6,-36,-8,-23,-29,71,4,10,-29,-21,-9,-72,-16,11,-14,-66,-18,10,11,35,49,28,9,-38,74,32,-11,-52,-75,-34,-13,70,-45,39,7,56,-78,72,127,13,-55,1,10,-19,-89,-18,50,21,85,-76,-50,-25,30,1,36,9,-84,86,51,-10,51,-58,-18,-7,-46,24,46,19,-20,-17,20,109,33,23,-84,14,-55,75,6,-45,27,35,13,-38,-4,5,39,-44,-14,33,49,46,63,-27,6, 
  /* [11][0][][] */ -49,-38,66,-80,35,-16,-23,-55,31,-57,-5,-4,1,-11,22,-7,-74,-5,56,7,-39,40,-61,-81,15,7,-58,48,27,-72,32,-40,15,-25,28,-21,-71,11,-106,18,-65,74,-22,45,16,6,-38,-38,-8,-17,-70,-48,11,30,75,-81,-33,-109,53,-41,-39,-39,-29,-127,3,-44,73,74,116,21,93,-46,-15,-11,67,-47,82,26,69,59,22,9,-8,55,95,13,-4,-14,-74,-76,-7,-6,57,56,49,66, 
  /* [12][0][][] */ 29,-19,5,-55,41,116,-8,29,44,47,-11,54,23,34,31,-1,-68,51,19,44,123,23,74,-62,35,13,-78,-72,-28,68,4,0,23,-25,3,-42,35,-5,-28,-25,22,-22,52,51,-14,28,-13,-7,-79,31,-9,14,-32,-21,-1,-4,-43,21,35,46,21,-71,-5,-96,-14,104,-2,-34,-4,-40,64,7,5,16,-8,37,-21,36,-36,6,-27,30,127,8,-8,77,-22,-58,62,-1,-86,43,76,15,-13,-87, 
  /* [13][0][][] */ -6,42,1,-57,-23,-9,2,-32,-5,-52,-46,-77,66,-122,-24,-87,-29,-25,-83,-30,-97,-22,22,120,-26,-1,108,3,24,-55,55,48,9,-9,-122,123,-37,-65,43,-55,127,-4,10,27,8,-102,27,-29,59,8,-58,15,23,2,-20,57,74,-94,-2,-4,42,64,-20,-110,-5,60,-29,38,-71,-46,-69,-21,-54,26,-45,-114,-118,0,89,103,-36,65,53,-119,72,47,41,-18,-20,-26,-18,-3,-49,29,-19,-9, 
  /* [14][0][][] */ -1,14,-90,-24,69,88,-85,-12,35,-37,76,-21,2,-20,-39,-63,-60,7,36,127,5,-38,-15,-2,-4,30,-20,62,18,-10,-22,10,55,15,-36,-5,-14,58,61,3,57,3,19,-1,-10,-35,85,-35,39,-22,-4,-15,59,12,-24,37,8,77,-117,-22,-5,-77,-30,-101,2,-59,-57,-4,-71,46,-20,50,-3,-29,-22,-20,50,-1,-82,-39,36,11,-8,-1,-17,38,-21,-23,-26,59,66,39,-10,-43,-51,-65, 
  /* [15][0][][] */ -86,-29,49,-60,30,-17,-36,-77,-11,-1,-12,72,6,-23,44,76,-106,-12,11,-74,36,-8,3,-81,54,-7,34,-53,-65,-114,-64,27,-33,37,77,-80,-14,-38,26,-16,-15,-4,51,-14,1,-3,22,94,-65,13,17,-52,-44,48,-2,-78,-104,-57,127,17,-38,35,-98,20,-63,13,14,21,48,-68,91,-34,70,-33,-30,-50,-9,5,80,24,-22,73,66,12,9,-13,-111,19,-19,-47,-69,3,48,-22,-25,55, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0015816861996427178, 0.0031864410266280174, 0.0029125744476914406, 0.002980231074616313, 0.0033625359646975994, 0.0027364871930330992, 0.002570451470091939, 0.0026668382342904806, 0.0048365416005253792, 0.0030368892475962639, 0.0032186093740165234, 0.002639776561409235, 0.0033078703563660383, 0.0030370696913450956, 0.00427996926009655, 0.0038219308480620384, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -1120, 1195, -3894, -5629, 1536, 4894, 1239, 20, -2290, -131, 9182, -1974, 1297, 8383, 6444, -5817, 17893, 2306, -3461, -88, -3978, -3020, -1667, 2259, 723, -4868, -2002, -5309, -119, -8738, -7865, 541, 8359, 910, -1375, 13, -600, -1349, -1218, 5900, -799, -589, -786, -5189, 13765, 13464, 365, 9501, 116, 11392, 9009, -4339, -1450, 1731, 1065, 11727, -1594, 894, 11442, 3144, 9247, 11232, 5641, -8349, -525, -3586, -1977, 1696, -8110, -1672, 3269, 5172, 14768, -1435, -1028, 10086, -1304, 973, 11890, 1725, 540, 17864, -463, 80, 18625, 786, -5257, -2685, 5420, -6810, 12933, 83, -4748, 599, -5436, -4683, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00024187445524148643, 0.0002374051691731438, 0.00014690819079987705, 0.00014839170034974813, 0.00024832523195073009, 0.00030247546965256333, 0.00040547459502704442, 0.000218921311898157, 0.00022584883845411241, 0.00014856629422865808, 0.00010907919931923971, 0.00036769610596820712, 0.00024667280376888812, 0.00014210092194844037, 0.00015430650091730058, 0.0001408844836987555, 0.00011596499098232016, 0.00023265351774170995, 0.00024783669505268335, 0.00013920303899794817, 0.00018325619748793542, 0.00050152651965618134, 0.00031232560286298394, 0.00017741251213010401, 0.00064476631814613938, 0.00014480344543699175, 0.00026382692158222198, 0.00011301527410978451, 0.00020041073730681092, 0.00010920011845882982, 0.00026933720801025629, 0.00023740394681226462, 0.00017929304158315063, 0.0001762747997418046, 0.00026607315521687269, 0.00037222469109110534, 0.00022814811381977051, 0.00035417531034909189, 0.00023433919704984874, 0.00014016430941410363, 0.00020982016576454043, 0.00019500080088619143, 0.00023497562506236136, 0.00010715433745644987, 8.7652406364213675e-05, 0.00010663298598956317, 0.00022883301426190883, 0.00012673370656557381, 0.00019854262063745409, 9.6505478722974658e-05, 0.0001282922166865319, 0.00013209613098297268, 0.00019669896573759615, 0.00015236184117384255, 0.00022826164786238223, 0.00014112770440988243, 0.00019410261302255094, 0.00030647392850369215, 0.00018011633073911071, 0.00012507147039286792, 0.00013216499064583331, 0.0001794555428205058, 0.00013104383833706379, 0.00010973431926686317, 0.00018465748871676624, 0.00027616994339041412, 0.00036149239167571068, 0.00020768190734088421, 0.00020362575014587492, 0.00022018655727151781, 0.00020295123977120966, 0.00013571615272667259, 8.827225974528119e-05, 0.00022486491070594639, 0.00029862119117751718, 0.00012674655590672046, 0.00014435742923524231, 0.00017727167869452387, 0.00012930517550557852, 0.00018281897064298391, 0.00025909545365720987, 8.0911675468087196e-05, 0.00027595125720836222, 0.00018615032604429871, 8.0845711636357009e-05, 0.00018633186118677258, 0.00015015476674307138, 0.00021566548093687743, 0.00017912065959535539, 0.00013676125672645867, 9.054987458512187e-05, 0.00035560777178034186, 0.00026002805680036545, 0.00025042853667400777, 0.0001211760172736831, 0.00026403411175124347, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 32,103,25,30,-23,5,45,31,89,-105,-93,29,-23,-20,55,-40,-127,18,9,7,50,63,74,83,10,-35,-44,17,-41,8,40,-7,-47,-1,-33,99,12,56,12,-11,25,-53,25,23,-81,-34,13,-22,-26,-69,-48,9,76,60,-22,-3,-93,-82,-64,-127,-104,-9,-127,22,-34,58,67,-27,18,59,35,-38,-59,25,47,-3,7,-51,-125,31,1,-117,79,-16,-127,-52,-11,-1,-127,-1,-127,47,84,-14,70,11, -38,-50,11,115,-5,83,-42,-9,86,36,-127,29,-36,-46,-69,127,-107,47,29,51,127,8,78,122,17,12,21,101,-1,115,14,-127,63,72,13,41,74,127,-34,-127,127,-15,108,127,-58,-58,127,-59,-5,-127,-127,-10,32,127,-4,-127,18,13,-97,-82,-67,-115,-99,103,-19,94,94,-33,46,127,124,-18,-127,50,-41,-102,36,-73,-47,127,-10,-41,127,-50,-119,-40,100,53,77,127,-94,5,127,-39,127,57, 33,-117,38,-5,-23,-23,-1,38,28,64,-92,18,-24,62,52,-66,-46,7,25,0,47,51,69,69,28,-54,36,43,30,14,35,-51,-38,-103,-32,60,8,27,14,0,-8,53,-6,103,-24,-14,-5,7,27,-76,23,21,22,-5,19,-5,70,-91,-30,-64,-112,25,-102,7,38,30,-12,-19,16,18,21,-9,-26,-28,1,28,-26,-3,-79,13,-6,-81,54,10,-85,-28,12,-27,-103,-11,-60,36,25,45,8,-18, 
  /* [0][1][][] */ 114,-16,38,112,-18,-60,99,47,-45,-127,-100,127,-12,-127,-49,24,-69,-53,58,10,-94,5,-90,-98,-22,55,-103,127,-77,66,127,83,34,79,4,127,-127,71,-18,-7,48,-123,37,45,-109,-75,-4,-127,-127,-59,-87,23,127,-74,55,-8,-127,-6,-37,50,-28,-58,-11,46,-92,-18,127,-74,-22,18,-62,-127,-83,72,127,-70,104,83,-74,-62,127,-127,-25,98,-62,-17,8,54,-33,15,-82,21,7,-99,78,5, -127,7,-127,127,-108,-127,-127,-127,88,17,-21,28,-93,-64,-33,92,-68,-127,127,127,45,-127,-127,86,-127,127,26,74,-71,-16,-120,59,-127,83,127,-48,11,126,127,-84,-42,25,20,13,-31,-127,-92,-78,-8,-84,-84,127,24,54,35,-87,41,28,127,-7,46,-50,-116,127,-9,-127,85,127,42,67,-127,-78,-30,66,-98,-127,127,127,127,-65,-84,-30,-99,65,-76,-99,127,127,97,100,-97,-127,-91,-66,104,127, 48,4,90,72,-20,-40,2,37,-47,108,-58,37,-8,3,-127,70,15,-30,24,4,-90,12,-37,-125,-5,16,127,3,127,92,46,-94,-14,-127,-10,113,-110,15,-52,-44,-8,127,42,122,-42,-23,-7,-79,98,-56,-47,0,47,-101,-127,23,122,-2,-80,105,24,-47,37,44,127,-29,12,-1,-31,-16,-57,-29,-94,-127,-7,-68,-5,-46,-119,-66,-77,-118,-19,127,-114,25,5,3,-50,-54,-16,28,6,127,35,-8, 
  /* [0][2][][] */ 26,-127,44,-8,10,10,7,37,-21,-55,13,-9,5,-37,-31,36,-63,28,-27,47,25,48,17,-80,-3,125,-9,14,-38,22,27,12,-16,-21,-32,6,35,-5,17,-33,0,1,-13,-64,-43,-50,-23,12,-12,9,-25,13,15,-6,-48,-35,-19,3,-39,84,-127,5,83,-5,-30,63,-43,-13,39,13,32,33,-50,4,20,16,-18,-32,-82,-20,12,-2,-32,-30,-61,35,-23,-21,-92,98,11,20,11,-6,16,5, -49,36,95,-25,127,54,-22,7,-127,10,-16,-12,127,-11,-41,19,-27,33,-31,-27,49,19,56,-55,63,-56,-11,27,-28,127,15,-10,-47,17,9,-40,68,54,58,-88,-16,-6,-127,10,-22,-17,-36,-14,-3,-78,-24,80,84,-99,-37,-126,-7,127,-78,25,61,-127,127,74,-20,46,-38,23,127,-14,9,36,-61,12,-13,-64,11,-95,-111,-61,-15,-83,-37,-46,5,127,33,23,80,92,91,23,-33,-18,2,8, 7,67,40,49,0,-20,-5,42,49,34,-25,2,-6,-16,-34,68,-82,27,-13,34,9,44,8,-127,-9,115,2,30,37,27,32,-94,-52,-30,-23,-30,56,-10,6,-7,4,-10,2,-53,-127,-40,-15,-17,30,31,33,7,40,-9,-4,-19,1,0,-44,83,-101,14,58,-20,34,46,-44,13,29,-29,6,56,-47,-10,-5,-5,1,-19,-76,-17,-14,-100,-23,8,-35,32,1,-40,-80,98,6,18,22,11,19,-1, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.01027966383844614, 0.010089719668030739, 0.0062435977160930634, 0.0063066473230719566, 0.010553821921348572, 0.012855206616222858, 0.017232669517397881, 0.009304155595600605, 0.0095985755324363708, 0.0063140676356852055, 0.0046358658000826836, 0.015627084299921989, 0.010483593679964542, 0.0060392888262867928, 0.0065580261871218681, 0.0059875906445086002, 0.0049285120330750942, 0.0098877744749188423, 0.010533059015870094, 0.0059161288663744926, 0.0077883885242044926, 0.021314876154065132, 0.013273837976157665, 0.0075400318019092083, 0.027402568608522415, 0.0061541465111076832, 0.011212644167244434, 0.0048031490296125412, 0.0085174562409520149, 0.0046410048380494118, 0.011446830816566944, 0.01008966751396656, 0.0076199541799724102, 0.0074916789308190346, 0.011308109387755394, 0.015819549560546875, 0.0096962945535778999, 0.015052449889481068, 0.0099594155326485634, 0.0059569831937551498, 0.0089173568412661552, 0.0082875341176986694, 0.0099864639341831207, 0.0045540593564510345, 0.0037252272013574839, 0.0045319017954170704, 0.0097254030406475067, 0.0053861825726926327, 0.0084380609914660454, 0.0041014826856553555, 0.0054524191655218601, 0.0056140855886042118, 0.0083597060292959213, 0.0064753778278827667, 0.0097011197358369827, 0.0059979273937642574, 0.0082493610680103302, 0.013025141321122646, 0.0076549439691007137, 0.0053155375644564629, 0.0056170118041336536, 0.0076268604025244713, 0.0055693630129098892, 0.0046637086197733879, 0.0078479433432221413, 0.011737222783267498, 0.015363425947725773, 0.0088264811784029007, 0.0086540943011641502, 0.0093579282984137535, 0.0086254272609949112, 0.0057679363526403904, 0.0037515710573643446, 0.0095567582175135612, 0.01269140001386404, 0.0053867283277213573, 0.006135190837085247, 0.0075340461917221546, 0.0054954700171947479, 0.0077698063105344772, 0.011011556722223759, 0.003438746090978384, 0.011727928183972836, 0.0079113887622952461, 0.0034359425771981478, 0.0079191038385033607, 0.0063815773464739323, 0.0091657824814319611, 0.0076126279309391975, 0.0058123534545302391, 0.0038483694661408663, 0.015113330446183681, 0.011051191948354244, 0.010643213056027889, 0.005149980541318655, 0.011221449822187424, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 5184, 3874, 1734, -1092, 5378, 7747, 7545, 1972, -435, 7655, 668, -3075, 3355, 3230, 189, 121, 3999, 5734, -831, -4, 3986, 14720, 8615, -943, -2489, -1496, 8227, -174, 1718, 1703, 11874, -1847, 6037, 2948, 3417, -5061, 797, -4486, 290, 1679, 2048, 978, 1272, -257, 1304, 2273, 3269, 3880, 3213, 2527, 5009, 2858, -1950, 1515, 957, 1994, 1508, 3086, 5424, 934, -564, 5563, 3708, 2790, 3245, 7926, -4561, 2127, 5893, -906, 5634, 1860, 2707, 3076, 3960, 1394, -336, 1853, 3571, 4231, 3322, 2539, 4559, 1045, 2168, 3790, 1002, -784, 19219, -88, 855, -1102, 11243, 2844, -88, -922, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00014443128020502627, 0.00010846282384591177, 0.00013778450374957174, 0.00019511471327859908, 0.0001345191994914785, 9.987597877625376e-05, 0.00011046599684050307, 0.00016429479001089931, 0.00017291663971263915, 0.00010496177128516138, 0.00023644138127565384, 0.00013906059029977769, 0.00015872911899350584, 0.00014957280654925853, 0.00021410715999081731, 0.00014561445277649909, 0.00016262594726867974, 0.00012374929792713374, 0.00010622217087075114, 0.0001680549030425027, 0.00013933017908129841, 6.1362814449239522e-05, 0.00010290641512256116, 0.00014066665607970208, 0.00020116426458116621, 0.00011084612197009847, 0.00010363286855863407, 0.0002167703933082521, 0.00016699825937394053, 0.00016971192962955683, 7.4614064942579716e-05, 0.00015605127555318177, 0.0001249794295290485, 0.00017442880198359489, 0.00019216199871152639, 0.00011828799324575812, 0.00018320731760468334, 0.00014559808187186718, 0.00019852232071571052, 0.00016648219025228173, 0.0002049791655736044, 0.00019702277495525777, 0.00025522554642520845, 0.00024990056408569217, 0.00017257913714274764, 0.00017854124598670751, 0.00015782953414600343, 0.00015616262680850923, 0.0001814399438444525, 0.00019385898485779762, 0.00014516728697344661, 0.00016495147428940982, 0.000197710091015324, 0.00025200904929079115, 0.00025130895664915442, 0.00022081250790506601, 0.00022058477043174207, 0.000113734531623777, 0.00012484079343266785, 0.0001860564952949062, 0.00023897396749816835, 0.00013033824507147074, 0.00015636737225577235, 0.00020471714378800243, 0.00016966951079666615, 9.6912226581480354e-05, 0.0001366248179692775, 0.00019684487779159099, 0.00010240904521197081, 0.00022626426653005183, 0.00013298272097017616, 0.00011512839409988374, 0.00015439276467077434, 0.00012191091082058847, 0.00013814395060762763, 0.00016410629905294627, 0.00018165732035413384, 0.00018301895761396736, 0.00012552687257993966, 0.0001250953646376729, 0.00013700562703888863, 0.00016704485460650176, 0.00014468675362877548, 0.00011837087367894128, 0.00017457592184655368, 0.00016554816102143377, 0.00019414338748902082, 0.00025240916875191033, 5.2819170377915725e-05, 0.00020887170103378594, 0.00023150898050516844, 0.0001926014811033383, 7.5180527346674353e-05, 0.0001646880991756916, 0.00025345981703139842, 0.00016625493299216032, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -83,37,-31,-19,-34,-54,-76,-11,56,-36,50,-57,84,-103,19,-127, 
  /* [1][0][][] */ -74,85,-112,-127,-73,30,-10,30,-50,11,31,-29,53,124,14,28, 
  /* [2][0][][] */ -52,-42,-41,-21,15,-56,10,-22,-90,127,58,15,60,33,-52,105, 
  /* [3][0][][] */ -59,-59,-11,-34,-86,17,-45,-89,-11,31,48,-80,-59,-48,-127,-32, 
  /* [4][0][][] */ 72,-3,-17,76,-74,-2,-127,69,20,80,13,50,27,8,-46,-113, 
  /* [5][0][][] */ -54,36,-76,-8,43,-43,-40,-79,95,-46,6,-35,12,-125,-94,-127, 
  /* [6][0][][] */ -16,-37,-24,27,-73,57,45,-32,-27,-51,127,-20,13,20,-116,26, 
  /* [7][0][][] */ -29,127,116,-36,63,83,6,-60,20,72,-66,-37,27,60,33,73, 
  /* [8][0][][] */ -28,9,17,5,30,44,66,127,-67,-10,-76,-60,49,92,-74,-75, 
  /* [9][0][][] */ 39,57,101,9,-127,-26,-108,-77,22,-9,121,58,-56,-66,79,-37, 
  /* [10][0][][] */ -12,-127,11,-95,-127,53,14,61,-54,-64,-12,48,-35,37,-110,22, 
  /* [11][0][][] */ 97,-45,-12,83,-104,-15,56,-20,100,127,-35,53,27,-59,-14,114, 
  /* [12][0][][] */ -56,-73,127,3,43,-17,48,64,94,-39,86,60,-20,16,-97,24, 
  /* [13][0][][] */ -8,-54,29,34,1,12,124,39,-127,-7,1,17,-15,112,120,-77, 
  /* [14][0][][] */ 127,-51,101,20,63,47,60,45,40,15,35,20,36,-16,53,-46, 
  /* [15][0][][] */ -15,127,7,-44,38,126,-74,73,-58,-6,-61,-15,-54,126,-10,-43, 
  /* [16][0][][] */ -48,63,108,-56,22,78,-9,-4,-21,29,-19,57,109,0,95,127, 
  /* [17][0][][] */ -4,90,59,-127,31,-34,13,-64,-58,68,-19,72,-37,-27,78,-43, 
  /* [18][0][][] */ -106,17,-68,-98,104,92,-43,-63,28,86,127,61,-7,124,-32,9, 
  /* [19][0][][] */ 34,127,79,87,65,-36,-13,18,-41,101,78,97,70,80,-70,52, 
  /* [20][0][][] */ 88,-14,1,59,-69,-5,-39,45,-32,-35,-127,-13,101,-37,15,-32, 
  /* [21][0][][] */ -127,-58,-26,47,-32,-7,-85,96,-53,18,49,36,8,43,-70,22, 
  /* [22][0][][] */ -19,-3,-67,-72,127,-18,-32,49,34,56,42,51,7,14,-32,25, 
  /* [23][0][][] */ -79,22,-17,16,15,58,85,90,-48,127,-9,-24,-14,49,-36,-15, 
  /* [24][0][][] */ 10,-42,36,4,127,44,76,-24,34,46,45,17,-60,52,-7,-4, 
  /* [25][0][][] */ 125,-57,55,19,15,-22,-11,88,100,-33,-54,-1,127,-40,89,54, 
  /* [26][0][][] */ 43,28,86,82,54,-15,-54,-33,16,58,14,127,5,-57,18,-46, 
  /* [27][0][][] */ -46,25,-63,30,-2,103,3,-74,16,-77,127,9,37,-19,86,70, 
  /* [28][0][][] */ -45,33,-66,-100,31,-84,-14,-51,-127,85,-61,51,-18,18,-41,54, 
  /* [29][0][][] */ 51,113,-59,18,16,71,-54,-22,20,61,29,64,-127,33,-22,56, 
  /* [30][0][][] */ -68,62,-120,-97,86,-46,6,64,-85,69,-32,0,42,72,-42,127, 
  /* [31][0][][] */ 41,-124,108,46,91,-62,-86,36,-7,-37,25,-38,-90,56,42,127, 
  /* [32][0][][] */ -46,54,-7,19,-127,47,-1,38,8,-98,12,-63,49,31,37,31, 
  /* [33][0][][] */ -82,-9,63,95,-10,28,-53,27,-37,-87,19,-30,-4,-9,-4,127, 
  /* [34][0][][] */ -5,7,-88,-89,82,-5,-12,63,28,-25,8,-8,-95,-21,-9,127, 
  /* [35][0][][] */ 78,-4,27,-12,9,20,-93,-13,-36,-127,-54,16,-13,-18,49,-40, 
  /* [36][0][][] */ -16,33,-127,-25,26,112,-1,44,-36,12,35,30,-7,18,-59,55, 
  /* [37][0][][] */ 62,25,49,-45,66,-127,60,-7,-115,62,-71,-52,18,34,110,58, 
  /* [38][0][][] */ -24,127,39,-41,35,22,66,-96,9,-5,-106,9,-43,-72,-87,31, 
  /* [39][0][][] */ 91,40,-127,-125,0,-9,24,-70,11,3,1,-35,73,14,-121,-85, 
  /* [40][0][][] */ -49,17,-69,-108,-48,-22,21,-127,-11,-14,11,-18,40,68,27,66, 
  /* [41][0][][] */ -40,-89,-6,127,-10,-25,-76,-10,-6,-75,74,-54,-75,-8,-2,13, 
  /* [42][0][][] */ -23,56,-16,-127,21,2,2,-22,54,-13,-23,25,55,-20,-12,15, 
  /* [43][0][][] */ -1,42,-15,4,127,21,28,26,0,50,7,-63,-91,-45,-20,-13, 
  /* [44][0][][] */ 119,-39,32,47,-12,-20,0,24,55,-66,44,-10,127,2,-69,-27, 
  /* [45][0][][] */ 8,-98,-58,27,-48,-104,-15,65,22,-24,11,46,-84,127,46,-49, 
  /* [46][0][][] */ -41,-90,35,79,20,18,-127,65,21,-36,82,-18,18,53,79,113, 
  /* [47][0][][] */ -39,-45,5,88,-11,-13,71,14,0,-78,-127,-50,22,-47,-62,51, 
  /* [48][0][][] */ -97,93,0,-44,-7,32,-15,-124,24,-19,50,-3,45,-127,-44,-17, 
  /* [49][0][][] */ -37,11,37,-37,19,20,127,102,-11,-32,-2,21,-43,36,-58,18, 
  /* [50][0][][] */ 30,3,-59,42,22,-127,-41,11,-66,39,-37,8,20,-86,-83,-33, 
  /* [51][0][][] */ -52,53,-26,78,-15,34,-52,-94,-54,-74,33,-48,9,56,-57,127, 
  /* [52][0][][] */ -119,20,22,7,29,48,38,-5,10,-88,-49,-58,-127,-54,-124,-9, 
  /* [53][0][][] */ -24,-63,-64,-127,-17,-4,6,61,37,-80,-55,44,-50,22,51,61, 
  /* [54][0][][] */ 7,-53,13,-5,-65,59,53,-13,7,-85,63,26,-32,-40,-127,32, 
  /* [55][0][][] */ -10,-16,-32,32,42,-14,62,66,-53,-68,-127,-13,52,-27,-10,19, 
  /* [56][0][][] */ 32,-8,-84,-13,-127,16,-85,22,-2,1,-26,6,96,-36,42,29, 
  /* [57][0][][] */ -85,19,38,-19,59,22,76,88,-30,77,27,-26,-44,97,-127,6, 
  /* [58][0][][] */ 32,25,-8,3,35,10,-58,-65,67,-127,-40,-20,-84,-26,-18,45, 
  /* [59][0][][] */ -93,-46,8,-2,-7,51,-95,-40,94,127,-84,16,-10,12,1,-3, 
  /* [60][0][][] */ -6,-53,9,-11,-127,-54,47,11,-21,54,-5,41,23,-30,15,55, 
  /* [61][0][][] */ 24,38,-74,-5,-66,-28,-127,-87,-28,-2,54,97,102,-55,110,86, 
  /* [62][0][][] */ 32,-17,42,-57,6,5,38,86,-53,127,34,105,56,68,59,63, 
  /* [63][0][][] */ 30,-105,-19,-19,-62,15,51,-28,-6,-20,14,-16,-33,127,93,33, 
  /* [64][0][][] */ -9,-17,-127,-35,25,30,36,-28,2,-111,53,15,61,-52,-77,104, 
  /* [65][0][][] */ -51,-1,32,25,63,-18,88,127,-89,28,-76,-61,61,110,-89,-2, 
  /* [66][0][][] */ -48,-124,10,-73,-49,-127,20,-30,-1,-49,18,89,-106,-13,-39,65, 
  /* [67][0][][] */ -35,-82,-72,-22,-61,92,-14,-127,-56,-23,-59,-115,16,-34,-51,5, 
  /* [68][0][][] */ 110,36,48,11,-127,37,-99,-34,-93,-106,-44,-24,41,-53,99,-85, 
  /* [69][0][][] */ 32,14,63,-15,-17,-57,-47,45,0,127,-23,-11,-10,39,85,-30, 
  /* [70][0][][] */ 30,6,-41,50,-127,28,3,-84,73,126,15,53,58,-48,3,34, 
  /* [71][0][][] */ 127,-66,75,83,-70,-23,61,-78,96,-4,-52,35,61,-35,41,43, 
  /* [72][0][][] */ -11,3,46,118,45,5,-127,80,82,-5,56,-9,-65,-47,-81,102, 
  /* [73][0][][] */ 98,28,70,-127,45,-80,-103,17,4,98,-52,35,-6,-99,53,-55, 
  /* [74][0][][] */ 114,0,58,39,-127,-61,30,29,-112,-80,33,-64,35,-86,14,30, 
  /* [75][0][][] */ 94,119,-109,27,66,60,-25,-32,-10,-44,37,52,-127,40,63,72, 
  /* [76][0][][] */ -63,-23,-24,-63,-71,1,80,1,-79,30,92,38,-20,-127,-37,76, 
  /* [77][0][][] */ -56,127,-23,17,-36,-65,47,61,45,-62,-17,67,-20,60,-11,87, 
  /* [78][0][][] */ 94,23,-31,36,-40,7,-127,-52,27,-27,-64,3,10,-94,18,43, 
  /* [79][0][][] */ -74,-64,127,24,-26,-124,-76,-87,-46,41,2,58,-57,109,-76,90, 
  /* [80][0][][] */ 34,87,22,-127,-5,22,106,-52,27,35,-51,18,95,-78,-15,-17, 
  /* [81][0][][] */ 43,-38,14,-127,80,32,-28,114,81,9,-4,-42,-3,12,-93,-68, 
  /* [82][0][][] */ 64,41,42,-11,127,-110,8,58,-12,82,-3,46,-5,-67,6,-90, 
  /* [83][0][][] */ -47,79,52,17,108,72,125,127,-1,63,-62,-78,-93,116,-76,-127, 
  /* [84][0][][] */ 4,-58,-26,108,-2,-51,-55,33,-47,67,-36,-23,-127,59,-13,-18, 
  /* [85][0][][] */ -79,57,-41,-3,-46,-32,-34,-65,-5,12,-13,-82,-127,-103,-63,54, 
  /* [86][0][][] */ -16,55,90,101,48,-40,41,20,-10,20,-33,-67,41,77,-127,-55, 
  /* [87][0][][] */ -16,55,127,-28,-97,-28,23,19,23,-27,25,43,-49,29,2,-10, 
  /* [88][0][][] */ -15,-70,-98,10,23,31,-8,25,-12,-61,-122,-94,127,-12,13,64, 
  /* [89][0][][] */ 43,44,4,-127,17,-42,-50,67,120,-14,44,-123,-3,-19,53,-78, 
  /* [90][0][][] */ 5,60,13,8,-29,32,44,117,11,-50,-16,127,59,13,-38,82, 
  /* [91][0][][] */ -80,-2,-10,58,87,54,-34,-108,-57,44,4,21,-104,-127,-76,-13, 
  /* [92][0][][] */ -27,64,-6,-58,-127,-6,-105,62,-76,77,96,113,5,-24,23,7, 
  /* [93][0][][] */ 99,49,81,34,-127,-56,8,43,-70,-71,7,-62,10,-33,-6,-13, 
  /* [94][0][][] */ -30,-127,24,-107,11,42,-16,6,82,-11,9,69,17,63,-47,51, 
  /* [95][0][][] */ -12,-62,-38,-53,127,99,-30,33,113,61,-95,60,-40,101,-78,38, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0019214145140722394, 0.0014429149450734258, 0.0018329904414713383, 0.0025956721510738134, 0.0017895509954541922, 0.0013286814792081714, 0.0014695638092234731, 0.0021856650710105896, 0.0023003641981631517, 0.0013963393867015839, 0.0031454537529498339, 0.001849966705776751, 0.0021116232965141535, 0.0019898139871656895, 0.0028483346104621887, 0.0019371546804904938, 0.0021634639706462622, 0.0016462757484987378, 0.0014131068019196391, 0.0022356871049851179, 0.0018535529961809516, 0.0008163288002833724, 0.0013689963379874825, 0.0018713325262069702, 0.0026761512272059917, 0.0014746206579729915, 0.0013786605559289455, 0.0028837644495069981, 0.0022216301877051592, 0.002257731044664979, 0.00099261431023478508, 0.0020759990438818932, 0.0016626405995339155, 0.0023204809986054897, 0.0025563912931829691, 0.0015736222267150879, 0.0024372644256800413, 0.0019369368674233556, 0.0026410047430545092, 0.0022147647105157375, 0.0027269020210951567, 0.0026210558135062456, 0.0033953455276787281, 0.00332450564019382, 0.0022958742920309305, 0.0023751901462674141, 0.0020996558014303446, 0.0020774803124368191, 0.0024137524887919426, 0.0025789667852222919, 0.0019312059739604592, 0.0021944011095911264, 0.0026301993057131767, 0.0033525554463267326, 0.0033432417549192905, 0.0029375380836427212, 0.0029345082584768534, 0.0015130460960790515, 0.0016607961151748896, 0.0024751678574830294, 0.0031791455112397671, 0.0017339304322376847, 0.0020802041981369257, 0.0027234163135290146, 0.002257166663184762, 0.0012892537051811814, 0.0018175627337768674, 0.002618689090013504, 0.0013623796403408051, 0.0030100643634796143, 0.0017691109096631408, 0.0015315890777856112, 0.0020539353135973215, 0.0016218191012740135, 0.0018377723172307014, 0.0021831574849784374, 0.0024166442453861237, 0.0024347584694623947, 0.0016699234256520867, 0.0016641828697174788, 0.0018226287793368101, 0.0022222499828785658, 0.0019248132593929768, 0.0015747247962281108, 0.0023224381729960442, 0.0022023390047252178, 0.0025827502831816673, 0.0033578781876713037, 0.00070266996044665575, 0.0027786856517195702, 0.0030798364896327257, 0.0025622379034757614, 0.0010001501068472862, 0.002190897474065423, 0.0033718552440404892, 0.002211741404607892, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -29962, -396, 4400, -10619, 12072, -16265, 24243, -3144, 9239, -4829, 14902, 13683, -1733, -29712, -1957, 5420, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 8.1910773587878793e-05, 6.2984610849525779e-05, 5.5063406762201339e-05, 6.4667699916753918e-05, 9.3868286057841033e-05, 0.00015532516408711672, 4.7264253225876018e-05, 7.0899019192438573e-05, 0.0001137171930167824, 9.1564666945487261e-05, 9.268135909223929e-05, 9.407498873770237e-05, 8.4006598626729101e-05, 7.4250594479963183e-05, 7.5848038250114769e-05, 7.4137577030342072e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -1,36,22,-27,-55,-112,-18,-12,1,-80,7,3,69,-70,57,44,-85,-28,40,34,114,2,-67,16,-3,66,120,70,-8,89,49,-33,8,12,14,0,30,46,-11,-6,127,18,39,-7,-12,-11,4,-17,39,-30,95,-5,-68,-5,39,48,-17,-52,15,27,6,24,-64,4,26,21,65,31,5,-34,23,24,8,38,20,41,79,-39,44,44,-12,52,20,49,-47,-6,-15,52,5,15,-101,-11,36,-1,113,91, 
  /* [1][0][][] */ 15,42,-56,-28,-8,-49,87,-63,-54,-24,-63,-27,-6,-43,-19,-46,-29,-21,-39,-17,-4,-85,110,-18,-9,8,2,74,-46,11,-41,13,-44,25,12,27,-24,52,-57,79,32,1,8,-58,43,-56,-16,30,-83,1,46,-122,-40,40,63,53,34,19,-78,14,-49,2,-15,-9,34,22,96,19,-51,-127,-9,26,32,60,-25,37,-55,-30,91,-26,44,-31,60,-60,-33,-69,-25,7,-37,-58,33,-1,71,-29,-24,60, 
  /* [2][0][][] */ -7,-20,13,-18,57,36,-47,14,-55,32,11,-30,23,-4,22,21,30,-27,-127,-5,-2,-39,-17,26,-4,-10,-39,19,-32,-22,-8,64,-21,-36,9,21,-52,14,-26,-13,58,6,9,40,12,48,-8,-9,-70,10,-21,20,-37,38,23,-49,45,7,53,24,-28,-22,-28,34,33,-7,-42,-9,-8,2,-7,-25,21,54,25,72,-61,-21,-17,-36,31,29,43,-23,-2,-45,-21,-44,-15,-33,-16,58,-1,-9,89,-18, 
  /* [3][0][][] */ 24,-39,-26,-127,-20,-28,119,-30,36,125,-81,-13,22,-14,-34,66,52,43,-34,29,-35,18,28,16,-45,83,34,23,-49,-14,-79,75,-1,-15,24,-31,9,-46,-30,44,1,26,-5,24,76,-58,-12,38,39,-15,16,-32,106,35,30,-9,-1,-35,21,-52,-32,58,78,19,-46,-14,115,-25,-34,-25,-61,24,15,-84,-1,-78,19,-50,123,1,-17,-61,-52,-40,-28,-55,66,61,-62,52,-63,10,14,-96,-14,35, 
  /* [4][0][][] */ -21,74,40,-4,-32,9,-31,-25,36,-39,0,-13,14,33,-10,26,10,-40,-13,-53,34,-50,-72,2,-30,-27,-19,5,-47,127,-69,-17,0,-33,3,-17,48,56,-35,3,34,-1,20,-20,-45,-1,60,-14,26,-30,-50,-11,-56,29,44,28,-10,70,-33,17,-44,-70,-18,-5,65,36,-72,-14,9,-21,1,-68,-20,52,66,56,-35,20,-72,46,12,68,37,-55,45,-67,-29,-71,-34,-40,-53,-13,6,13,46,-16, 
  /* [5][0][][] */ -6,-8,29,-23,-24,-12,-5,13,37,16,-1,6,-15,-18,23,-16,-22,5,-43,-38,-19,15,-12,33,9,-40,51,-7,-10,41,10,63,0,-70,12,13,-32,-21,-32,-14,-40,9,-12,15,13,12,-67,29,-25,25,43,-12,35,-66,-1,13,-21,-46,8,-33,37,40,30,63,-38,-1,110,-6,-14,-29,6,16,-1,18,39,0,-3,-16,127,47,-18,-2,-25,38,40,54,0,85,-10,-25,-8,8,12,-15,-28,28, 
  /* [6][0][][] */ 28,-52,69,44,-14,127,-45,-93,-34,-69,-92,52,-12,14,-18,74,13,26,10,-52,-99,7,-85,-47,-4,-46,1,85,-109,47,11,-25,37,75,-15,18,-3,-38,15,-34,-70,34,23,-60,27,66,-78,-29,49,30,-80,-122,73,-4,-27,-27,29,-41,15,-24,-17,-50,28,-24,51,-100,-85,-52,-106,9,-8,-64,-25,-66,21,-105,67,-4,-92,29,-19,75,32,-101,72,-44,-27,13,-68,73,-78,53,50,-37,83,-94, 
  /* [7][0][][] */ 8,-10,-59,77,6,21,24,-4,-108,-6,47,39,-7,-53,-7,-35,-7,-14,-3,-18,-76,-1,-41,-39,56,38,18,71,22,21,32,24,-49,-127,22,88,-7,1,-30,12,-21,-15,-4,-86,15,68,68,52,-11,40,-33,8,9,-44,28,-58,-13,20,-76,-19,55,3,-5,-63,53,-68,83,-18,-55,-22,67,15,-21,-11,-78,-17,23,-37,82,-48,-1,-15,-55,-47,34,15,-61,52,5,10,13,11,46,9,78,-6, 
  /* [8][0][][] */ -27,-51,15,-21,-41,-27,23,-7,6,-6,48,49,19,26,-33,0,62,2,19,16,3,-81,-25,4,-19,-34,54,3,-32,48,-4,-25,-4,15,4,20,-47,-7,11,-26,7,43,40,-23,13,-17,18,5,31,4,46,-4,-1,17,-42,15,-22,100,-48,5,-5,-61,-51,14,-71,-16,-13,21,-9,1,34,-14,-24,-127,50,-99,20,13,-50,29,-26,-1,-9,67,63,-60,-39,41,-43,88,7,-8,-40,-1,-8,-50, 
  /* [9][0][][] */ -6,-34,-38,62,42,49,5,36,-68,-6,62,40,-38,65,25,-57,-18,32,-36,-62,-26,59,-17,9,-24,31,19,23,65,-10,29,-8,-31,-34,-1,45,-16,-20,38,4,-25,-42,-2,-14,10,49,-3,24,-45,5,-15,31,115,10,-22,-8,22,-22,27,8,-40,-13,76,-9,5,-2,51,2,42,-7,-17,27,0,-127,-50,-124,-46,-15,25,-19,-3,29,25,-59,40,14,-56,5,-4,102,44,30,42,51,-2,25, 
  /* [10][0][][] */ 31,50,6,15,5,29,-37,-29,54,4,-38,23,17,15,-16,-59,-38,-5,16,-15,17,-4,-25,-19,6,-21,-97,53,-15,52,14,6,18,12,-19,3,25,-7,2,-1,36,-7,56,-57,-31,1,8,12,13,2,7,-24,-32,-14,-1,24,-14,10,-15,-14,-9,-51,-18,3,-10,-28,-95,-31,-47,-14,42,-11,-13,27,27,21,50,-18,-94,0,-11,33,16,-9,0,6,-73,-127,-25,20,13,25,50,-33,23,34, 
  /* [11][0][][] */ 23,-35,-9,20,-37,23,10,-4,54,-22,-26,-47,9,9,17,-7,-22,48,14,-57,-1,30,10,-38,32,10,61,-1,40,-51,-22,11,8,89,-95,6,20,-19,64,16,-53,40,-30,18,-45,5,-13,-10,47,-21,-23,-14,-25,10,-79,87,-8,10,-16,-27,12,-10,-22,-80,-10,-50,-127,-79,13,-31,-71,20,47,19,-14,5,29,43,-110,-42,0,-11,1,-8,-21,-5,64,78,23,-54,13,2,-30,35,78,20, 
  /* [12][0][][] */ 39,33,-53,0,57,-20,-6,45,45,-33,11,-14,-13,-27,-3,15,8,-49,-33,-4,-15,70,3,43,-51,-49,-127,-12,108,-28,36,-13,-32,-102,69,-16,54,-28,8,26,-11,-68,-5,18,44,-4,31,-37,-72,-6,-59,96,75,-25,25,-80,26,26,-56,-50,13,63,67,-7,-23,-36,28,25,114,41,31,36,1,-11,-19,3,-40,-57,43,-83,38,-59,52,-51,2,15,19,-101,-2,23,-29,6,8,101,9,28, 
  /* [13][0][][] */ 7,24,-78,58,62,51,-9,7,5,72,-34,36,-57,-21,75,-63,10,44,64,-14,-49,-32,-10,19,38,49,-8,30,10,37,79,-29,-16,59,-8,43,22,-55,-64,-58,-3,-24,9,-3,60,71,-29,23,-59,38,-9,11,-21,-52,80,33,10,-50,-16,-19,11,38,8,-51,6,74,127,39,16,3,-58,-16,40,62,-85,57,9,-84,127,-58,-14,-31,34,-14,32,73,-41,-15,-11,-25,18,26,41,6,75,55, 
  /* [14][0][][] */ -27,67,33,15,-82,-65,10,33,-52,-32,85,8,-72,-10,80,-10,-42,48,-58,44,-24,10,-91,9,-47,7,-56,-127,17,13,12,83,-60,26,17,-15,-17,-70,-5,-50,43,-46,62,-38,-15,46,-72,50,-3,-43,78,21,-25,25,-33,46,-60,40,0,36,31,76,-13,65,27,-32,1,-63,44,47,92,39,-56,40,13,30,34,-26,41,48,-70,118,0,-112,95,-3,-5,-3,-119,-19,-26,4,-31,12,46,25, 
  /* [15][0][][] */ 92,-29,19,28,54,11,-18,-13,9,32,-56,-10,59,58,3,-23,-7,4,-67,42,1,-23,3,12,56,-40,93,19,45,-40,-42,56,57,46,-9,-88,57,68,59,54,80,27,-23,16,-42,-127,34,-52,-34,-30,-25,1,-11,-39,-25,53,-1,17,-21,21,-19,-55,-38,23,38,49,-74,40,-5,-23,-11,-9,8,-118,-49,-95,-17,27,-122,25,75,-32,48,19,-48,14,-3,-20,38,86,18,-74,-29,-29,29,-46, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0034812078811228275, 0.0026768459938466549, 0.0023401947692036629, 0.0027483771555125713, 0.0039894022047519684, 0.006601319182664156, 0.0020087307784706354, 0.0030132082756608725, 0.0048329806886613369, 0.0038914983160793781, 0.0039389575831592083, 0.0039981869049370289, 0.0035702805034816265, 0.0031556501053273678, 0.0032235416583716869, 0.0031508468091487885, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 8671, -1686, -6159, 9319, -4694, -2899, 367, 340, 2764, -2700, 244, -5562, 5684, -4800, -3005, -7292, -275, 2197, -10406, -424, -1144, 2075, -2807, 519, 174, 8379, -7719, -7482, -1462, -3241, -227, -2765, 13155, -483, -401, -1194, 650, 13046, -201, 16043, 936, 3396, -919, 5686, -712, -61, 7248, 682, -5521, -109, -2260, -1609, -3797, -5215, -3634, 4055, -1412, 3976, 1056, 3336, -588, -722, -3221, 6288, 15813, 890, 11229, 7195, 49, -900, 12473, 578, -17, 1154, -2160, 505, 15259, 15640, 8531, 9858, 10601, -372, 9515, 12097, -1813, 89, 16479, -5175, 8121, -1985, -6876, -7814, 586, 137, 18355, -3832, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00013231861521489918, 0.00028869029483757913, 0.00015598327445331961, 0.00013612170005217195, 0.00033459192491136491, 0.00066090031759813428, 0.00011060978431487456, 0.00021400675177574158, 0.00038661304279230535, 0.00033200869802385569, 0.00031197894713841379, 0.00019615847850218415, 7.9675672168377787e-05, 0.00015259798965416849, 0.00022420923050958663, 0.0001497538760304451, 0.00030992735992185771, 0.0003437190898694098, 0.0001199346806970425, 0.00069214543327689171, 0.00039689423283562064, 0.00027868460165336728, 0.00016590167069807649, 0.00018411311611998826, 0.0013214112259447575, 0.00013750299694947898, 0.00028824590845033526, 0.00011660165182547644, 0.0003906336787622422, 0.00018154652207158506, 0.00020411016885191202, 0.00026810829876922071, 0.0001022551441565156, 0.00051134469686076045, 0.00014029354497324675, 0.00018863393052015454, 0.00033521730802021921, 9.1825531853828579e-05, 0.00023846722615417093, 8.3996725152246654e-05, 0.00049436796689406037, 0.00023666977358516306, 0.00022399408044293523, 0.00016036657325457782, 0.00016448706446681172, 0.0003232930030208081, 0.00017456311616115272, 0.00031183569808490574, 0.00019022986816707999, 0.00037784126470796764, 0.00028404005570337176, 0.00023641380539629608, 0.00014032277977094054, 0.00019237952074036002, 0.00021970149828121066, 0.00023559904366265982, 0.00016830465756356716, 0.00037152040749788284, 0.00043555494630709291, 0.0002649662783369422, 0.00031337395193986595, 0.00028789218049496412, 0.00014181500591803342, 0.00011388367420295253, 0.00015034280659165233, 0.00062286673346534371, 0.00013488548574969172, 0.00015769575838930905, 0.00026936299400404096, 0.00035097933141514659, 0.00012812908971682191, 0.00028878884040750563, 0.00062498735496774316, 0.00018138562154490501, 0.00019696072558872402, 0.00023285826318897307, 9.1248817625455558e-05, 0.00011557362449821085, 0.00013457187742460519, 0.00016218824021052569, 9.9423938081599772e-05, 0.00030361660174094141, 9.4034658104646951e-05, 0.00028127239784225821, 0.00010621523688314483, 0.00038194350781850517, 0.00010724425374064595, 0.00026533717755228281, 0.00017361261416226625, 0.00022262685524765402, 0.00010275556996930391, 0.00020359177142381668, 0.00031128933187574148, 0.00019726298341993243, 8.8795510237105191e-05, 0.00030264168162830174, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -77,-10,20,-30,93,10,19,-14,-6,-9,-15,5,-46,7,0,-21,-17,-3,25,-27,-13,41,-26,37,-18,-25,-31,35,26,-14,48,13,-13,3,-29,-10,-1,-47,-21,-65,-7,7,36,-25,-14,44,-54,-13,-42,-9,-16,37,-35,34,42,-34,22,-14,7,-22,-20,-25,8,-113,-20,-33,-42,-35,0,23,-50,-7,22,-5,-11,-14,-50,-12,127,-109,-111,3,-126,-45,-26,-28,-34,9,-29,-8,12,-8,-5,38,-38,17, -67,46,95,-66,-27,10,127,-66,-1,-22,-46,25,-76,2,-86,60,-10,61,85,-41,0,127,13,113,22,-9,30,98,114,49,127,-15,-127,-19,-123,-30,-33,-92,127,-98,-27,-127,-10,-52,81,-29,-34,-3,40,7,16,127,-81,49,-91,-7,-86,0,-10,18,-7,-127,-127,-127,-84,-2,-9,-75,-15,21,-97,85,-127,-24,18,-27,-127,-127,0,-102,-98,15,-8,-89,92,54,-95,30,-127,6,58,14,11,127,-48,-65, -52,15,3,-32,81,19,32,-32,-23,17,-14,30,-14,11,2,-23,-11,-8,-21,-31,-29,19,-24,38,-11,-8,-8,9,19,4,20,17,5,1,-35,73,4,-50,-13,-46,-8,9,26,-22,11,-19,-51,-11,-31,-6,-13,34,17,21,17,-10,50,-20,2,-24,-18,-7,-31,-86,-29,-48,127,-28,0,8,-45,0,13,-1,-1,19,-59,26,-39,-93,-70,-11,-121,-50,-2,-34,-15,-28,-45,-19,2,67,-3,40,-46,28, 
  /* [0][1][][] */ -59,-5,24,-44,31,90,-35,-25,1,-9,-23,4,-125,28,23,54,-18,26,93,23,29,-25,87,-27,28,3,45,41,-6,-8,1,-7,-97,-12,45,-32,-17,-127,-57,-127,-24,25,106,-34,-80,127,-87,-104,52,50,14,-35,-76,80,90,-44,38,-37,31,-18,7,-15,114,-49,-65,16,-24,-41,-13,-1,-122,9,67,116,-2,-73,-80,-97,-56,-42,-95,-16,-53,-72,36,25,-126,44,-46,127,123,-59,127,6,-66,2, 93,127,127,127,-127,-127,108,-69,127,127,-67,-69,-65,127,-26,82,127,-127,68,127,127,-96,74,-127,-127,-127,127,127,-127,127,-33,127,-47,127,127,-111,127,54,17,-21,127,6,-127,-101,127,-24,127,127,127,-127,127,-115,127,127,-127,127,-127,127,-127,127,-84,110,113,-123,122,127,-10,127,-127,-127,20,-127,5,127,127,67,42,-127,89,-31,45,127,105,127,127,69,-127,127,-68,64,12,-3,-99,-16,-127,-19, -127,-21,31,-86,20,65,-47,-10,-39,-8,1,127,-127,29,29,51,-22,32,32,20,8,-22,33,-20,29,-2,22,12,2,-7,10,-2,-86,-23,85,127,-2,-74,-52,-89,-27,-28,30,-43,-55,-66,-80,-98,42,68,4,-21,123,26,127,-59,103,-31,45,-45,7,-32,-113,9,-122,-4,-46,-45,-27,9,-127,-10,43,-103,8,127,-58,-81,-54,28,-92,-19,-92,-74,14,25,-89,29,-37,-61,127,127,-48,-15,-88,2, 
  /* [0][2][][] */ -26,-36,-29,-59,57,10,-2,20,-9,-17,29,-19,107,12,4,18,-3,-11,5,-15,-29,-21,41,-39,-10,0,-1,17,5,9,-20,8,8,-6,8,-17,-8,-39,-5,-9,-34,72,44,-1,27,17,-56,5,-30,18,-31,10,22,-21,41,-38,36,-34,5,-35,5,33,0,60,-49,-23,106,20,21,33,-8,-12,0,-18,-20,-24,-45,-8,-15,-33,46,-7,-127,-19,30,-9,19,-14,-5,0,-36,4,-15,-13,-28,3, -50,-60,26,-122,-25,13,70,127,-63,44,127,-7,2,41,127,127,-1,-38,127,-35,-16,-52,127,-2,4,-8,32,10,-1,28,-86,-33,-38,-30,-89,-1,-98,-97,49,-108,-23,-77,-29,127,24,-29,-4,1,52,5,-19,1,72,38,-47,-66,-37,-58,40,-66,127,57,113,87,-127,-52,-18,-35,119,38,-6,3,23,-21,8,-28,-5,-56,8,127,-127,-31,-86,-61,46,-127,-14,3,-32,3,19,28,7,-103,-47,127, -35,20,-6,-35,72,12,3,17,-27,-3,12,42,85,16,-2,34,-3,6,-12,-19,-18,-18,12,-13,-18,-4,-12,-5,7,18,-44,11,22,4,6,-12,-8,-87,-3,9,-37,-33,14,2,7,-16,-51,40,4,16,-30,-1,-6,-24,58,-38,69,-27,9,-33,11,31,11,98,-44,-23,-11,-2,23,28,-25,-7,-39,-35,-13,-18,-52,16,79,27,-9,-16,-53,11,11,-6,34,-8,-2,9,-63,35,-7,-21,-31,-2, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0056235413067042828, 0.01226933766156435, 0.0066292891278862953, 0.0057851723395287991, 0.014220156706869602, 0.028088262304663658, 0.0047009158879518509, 0.009095286950469017, 0.016431054100394249, 0.014110369607806206, 0.013259105384349823, 0.0083367349579930305, 0.0033862160053104162, 0.0064854146912693977, 0.0095288921147584915, 0.0063645397312939167, 0.013171912170946598, 0.014608060941100121, 0.005097223911434412, 0.029416181147098541, 0.016868004575371742, 0.011844094842672348, 0.0070508206263184547, 0.0078248074278235435, 0.056159976869821548, 0.0058438773266971111, 0.012250450439751148, 0.004955570213496685, 0.016601931303739548, 0.0077157267369329929, 0.0086746821179986, 0.011394602246582508, 0.004345843568444252, 0.02173214964568615, 0.0059624756686389446, 0.0080169420689344406, 0.014246734790503979, 0.0039025850128382444, 0.010134857147932053, 0.0035698607098311186, 0.021010637283325195, 0.010058465413749218, 0.0095197483897209167, 0.0068155792541801929, 0.0069907000288367271, 0.013739951886236668, 0.0074189323931932449, 0.013253017328679562, 0.0080847693607211113, 0.01605825312435627, 0.012071701698005199, 0.010047586634755135, 0.0059637180529534817, 0.0081761293113231659, 0.0093373134732246399, 0.010012959130108356, 0.0071529480628669262, 0.015789616852998734, 0.018511084839701653, 0.011261066421866417, 0.01331839244812727, 0.012235417030751705, 0.0060271373949944973, 0.0048400559462606907, 0.0063895690254867077, 0.026471834629774094, 0.0057326331734657288, 0.0067020696587860584, 0.011447926983237267, 0.014916621148586273, 0.0054454859346151352, 0.012273524887859821, 0.026561962440609932, 0.0077088885009288788, 0.0083708306774497032, 0.0098964758217334747, 0.0038780746981501579, 0.0049118790775537491, 0.0057193045504391193, 0.0068930000998079777, 0.0042255171574652195, 0.012903705239295959, 0.0039964728057384491, 0.011954076588153839, 0.0045141475275158882, 0.016232598572969437, 0.0045578805729746819, 0.011276829987764359, 0.0073785358108580112, 0.0094616413116455078, 0.0043671117164194584, 0.0086526498198509216, 0.013229796662926674, 0.0083836764097213745, 0.003773809177801013, 0.012862271629273891, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 2041, 5263, 78, 1066, 12154, 15802, 297, 1831, 9700, -1186, 14544, 3617, 1767, 466, 2954, 297, 2943, 4393, -116, 13659, 2477, 7075, -1531, 1555, -9540, 1036, 2734, 1191, 5764, 1357, 3800, 3620, 1787, 11853, 4334, 3561, 3727, 2024, 2267, 2375, 15004, 1414, 1499, 1173, 2479, 8118, 6078, 6593, 1437, -866, 2123, 4847, 2028, -3035, 4665, 376, 2450, 16405, 864, 1663, 2425, 10080, 2959, -490, 12512, 12996, 2102, 3468, 7373, 4219, 2182, 2118, -4094, 3598, 1670, 3107, 757, 9372, 3477, 7197, 2501, 794, 4272, 18380, 33, 9487, 6724, 1846, -1035, 2307, 1085, 8854, 2756, 2348, 3898, 3307, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00015902185987215489, 0.00013432535342872143, 0.00032652102527208626, 0.00026748509844765067, 7.1466936788056046e-05, 5.8138906751992181e-05, 0.00026032497407868505, 0.00017842360830400139, 9.4156035629566759e-05, 0.00019708334002643824, 6.1740494857076555e-05, 0.00013488638796843588, 0.00015572969277855009, 0.00038097889046184719, 0.00017832280718721449, 0.00016484754451084882, 0.00021590216783806682, 0.00015205965610221028, 0.00017029195441864431, 6.6295149736106396e-05, 0.00016244554717559367, 0.00011063824786106125, 0.00018596653535496444, 0.00014716529403813183, 7.9849167377687991e-05, 0.00018530079978518188, 0.00020662700990214944, 0.00028295940137468278, 0.00014776049647480249, 0.00020335261069703847, 0.00015266903210431337, 0.00015587714733555913, 0.00024231923453044146, 7.4065683293156326e-05, 0.0001251042413059622, 0.00017091810877900571, 0.00017698535521049052, 0.000210812475415878, 0.00017623825988266617, 0.00018495800031814724, 6.7972083343192935e-05, 0.00020503260020632297, 0.00020511090406216681, 0.00016167493595276028, 0.0001667940232437104, 9.9491502624005079e-05, 0.00011372756125638261, 0.00011311085836496204, 0.00022620600066147745, 0.00027497546398080885, 0.00023523227719124407, 0.00014888680016156286, 0.00020560243865475059, 0.00013198213127907366, 0.00014728817041032016, 0.00032953999470919371, 0.00014547178579960018, 6.0913083871128038e-05, 0.00019374527619220316, 0.00019482184143271297, 0.00017022766405716538, 8.2358354120515287e-05, 0.00020378778572194278, 0.00021984681370668113, 7.1995615144260228e-05, 6.7646513343788683e-05, 0.00022454303689301014, 0.00017991203640121967, 0.00010833633132278919, 0.00012047139171045274, 0.00023680974845774472, 0.00014776608441025019, 0.00014405944966711104, 0.00017446157289668918, 0.00023706149659119546, 0.00020039423543494195, 0.00017244428454432636, 8.9197914348915219e-05, 0.00016541617515031248, 0.00012346214498393238, 0.00015013222582638264, 0.00018323349650017917, 0.00010051509889308363, 5.6115812185453251e-05, 0.00019038605387322605, 8.121463906718418e-05, 0.00010700031270971522, 0.00024510620278306305, 0.00017677494906820357, 0.00023516756482422352, 0.00019646072178147733, 9.5324001449625939e-05, 0.00019301165593788028, 0.00017321539053227752, 0.00013953527377452701, 0.00018329858721699566, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 70,4,28,56,-127,-38,99,38,96,120,-70,51,28,-20,44,40, 
  /* [1][0][][] */ -17,19,-72,-7,127,98,-5,-1,4,14,-70,53,-33,77,-61,-59, 
  /* [2][0][][] */ -45,55,69,-5,47,80,4,32,34,-13,45,-30,39,-127,-14,9, 
  /* [3][0][][] */ 127,-35,27,6,11,31,1,5,43,9,-68,-40,-35,31,-16,43, 
  /* [4][0][][] */ -121,-9,-24,2,-122,14,-116,-16,-50,59,13,-44,-28,48,-80,127, 
  /* [5][0][][] */ -114,17,9,6,119,38,12,20,-81,22,0,20,-53,79,-127,-14, 
  /* [6][0][][] */ -127,22,-21,41,-16,-81,49,18,2,-37,-54,36,7,1,-28,22, 
  /* [7][0][][] */ -10,99,52,-92,64,40,127,13,40,-15,-3,31,86,21,-19,14, 
  /* [8][0][][] */ -54,-38,-55,65,-64,84,-71,-69,41,-47,80,64,127,85,-118,-19, 
  /* [9][0][][] */ -35,-127,-8,49,-34,-66,-15,58,43,50,9,58,-77,8,-8,-27, 
  /* [10][0][][] */ -50,-39,-127,60,-102,112,29,-62,20,-50,72,-20,13,123,-99,64, 
  /* [11][0][][] */ -78,-73,-25,13,5,116,71,-4,-19,18,16,-60,26,127,-87,98, 
  /* [12][0][][] */ -7,-111,-100,121,-111,-127,66,55,87,48,-53,91,19,-78,-29,-1, 
  /* [13][0][][] */ -70,-22,-40,-1,-12,4,31,18,-14,127,-9,-30,28,23,13,-18, 
  /* [14][0][][] */ -127,-45,-32,-65,-30,77,-16,-85,93,-69,35,12,102,-35,-60,-81, 
  /* [15][0][][] */ -5,-127,93,-52,-53,-34,14,49,16,-51,-88,-43,72,-24,-39,-49, 
  /* [16][0][][] */ -26,-28,15,-40,13,29,-11,-27,31,-127,44,-34,-5,3,-83,-72, 
  /* [17][0][][] */ -10,31,0,-51,22,5,-1,28,105,-86,57,74,127,-75,-64,-102, 
  /* [18][0][][] */ 66,10,-32,-127,19,-21,111,-39,19,79,-7,79,-18,77,-9,-120, 
  /* [19][0][][] */ -106,-26,-20,-63,-86,27,-41,-11,-1,-17,31,-127,-55,52,-64,0, 
  /* [20][0][][] */ -15,64,72,-113,76,3,-68,103,-119,-116,39,-68,-32,127,-39,-39, 
  /* [21][0][][] */ 27,-101,-127,-13,59,31,68,85,-93,-95,-36,22,82,-86,-39,15, 
  /* [22][0][][] */ 61,4,96,5,-20,5,69,23,7,111,34,31,-3,-8,127,2, 
  /* [23][0][][] */ -127,-79,-11,68,103,54,11,37,8,24,15,-93,-31,72,58,117, 
  /* [24][0][][] */ 12,3,34,26,-6,-104,16,-79,15,127,-116,89,-19,-86,88,-82, 
  /* [25][0][][] */ 127,-53,88,108,46,-4,-14,10,-98,81,63,-31,-9,33,56,-28, 
  /* [26][0][][] */ -25,20,15,44,-59,118,-13,40,-58,-37,-79,30,-1,28,47,-127, 
  /* [27][0][][] */ 40,-12,-6,-55,-40,-4,-80,7,-97,-20,-75,-41,-78,43,-8,127, 
  /* [28][0][][] */ -59,17,23,-9,9,-35,-127,1,-25,-26,-8,-11,20,-45,-59,-29, 
  /* [29][0][][] */ -29,-103,-23,88,-31,18,127,4,64,50,-102,64,30,-16,-46,82, 
  /* [30][0][][] */ 59,-88,-91,16,-127,56,69,-53,-29,18,-10,-53,-12,75,-7,116, 
  /* [31][0][][] */ -127,-12,1,72,-22,7,-41,-4,-26,-41,0,-33,-29,-36,-25,82, 
  /* [32][0][][] */ -127,-92,-84,11,-104,-62,-6,-19,123,59,-67,-71,43,54,44,-31, 
  /* [33][0][][] */ -67,-1,-67,42,-111,-107,42,6,-127,31,-50,-56,-22,125,62,62, 
  /* [34][0][][] */ 44,75,-21,69,-77,-69,7,-10,4,-127,-21,57,-39,16,47,114, 
  /* [35][0][][] */ 24,-14,-54,-22,-127,-7,83,-15,18,18,0,-10,36,65,29,74, 
  /* [36][0][][] */ 8,11,-73,55,127,-5,46,70,-57,9,-65,-74,39,-30,-11,7, 
  /* [37][0][][] */ -127,72,-2,-97,34,-91,-26,-33,-8,-20,-17,48,47,-61,12,-111, 
  /* [38][0][][] */ 53,89,34,-72,-71,-49,-127,-62,-19,-39,35,76,-55,-106,71,-39, 
  /* [39][0][][] */ -9,-23,16,52,7,61,72,-46,-26,57,20,-5,-14,127,32,109, 
  /* [40][0][][] */ 83,57,55,70,-44,-45,-4,40,-51,60,5,9,-42,-25,127,5, 
  /* [41][0][][] */ -27,-2,-5,54,-109,120,-21,55,-85,34,-115,9,17,30,69,-127, 
  /* [42][0][][] */ 17,-89,22,-22,127,27,57,3,-22,-81,-99,-21,-34,-1,-1,22, 
  /* [43][0][][] */ -21,-53,-56,-5,93,41,41,55,-88,-91,-113,-79,127,-4,-62,78, 
  /* [44][0][][] */ -15,-62,-81,-97,23,90,33,28,-67,-116,-47,92,-29,35,34,127, 
  /* [45][0][][] */ -20,-72,-68,-8,-127,86,-9,-62,77,-92,19,-70,-8,17,-38,63, 
  /* [46][0][][] */ 14,-92,-39,-1,102,-102,-24,124,-30,-20,78,77,-79,-66,75,-127, 
  /* [47][0][][] */ -74,-61,28,113,-8,13,29,22,9,127,90,118,-17,93,-21,110, 
  /* [48][0][][] */ 46,-12,-70,-89,35,-69,-2,56,45,-72,3,34,-67,2,-47,-127, 
  /* [49][0][][] */ 40,44,-4,24,-4,-26,65,45,-51,127,-27,39,-35,-29,51,90, 
  /* [50][0][][] */ 1,10,5,1,-127,-15,-9,-43,49,22,29,55,-28,-59,10,4, 
  /* [51][0][][] */ 23,-1,-9,-127,-37,67,32,-67,5,16,23,-42,66,47,-20,-3, 
  /* [52][0][][] */ 47,-7,9,-109,80,-127,0,-46,77,1,124,-41,44,-3,-6,91, 
  /* [53][0][][] */ -41,-65,39,-22,-32,-127,15,-93,8,84,-100,73,-22,-35,25,-84, 
  /* [54][0][][] */ 38,45,46,28,-127,-49,-118,-69,-3,-2,52,73,-83,-41,80,11, 
  /* [55][0][][] */ 4,6,-14,64,-49,14,33,-8,-4,127,9,94,1,11,5,25, 
  /* [56][0][][] */ 2,-118,-78,20,-122,43,5,107,127,-24,79,79,-33,-19,42,80, 
  /* [57][0][][] */ 25,54,81,-104,57,-10,13,9,46,-28,45,127,31,-46,101,-28, 
  /* [58][0][][] */ 83,-53,-3,-56,42,22,11,127,45,88,-8,51,49,30,65,-1, 
  /* [59][0][][] */ -62,65,5,-54,-28,-86,8,24,-19,7,-47,-75,-127,-44,59,12, 
  /* [60][0][][] */ 35,-21,55,0,-10,-39,15,-37,31,127,-8,70,-16,-30,-9,-55, 
  /* [61][0][][] */ 65,74,22,-36,-106,-127,5,-67,-112,-24,-36,19,-73,-26,97,126, 
  /* [62][0][][] */ -10,106,-12,24,-64,127,-42,1,-35,9,-65,44,-36,23,101,-90, 
  /* [63][0][][] */ 46,3,-90,-127,-50,-54,80,-11,0,-117,-13,38,-45,72,30,-26, 
  /* [64][0][][] */ -8,10,25,0,86,-89,35,108,-127,-17,-100,-56,-60,79,86,72, 
  /* [65][0][][] */ -60,6,-56,-48,26,24,-60,-67,-127,-46,19,-10,-121,96,-47,29, 
  /* [66][0][][] */ -18,61,1,24,-32,127,-21,14,-60,30,-35,48,-28,63,39,-87, 
  /* [67][0][][] */ 13,-8,-49,-21,-28,-105,69,-79,-31,5,13,127,-69,-35,-9,-122, 
  /* [68][0][][] */ 1,-127,5,82,-38,-49,19,117,28,45,59,36,-96,23,8,-23, 
  /* [69][0][][] */ 20,75,74,-117,31,31,-22,80,56,83,42,89,83,-72,36,-127, 
  /* [70][0][][] */ 25,29,30,-33,68,4,-81,-49,-127,-78,12,29,-32,52,-82,-1, 
  /* [71][0][][] */ -44,-79,16,-46,75,-47,-19,48,-127,112,-125,-54,-2,113,-11,73, 
  /* [72][0][][] */ 13,2,62,19,-48,-22,-126,-83,-2,61,-37,50,27,115,-127,-10, 
  /* [73][0][][] */ -2,-40,-20,-38,49,-118,29,-30,71,89,117,0,18,-34,-78,127, 
  /* [74][0][][] */ -22,-13,-22,95,-77,-15,82,47,46,71,37,127,111,58,-50,22, 
  /* [75][0][][] */ -32,44,-32,29,-54,127,-21,34,-31,30,-20,56,-20,61,9,-67, 
  /* [76][0][][] */ -80,105,-59,63,-127,-32,-22,38,63,56,-46,-38,54,-86,-119,53, 
  /* [77][0][][] */ 81,106,-127,100,78,56,48,86,30,20,111,-33,59,32,52,38, 
  /* [78][0][][] */ 9,-49,14,-83,89,-124,30,-62,43,72,125,-22,12,-17,-55,127, 
  /* [79][0][][] */ -46,51,-5,27,-7,-46,-38,-10,-127,-14,51,-4,75,42,-68,-29, 
  /* [80][0][][] */ -70,15,118,-6,77,36,2,-127,-68,63,-95,-33,2,-71,31,60, 
  /* [81][0][][] */ 66,71,-18,9,15,-20,82,108,-126,95,-51,-41,-22,32,98,127, 
  /* [82][0][][] */ 66,96,14,-50,-8,-81,124,-85,39,9,-86,79,127,-13,101,-23, 
  /* [83][0][][] */ -23,-28,16,13,-5,42,-21,-125,51,-40,123,10,36,-53,-96,-127, 
  /* [84][0][][] */ -127,-66,-26,-21,-4,90,73,14,56,83,95,126,71,85,-82,16, 
  /* [85][0][][] */ 127,-7,87,-66,92,-14,-42,102,64,113,-72,4,-25,72,93,-2, 
  /* [86][0][][] */ -77,55,-50,-1,28,72,6,22,82,38,127,-25,-30,56,-23,-22, 
  /* [87][0][][] */ 10,-54,30,-49,43,-127,29,-36,47,-10,68,-35,38,-41,-43,72, 
  /* [88][0][][] */ -126,44,43,-1,112,-29,15,38,-68,-70,127,-97,60,115,96,-109, 
  /* [89][0][][] */ -31,33,-14,45,-26,127,-19,35,-54,12,-45,15,-11,64,31,-83, 
  /* [90][0][][] */ 41,-71,15,29,127,-7,37,32,-23,-79,-98,-21,-10,-13,-63,35, 
  /* [91][0][][] */ -21,75,-20,-39,-22,-96,-126,59,-113,43,-127,-87,-121,-59,20,-9, 
  /* [92][0][][] */ 49,41,42,25,-127,-64,29,9,-18,1,-17,-18,-16,-61,18,17, 
  /* [93][0][][] */ 10,-127,-70,51,-27,-82,-24,47,54,67,-50,34,-29,34,-23,-75, 
  /* [94][0][][] */ 82,24,127,-28,10,-32,34,18,19,64,-4,39,6,5,105,-1, 
  /* [95][0][][] */ -52,-49,9,-17,127,-18,33,89,-24,-10,-122,-27,31,16,-51,26, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0026847608387470245, 0.0022678105160593987, 0.0055126440711319447, 0.0045159421861171722, 0.0012065740302205086, 0.00098155729938298464, 0.0043950583785772324, 0.0030123200267553329, 0.0015896332915872335, 0.0033273517619818449, 0.0010423627682030201, 0.0022772825323045254, 0.0026291792746633291, 0.0064320545643568039, 0.0030106182675808668, 0.0027831157203763723, 0.0036450694315135479, 0.0025672181509435177, 0.0028750335332006216, 0.001119258813560009, 0.0027425629086792469, 0.0018679019995033741, 0.0031396669801324606, 0.0024845870211720467, 0.0013480909401550889, 0.0031284275464713573, 0.003488477086648345, 0.0047771944664418697, 0.002494635758921504, 0.0034331956412643194, 0.0025775062385946512, 0.00263166893273592, 0.0040910677053034306, 0.0012504485202953219, 0.0021121308673173189, 0.0028856049757450819, 0.0029880381189286709, 0.0035591402556747198, 0.0029754247516393661, 0.0031226400751620531, 0.0011475704377517104, 0.0034615588374435902, 0.0034628808498382568, 0.002729552797973156, 0.0028159781359136105, 0.0016797118587419391, 0.0019200587412342429, 0.0019096470205113292, 0.0038190286140888929, 0.004642401821911335, 0.0039714188314974308, 0.0025136510375887156, 0.0034711793996393681, 0.002228250028565526, 0.002486661309376359, 0.0055636130273342133, 0.0024559954181313515, 0.0010283936280757189, 0.0032709953375160694, 0.0032891707960516214, 0.0028739480767399073, 0.001390453428030014, 0.0034405426122248173, 0.0037116666790097952, 0.0012154995929449797, 0.0011420738883316517, 0.0037909527309238911, 0.0030374492052942514, 0.0018290388397872448, 0.0020339146722108126, 0.0039980513975024223, 0.0024947300553321838, 0.002432150999084115, 0.0029454291798174381, 0.0040023014880716801, 0.0033832495100796223, 0.0029113711789250374, 0.001505925552919507, 0.0027927160263061523, 0.002084407489746809, 0.0025346775073558092, 0.0030935253016650677, 0.0016969931311905384, 0.00094740145141258836, 0.0032142815180122852, 0.0013711440842598677, 0.001806482789106667, 0.0041381199844181538, 0.0029844858217984438, 0.0039703263901174068, 0.00331683992408216, 0.0016093520680442452, 0.0032586096785962582, 0.0029243899043649435, 0.0023557695094496012, 0.0030946240294724703, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -8466, 11380, -18376, 2550, 10589, -14317, -39831, -7938, -8063, 11632, -13961, -13515, 7670, -7663, -4732, -2894, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00011595323303481564, 0.00011375569738447666, 0.00014218801516108215, 0.00015134990098886192, 8.7495231127832085e-05, 0.00014165558968670666, 8.9472043327987194e-05, 0.00012545828940346837, 0.00010600586392683908, 7.4710340413730592e-05, 0.00015603737847413868, 0.00013901735655963421, 9.6323659818153828e-05, 9.2166643298696727e-05, 0.00011529512994457036, 0.00014164594176691025, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 22,34,20,-19,69,74,-27,56,-20,113,8,47,-37,34,-13,59,32,86,62,-64,-63,81,-12,50,62,49,34,49,-37,-46,2,92,-20,-1,-70,48,48,-127,-29,18,19,-22,70,-10,1,-53,-57,-9, 
  /* [1][0][][] */ -60,2,-79,-49,10,88,-62,16,-8,-39,-40,28,54,-13,-25,-43,-28,-25,-8,16,-63,46,-98,-43,-58,-38,45,70,-20,-24,46,-48,9,-51,-27,57,9,-52,127,-42,-29,29,-48,-11,33,51,29,18, 
  /* [2][0][][] */ 8,-3,60,-30,-11,-80,21,28,91,72,-62,17,108,-51,127,82,-66,-19,-30,27,87,-72,-40,-96,7,-34,31,-66,38,57,-37,5,35,-19,55,42,-57,5,-4,-28,30,29,66,-18,27,-84,97,-51, 
  /* [3][0][][] */ 27,-4,-29,-19,21,103,24,-11,35,-41,26,-25,-50,13,12,35,-45,-63,30,-127,4,-16,-22,-18,-51,85,110,53,-12,-35,27,45,44,-21,97,21,-49,-53,8,27,13,23,-21,2,22,26,-6,-36, 
  /* [4][0][][] */ 98,-12,12,-45,101,87,51,10,69,-25,-103,23,41,-19,22,-8,-97,-102,-16,-89,-36,34,-45,-36,-74,120,-99,127,-56,-45,31,52,48,-41,12,-35,-3,13,-32,36,-42,-14,1,48,-38,91,-33,-52, 
  /* [5][0][][] */ 1,-13,-58,3,-17,56,23,-23,65,56,39,94,54,-21,34,-6,-39,127,-21,32,10,-5,-62,-16,33,-1,-73,-40,-20,31,19,-14,-46,6,40,13,-44,7,-87,-2,88,-14,28,51,-14,12,-41,26, 
  /* [6][0][][] */ 49,9,10,84,9,-16,106,-52,0,61,127,97,39,40,-57,61,29,-33,-69,79,55,-58,-47,56,-86,90,84,-3,114,53,-19,-5,91,-58,-102,-12,89,33,11,2,19,57,56,-36,66,111,40,-9, 
  /* [7][0][][] */ -96,-9,-23,29,-54,-54,17,44,85,114,-53,-78,-117,21,-26,-17,-85,104,-6,127,-56,48,20,37,-10,-89,-21,-75,31,38,-5,2,-17,18,20,-27,-4,-59,126,25,9,30,12,-16,60,62,-30,8, 
  /* [8][0][][] */ -12,-87,50,-58,63,-58,77,-29,-33,-111,27,14,-33,1,32,39,-5,6,-29,102,7,44,-22,26,69,-5,-67,-36,-127,-12,-52,-111,9,-76,-1,93,-2,30,112,16,18,7,86,113,1,-72,-35,78, 
  /* [9][0][][] */ 28,-37,12,-66,33,86,-42,52,17,-42,-47,-23,21,-56,113,-20,11,-127,17,44,-80,41,52,-44,-29,-88,-20,78,57,73,-58,-35,-47,43,-6,124,-30,-49,-61,-33,-24,-2,31,111,57,86,-83,18, 
  /* [10][0][][] */ -14,19,-24,-12,17,23,-69,-47,51,38,58,-12,-31,-5,50,-65,-66,127,0,46,-2,-10,22,25,-48,37,0,95,41,15,-36,-13,64,5,-8,27,-7,-40,-39,13,-88,-4,23,-8,7,52,23,27, 
  /* [11][0][][] */ -28,53,-21,35,29,50,-5,16,16,22,-127,-66,70,14,-13,-41,6,20,-56,-43,-10,-10,104,8,53,14,-9,34,-13,21,-18,49,32,0,-46,3,44,73,101,19,34,-24,68,-4,-53,-24,86,7, 
  /* [12][0][][] */ -58,-11,30,23,-58,-58,10,-2,-37,-37,-123,24,70,-107,10,42,60,104,84,-127,-30,40,-43,-78,5,-13,38,-31,2,5,-20,68,75,74,40,-41,-56,-32,32,5,-27,20,57,-3,28,-14,-48,-43, 
  /* [13][0][][] */ -56,-120,-48,-106,0,27,56,10,-108,23,110,-72,55,44,127,5,108,22,-11,-96,69,-81,127,3,-85,1,-25,13,-37,-114,-121,14,42,-15,-66,51,26,-58,71,-78,-6,45,59,54,44,-29,92,-71, 
  /* [14][0][][] */ 65,13,-50,18,-34,18,-71,-19,-31,53,56,49,-14,-66,14,-31,50,-106,19,4,90,-50,17,-4,-11,127,-88,1,-52,-25,-78,4,127,44,87,-19,-77,6,-20,59,-5,-31,115,-31,-47,-42,-53,58, 
  /* [15][0][][] */ -54,14,37,19,95,5,1,36,23,78,-19,62,67,-25,-39,-21,21,37,-6,-36,31,-40,-49,-55,45,-67,-41,67,-39,5,5,15,-54,-1,127,-7,-82,16,67,-17,-39,-26,23,-2,-44,-23,-18,7, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.004928012378513813, 0.0048346170224249363, 0.006042990367859602, 0.0064323707483708858, 0.0037185472901910543, 0.006020362488925457, 0.003802561666816473, 0.0053319772705435753, 0.0045052492059767246, 0.0031751892529428005, 0.0066315885633230209, 0.0059082377701997757, 0.0040937555022537708, 0.0039170822128653526, 0.004900042898952961, 0.0060199527069926262, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 14793, -1214, 18938, -558, 15514, -3213, 41390, 441, 9341, 32376, 1013, 26301, -640, 13601, 28666, 36309, -638, -6319, 6413, 42693, -680, 25858, 237, 14795, 22051, 36835, 1237, -1572, -7133, 14348, 24161, -168, 3329, 398, 520, 18270, 10069, 32029, 626, 25916, 26863, -1030, 1090, 14973, 824, -2582, 42361, 27866, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00010864042269531637, 0.00010529832070460543, 7.16652866685763e-05, 0.00011282836203463376, 0.00011460389941930771, 9.7717740572988987e-05, 4.9870763177750632e-05, 0.00019874596910085529, 0.00011706915393006057, 6.6205066104885191e-05, 6.4983229094650596e-05, 9.8063952464144677e-05, 6.7663539084605873e-05, 8.8644759671296924e-05, 5.9284851886332035e-05, 6.9224312028381974e-05, 0.00010515476606087759, 8.6840329458937049e-05, 0.00014987691247370094, 5.9036050515715033e-05, 0.00010698995902203023, 5.2153129217913374e-05, 8.6309039033949375e-05, 9.590125409886241e-05, 7.4218107329215854e-05, 6.9615001848433167e-05, 6.1694132455158979e-05, 5.4351086873793975e-05, 0.00023436715127900243, 9.5722716650925577e-05, 5.6923276133602485e-05, 0.00029872087179683149, 7.4074428994208574e-05, 0.00018370650650467724, 0.00010172474867431447, 8.7158463429659605e-05, 9.7548370831646025e-05, 4.8863079427974299e-05, 9.6019830380100757e-05, 8.8862580014392734e-05, 5.5472202802775428e-05, 0.00014308223035186529, 0.00018189371621701866, 7.475049642380327e-05, 0.00015743254334665835, 7.1312955697067082e-05, 4.9318681703880429e-05, 6.6727268858812749e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -83,55,-127,125,-108,74,-51,105,-68,-93,72,-69,80,-95,-57,-97,92,93,65,-127,70,-118,99,-102,-98,-63,74,99,-93,-51,-105,71,120,-74,57,-114,-78,-121,90,-48,-19,-75,99,-71,87,74,-103,-71, -124,83,-67,117,-96,119,-55,127,-74,-113,126,-80,122,-124,-50,-101,100,127,127,-118,127,-122,127,-116,-95,-97,67,127,35,-62,-127,76,119,-127,94,-114,-74,-127,111,-89,-103,89,127,-107,-41,113,-83,-101, -55,54,-3,38,-5,54,-46,76,-42,-38,47,-47,45,-42,-24,-37,32,58,61,-35,46,-110,56,-33,-90,-64,25,31,112,2,-84,55,43,-77,49,-25,-39,-29,60,-63,-118,-30,60,-52,-55,75,-9,-127, 
  /* [0][1][][] */ -96,123,-76,118,-78,114,-127,82,-106,-94,81,-79,95,-96,-95,-100,121,93,-66,-107,88,-127,123,-77,-80,-92,97,96,-119,-85,-106,15,115,23,83,-127,-96,-106,114,-90,-108,-96,77,-127,127,84,-127,-53, -127,127,-114,127,-127,127,-101,125,-127,-127,127,-127,127,-127,-127,-127,127,117,-73,-117,116,-110,125,-127,-93,-127,127,110,37,-127,-122,127,127,31,127,-124,-127,-70,127,-127,-127,127,81,-118,-60,127,-101,-74, -46,59,-60,54,-37,43,-61,38,-57,-33,56,-71,63,-32,-44,-25,59,57,-59,-38,34,-98,63,-51,-127,-56,44,69,127,-67,-85,53,48,12,56,-30,-27,-9,65,-98,-65,-60,19,-79,-82,83,-4,-91, 
  /* [0][2][][] */ -31,76,-6,44,-46,29,-94,9,-37,-37,19,-52,46,-58,-4,-99,40,19,-89,-59,1,-99,58,-31,-57,-45,62,11,-61,-61,-54,79,25,42,36,-73,-55,-54,31,-86,-106,-46,31,-104,66,38,-124,-78, -77,52,-82,66,-58,44,-91,31,-66,-42,46,-70,87,-64,-47,-125,70,29,-97,-67,0,-54,42,-43,-73,-53,66,23,32,-84,-65,124,2,53,66,-77,-59,-49,43,-72,-40,62,-1,-84,-34,61,-91,-64, -24,28,-57,17,-5,17,-66,46,-18,2,28,-40,44,-20,-13,-69,37,21,-54,-9,10,-31,26,-27,-101,-33,28,12,100,-26,-30,57,-3,38,24,-16,-20,-23,9,-74,12,-17,-3,-30,-43,43,-37,-90, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0046172179281711578, 0.0044751786626875401, 0.0030457745306193829, 0.0047952053137123585, 0.0048706657253205776, 0.004153003916144371, 0.0021195074077695608, 0.008446703664958477, 0.0049754390493035316, 0.0028137152548879385, 0.002761787036433816, 0.004167717881500721, 0.0028757003601640463, 0.0037674021441489458, 0.0025196061469614506, 0.0029420333448797464, 0.0044690775685012341, 0.0036907137837260962, 0.0063697686418890953, 0.0025090321432799101, 0.0045470730401575565, 0.0022165079135447741, 0.0036681341007351875, 0.0040758033283054829, 0.0031542694196105003, 0.0029586374294012785, 0.002622000640258193, 0.0023099211975932121, 0.0099606039002537727, 0.0040682153776288033, 0.002419239142909646, 0.012695636600255966, 0.003148163203150034, 0.007807526271790266, 0.004323301836848259, 0.00370423449203372, 0.004145805723965168, 0.0020766807720065117, 0.0040808427147567272, 0.0037766594905406237, 0.0023575685918331146, 0.0060809948481619358, 0.0077304826118052006, 0.003176896134391427, 0.0066908830776810646, 0.0030308004934340715, 0.0020960438996553421, 0.002835908904671669, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2200, -1134, 742, -2150, 3329, -562, 4409, -3707, 915, 720, 2092, 4570, 606, -388, 642, 5608, -1727, 3268, 4835, 786, -935, 1865, -646, 4435, 2209, 2143, 986, -688, 8342, -229, 2718, -1901, -537, 3956, -1334, 1942, 2089, 749, 342, 5506, 1561, 4832, -3709, 1227, 4702, 270, 2281, 3131, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00022639175585936755, 0.00032345997169613838, 0.00032118504168465734, 0.00020917122310493141, 0.00023660504666622728, 0.00023466680431738496, 0.00018356650252826512, 0.00015960613382048905, 0.00027441134443506598, 0.0003268658765591681, 0.00021942054445389658, 0.00016749853966757655, 0.00026492789038456976, 0.00031523604411631823, 0.00026610790519043803, 0.00015399286348838359, 0.0002311997814103961, 0.00025401700986549258, 0.00018129416275769472, 0.00032671866938471794, 0.00031709435279481113, 0.00027583711198531091, 0.00021121438476257026, 0.00017165008466690779, 0.00022607226856052876, 0.00022335461108013988, 0.00028902807389385998, 0.00031478228629566729, 0.00010959635255858302, 0.00031413597753271461, 0.00018021550204139203, 0.00017799118359107524, 0.00023842080554459244, 0.00018978597654495388, 0.00020291079999879003, 0.00029214561800472438, 0.00020747695816680789, 0.00029122130945324898, 0.00024844647850841284, 0.00015759313828311861, 0.00032614174415357411, 0.00016328936908394098, 0.0001489105197833851, 0.00030531850643455982, 0.00016533592133782804, 0.00024092737294267863, 0.00026021178928203881, 0.00021500822913367301, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 58,30,127,-30,54,113,-85,-50, 
  /* [1][0][][] */ 9,-80,-127,9,57,14,34,-1, 
  /* [2][0][][] */ -127,-4,-44,-26,51,28,-77,-36, 
  /* [3][0][][] */ 47,88,127,-84,0,-115,-6,-12, 
  /* [4][0][][] */ -127,23,-41,-25,42,15,-40,-55, 
  /* [5][0][][] */ -106,28,-65,-9,7,41,-85,-127, 
  /* [6][0][][] */ -45,-127,-113,52,101,13,4,48, 
  /* [7][0][][] */ -62,-127,-105,-81,-67,-85,28,83, 
  /* [8][0][][] */ 78,40,0,-17,91,-81,-127,13, 
  /* [9][0][][] */ -24,48,-52,81,-60,-41,127,-28, 
  /* [10][0][][] */ -26,127,36,57,109,-17,-15,52, 
  /* [11][0][][] */ -80,-48,-29,-7,-89,115,127,-5, 
  /* [12][0][][] */ 72,41,-127,39,-10,-47,-70,-17, 
  /* [13][0][][] */ 54,-26,-53,3,3,-127,-39,-30, 
  /* [14][0][][] */ 13,-62,68,13,127,-88,-51,18, 
  /* [15][0][][] */ -43,-56,-6,127,61,84,-69,14, 
  /* [16][0][][] */ 112,31,-45,11,66,-108,-127,-30, 
  /* [17][0][][] */ 57,127,55,77,45,64,21,-83, 
  /* [18][0][][] */ 27,-3,-6,3,127,7,18,1, 
  /* [19][0][][] */ 16,127,27,15,-119,10,23,-33, 
  /* [20][0][][] */ -44,21,56,-127,14,36,-16,102, 
  /* [21][0][][] */ -40,78,30,-127,27,49,-13,114, 
  /* [22][0][][] */ -74,-73,-90,10,-127,99,123,-21, 
  /* [23][0][][] */ 94,36,-127,26,19,-43,-76,-18, 
  /* [24][0][][] */ -43,44,13,2,-31,75,-127,95, 
  /* [25][0][][] */ -106,-61,-127,15,-52,-69,67,92, 
  /* [26][0][][] */ 39,-4,-27,-33,127,-3,121,-36, 
  /* [27][0][][] */ 127,-69,29,96,-2,30,-26,96, 
  /* [28][0][][] */ 59,40,64,-30,127,-37,55,-33, 
  /* [29][0][][] */ -19,-6,-20,-50,-75,15,127,-33, 
  /* [30][0][][] */ 49,-127,-47,-78,-125,-8,12,-62, 
  /* [31][0][][] */ 8,26,-2,-12,-127,4,-18,-16, 
  /* [32][0][][] */ 51,-59,-51,73,-7,-92,103,-127, 
  /* [33][0][][] */ 66,127,75,26,92,-32,-16,-29, 
  /* [34][0][][] */ -127,-34,118,-12,-24,106,100,16, 
  /* [35][0][][] */ -20,68,127,-11,-65,-65,-35,22, 
  /* [36][0][][] */ -108,8,118,-24,-21,127,72,32, 
  /* [37][0][][] */ -28,-76,3,-127,-42,-75,68,37, 
  /* [38][0][][] */ 50,-23,85,-56,65,59,-127,10, 
  /* [39][0][][] */ -30,92,-127,-34,-25,12,9,98, 
  /* [40][0][][] */ 59,-54,26,38,9,1,7,127, 
  /* [41][0][][] */ -24,58,127,-7,4,76,-59,17, 
  /* [42][0][][] */ 73,-127,-108,-36,-98,-14,14,-105, 
  /* [43][0][][] */ -4,-64,22,-45,127,-36,19,40, 
  /* [44][0][][] */ -18,102,127,40,5,44,-57,17, 
  /* [45][0][][] */ -36,40,14,91,-114,52,-127,17, 
  /* [46][0][][] */ -45,-32,67,37,-122,-127,-27,-7, 
  /* [47][0][][] */ -23,66,57,-106,-127,37,-8,65, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0024972022511065006, 0.0035679079592227936, 0.0035428146366029978, 0.0023072520270943642, 0.0026098594535142183, 0.0025884797796607018, 0.0020248205401003361, 0.0017605269094929099, 0.003026879858225584, 0.003605476813390851, 0.002420306671410799, 0.0018475836841389537, 0.0029222730081528425, 0.0034771945793181658, 0.0029352891724556684, 0.0016986101400107145, 0.0025502368807792664, 0.0028019209858030081, 0.001999755622819066, 0.0036038528196513653, 0.0034976922906935215, 0.0030426066368818283, 0.0023297891020774841, 0.0018933771643787622, 0.0024936781264841557, 0.0024637011811137199, 0.0031881087925285101, 0.0034721894189715385, 0.0012088967487215996, 0.0034650601446628571, 0.001987857511267066, 0.0019633222837001085, 0.0026298880111426115, 0.0020934240892529488, 0.002238196786493063, 0.0032224967144429684, 0.0022885636426508427, 0.0032123010605573654, 0.00274047558195889, 0.0017383226659148932, 0.0035974890924990177, 0.0018011546926572919, 0.0016425496432930231, 0.0033677995670586824, 0.0018237291369587183, 0.0026575366500765085, 0.0028702523559331894, 0.0023716369178146124, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -58, 3131, 21185, 1339, 3423, -11055, 1650, -11248, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.1014931967947632e-05, 0.00010725021274993196, 0.00014115731755737215, 0.00010841298353625461, 0.00013120827497914433, 0.00012545668869279325, 8.4375424194149673e-05, 9.0027984697371721e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -29,-35,2,-69,2,-3,91,92,-100,-84,-31,15,-52,4,-60,39,-80,4,22,127,60,-42,18,96,72,89,63,3,-74,-59,-66,-50,-52,104,47,-48,23,-29,89,2,32,4,1,-91,47,-43,-34,-81, 
  /* [1][0][][] */ -23,48,-32,-47,-78,66,-23,-62,-37,68,-18,6,51,57,-55,-18,-20,-126,86,-48,127,13,-62,33,68,1,-116,54,42,-18,56,29,-32,-17,1,-9,1,94,-25,-23,67,38,-5,15,101,16,-19,63, 
  /* [2][0][][] */ -33,-35,127,-5,90,-32,-8,29,-37,-1,-13,41,8,-34,-45,-124,-45,-106,-23,25,-102,28,-28,-23,-39,16,-10,-47,-25,-1,-24,-14,-5,-1,23,-6,24,-33,-55,7,33,-29,32,-41,-48,-58,-66,-54, 
  /* [3][0][][] */ 45,7,50,9,6,-43,20,74,-65,-43,47,-22,-86,60,-19,26,50,31,-49,25,-120,-69,116,-9,2,9,-75,-42,-70,70,105,-61,9,-127,-24,43,-9,-88,-13,77,-84,-68,61,-10,-100,-58,70,-7, 
  /* [4][0][][] */ 1,-17,78,-27,2,-5,1,-3,-61,-3,-22,-1,43,-70,42,-99,46,49,1,-36,15,35,27,11,5,4,45,-15,40,24,-127,-19,-34,-16,2,16,50,-1,35,6,-56,-5,-62,31,-14,-98,11,22, 
  /* [5][0][][] */ 28,-60,43,30,26,9,28,-14,-81,-15,-46,27,24,10,14,-56,90,80,-14,-18,83,-82,127,-87,-20,39,-29,44,7,20,-40,-54,-8,-52,-50,11,48,24,64,3,-88,26,35,17,40,-12,86,0, 
  /* [6][0][][] */ -57,52,-124,95,55,21,25,27,-26,-3,65,-75,-97,-26,-30,27,-117,31,-3,97,26,63,-96,-94,-4,-15,18,79,-38,-32,-50,-5,35,74,-40,-28,-13,-3,88,9,75,69,-127,-60,-22,126,-50,-31, 
  /* [7][0][][] */ 30,61,-87,21,15,50,115,55,39,64,-93,-10,-52,0,-59,-54,20,44,96,83,75,4,127,20,78,77,-72,92,-74,30,-10,-71,19,-68,-34,14,5,91,-51,59,-55,44,-5,-84,60,-4,46,-35, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0038681344594806433, 0.0045581338927149773, 0.0059991856105625629, 0.0046075517311692238, 0.0055763516575098038, 0.0053319092839956284, 0.0035859555937349796, 0.0038261893205344677, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 425, 11247, -570, -76, 266, -796, -258, 5168, -2934, 499, -3815, 25, 1697, -943, -2786, 4174, 7277, 638, -35, -3388, -9579, 2704, 14975, -1926, -3252, -1020, 12131, -7960, -755, -3452, -10295, 8935, 5451, 754, 2785, -285, -90, -1063, 10947, -1662, 8816, -1698, 3579, 1653, -1663, 8276, -3127, 823, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00028415030101314187, 0.0001341597962891683, 0.0008680627797730267, 0.00025344957248307765, 0.00023040942323859781, 0.00021870686032343656, 0.00027316476916894317, 0.00032617439865134656, 0.00012360973050817847, 0.00024082454910967499, 0.00027171903639100492, 0.00079716113395988941, 0.00044955735211260617, 0.00058406702009961009, 0.00033644228824414313, 0.00067456206306815147, 0.0001565907004987821, 6.891515658935532e-05, 0.00020653546380344778, 0.00031705328729003668, 0.00021590330288745463, 0.00028582703089341521, 9.41713951760903e-05, 0.0005069458857178688, 0.00014367743278853595, 0.0003435349790379405, 0.0005825439584441483, 0.00016912574938032776, 0.00024451216449961066, 0.00029394874582067132, 0.0001195627119159326, 0.00013308195048011839, 0.00014330662088468671, 0.0002986238687299192, 0.00018351132166571915, 0.00028346735052764416, 0.0020951917394995689, 0.00031712607597000897, 0.00014536122034769505, 0.0001671366480877623, 0.00028493051650002599, 0.00013378587027546018, 0.0002623842447064817, 0.00020432312157936394, 0.00025825630291365087, 8.7206215539481491e-05, 7.4858646257780492e-05, 0.00016795202100183815, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 10,-46,12,9,-18,-112,-36,29,-44,0,-25,-1,44,1,-3,2,105,14,40,2,16,-43,-64,7,11,-15,-36,-18,-62,90,-6,-127,39,-16,-42,-44,-10,-29,-1,-6,-33,54,0,23,-15,57,127,-20, -127,-107,-20,127,-65,70,-90,127,11,15,-19,-8,51,17,0,-43,-33,32,25,4,23,117,12,127,127,-29,-89,49,79,-111,4,-72,54,-12,-20,-119,27,24,-77,-43,-127,-7,-97,-127,35,59,37,117, -9,-4,11,8,-22,22,51,21,-6,-40,-16,-2,-27,5,-2,3,-59,36,-60,-33,4,-46,127,8,-43,5,-29,19,23,53,20,-12,-2,-22,-20,79,10,14,11,85,9,-29,24,-37,-3,40,-18,-15, 
  /* [0][1][][] */ -10,-6,-27,-4,34,-127,127,-116,-9,12,18,27,127,23,6,-30,-17,-23,28,39,86,-72,28,0,-47,127,-96,-21,127,-83,32,-103,-38,3,-52,15,14,-64,-50,8,99,127,8,-107,-66,-71,1,80, 81,-127,127,-5,127,45,-61,-62,35,127,127,-127,-105,127,127,127,127,110,101,127,127,127,-2,11,114,-100,-127,106,33,127,127,25,-127,127,127,127,-127,127,-127,-124,39,24,-127,-30,127,-127,-45,78, 19,41,-42,-10,-46,98,-100,86,86,-87,17,56,-48,17,11,-60,16,17,-127,13,23,-120,-28,-15,74,-13,-18,127,-82,-28,21,-42,-31,17,84,-17,47,-4,-3,-82,92,-12,29,50,-54,93,96,-93, 
  /* [0][2][][] */ 0,15,5,-30,6,-76,-8,-34,11,4,-2,4,-20,-7,-2,-6,-41,34,20,-44,15,-29,82,-24,-103,6,35,-24,17,20,8,27,-5,-22,-65,32,4,-5,20,55,-51,7,7,39,-16,26,7,18, 39,-40,-40,-42,27,28,116,-107,127,-36,2,8,-82,-19,-19,-70,-16,127,-5,25,8,23,-14,-37,-76,60,86,-6,-95,24,-19,-4,-17,-15,-35,-2,63,-25,10,127,-118,-11,-13,86,36,61,13,-127, -14,27,0,-23,-20,-16,7,-66,-22,-32,-4,5,16,-7,-11,15,52,56,-35,-21,-3,-36,-26,-26,21,-25,24,4,-16,17,2,19,30,-29,-29,-60,2,7,29,27,-31,-22,1,22,-11,14,88,-58, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.01207638718187809, 0.0057017914950847626, 0.036892667412757874, 0.010771607048809528, 0.009792400524020195, 0.0092950416728854179, 0.011609503068029881, 0.013862411491572857, 0.0052534136921167374, 0.010235043242573738, 0.011548059061169624, 0.033879347145557404, 0.019106186926364899, 0.024822847917675972, 0.014298796653747559, 0.028668886050581932, 0.0066551049239933491, 0.0029288942459970713, 0.0087777571752667427, 0.013474764302372932, 0.0091758901253342628, 0.012147649191319942, 0.0040022842586040497, 0.021545199677348137, 0.0061062909662723541, 0.014600236900150776, 0.024758117273449898, 0.0071878442540764809, 0.010391767136752605, 0.012492821551859379, 0.0050814151763916016, 0.0056559829972684383, 0.006090531125664711, 0.012691514566540718, 0.007799230981618166, 0.012047361582517624, 0.089045651257038116, 0.013477858155965805, 0.0061778519302606583, 0.0071033071726560593, 0.012109546922147274, 0.005685899406671524, 0.01115132961422205, 0.0086837327107787132, 0.010975892655551434, 0.0037062640767544508, 0.0031814924441277981, 0.0071379607543349266, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2286, 3892, 14876, 1668, 2207, -1698, 4122, 14326, 2763, -699, 3132, -1686, 16899, -1641, 1450, 17514, -370, 1761, 203, 3106, 4401, 4797, 747, 33230, 4976, 2783, 40889, 1716, 4553, 4867, 771, 992, 824, 1927, 42, -16, -2659, -553, 2369, 2740, 12911, 2981, 3215, 3222, 3971, 3002, 2003, 5525, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00024056911934167147, 0.00020166703325230628, 6.9052090111654252e-05, 0.00018731955788098276, 0.00021943463070783764, 0.00023676498676650226, 0.00018693563470151275, 6.9013083702884614e-05, 0.00020872408640570939, 0.00022757642727810889, 0.00026443912065587938, 0.00026204838650301099, 5.9305504692019895e-05, 0.00025593821192160249, 0.00029991765040904284, 6.1733306210953742e-05, 0.00034571383730508387, 0.00024018346448428929, 0.00025801651645451784, 0.00021505371842067689, 0.00017162371659651399, 0.00017597683472558856, 0.00035678176209330559, 3.4326989407418296e-05, 0.00015950972738210112, 0.0002069434558507055, 2.8933860448887572e-05, 0.00025555174215696752, 0.0001688777410890907, 0.00015685278049204499, 0.00045115334796719253, 0.00044125388376414776, 0.00024596400908194482, 0.00024114472034852952, 0.00028076421585865319, 0.00030214476282708347, 0.00022347728372551501, 0.00027205204241909087, 0.00026177134714089334, 0.00019134738249704242, 8.1157508247997612e-05, 0.00019106808758806437, 0.00023875043552834541, 0.00022358415299095213, 0.00017722538905218244, 0.00023818014597054571, 0.00038023688830435276, 0.00014618867135141045, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 55,127,-61,-64,12,79,5,66, 
  /* [1][0][][] */ 49,-78,48,-127,-76,80,-92,-42, 
  /* [2][0][][] */ -29,127,114,39,121,3,38,18, 
  /* [3][0][][] */ 112,28,-88,57,-4,-126,-127,-33, 
  /* [4][0][][] */ -43,27,10,-107,-40,115,127,51, 
  /* [5][0][][] */ 20,77,-127,-70,49,81,24,-22, 
  /* [6][0][][] */ -18,127,73,66,69,14,3,-82, 
  /* [7][0][][] */ 127,-12,-51,14,11,1,101,15, 
  /* [8][0][][] */ 46,127,53,86,97,77,88,-89, 
  /* [9][0][][] */ 39,106,-127,-97,13,100,16,54, 
  /* [10][0][][] */ -64,-48,14,-47,-18,-36,-55,127, 
  /* [11][0][][] */ 16,-114,-127,-21,18,-6,45,-11, 
  /* [12][0][][] */ -44,-88,-109,-38,-127,21,-67,46, 
  /* [13][0][][] */ -5,13,-105,104,-127,-31,0,-21, 
  /* [14][0][][] */ -63,-42,-127,-13,40,-6,-7,-59, 
  /* [15][0][][] */ 16,-98,-127,18,-106,-16,-22,-12, 
  /* [16][0][][] */ 127,-64,-16,66,-80,14,27,100, 
  /* [17][0][][] */ -24,118,127,-27,-44,-31,-45,-23, 
  /* [18][0][][] */ 4,-127,57,81,2,-70,60,-93, 
  /* [19][0][][] */ 127,-46,-64,45,-103,0,40,106, 
  /* [20][0][][] */ -29,-127,82,81,-13,-96,-4,-72, 
  /* [21][0][][] */ -2,-50,-6,-31,127,-4,56,9, 
  /* [22][0][][] */ -127,26,-80,53,51,38,-102,-122, 
  /* [23][0][][] */ -105,-30,75,6,-116,127,114,-53, 
  /* [24][0][][] */ -23,71,7,-59,-43,127,117,4, 
  /* [25][0][][] */ -49,-85,-127,-73,-42,-10,-18,-27, 
  /* [26][0][][] */ -17,54,-15,127,-77,42,-45,3, 
  /* [27][0][][] */ 12,-127,22,74,12,-57,-1,-115, 
  /* [28][0][][] */ 21,127,54,49,113,-25,12,-53, 
  /* [29][0][][] */ 100,23,-37,-7,69,-127,-108,21, 
  /* [30][0][][] */ 25,-14,23,-127,8,-19,13,-30, 
  /* [31][0][][] */ 50,-43,3,62,-8,21,17,127, 
  /* [32][0][][] */ -101,-74,8,-76,-55,127,57,91, 
  /* [33][0][][] */ -38,49,42,-28,44,127,-108,76, 
  /* [34][0][][] */ 28,127,-67,-55,19,42,-73,68, 
  /* [35][0][][] */ 8,-127,32,50,-38,-61,35,-84, 
  /* [36][0][][] */ -16,-26,-86,-21,-127,-48,-22,12, 
  /* [37][0][][] */ -45,-127,69,77,-46,-82,-14,-38, 
  /* [38][0][][] */ -70,23,60,-68,-127,-71,-50,73, 
  /* [39][0][][] */ 51,-127,99,106,-22,-95,-66,-89, 
  /* [40][0][][] */ -5,72,29,65,-127,-27,-75,27, 
  /* [41][0][][] */ 111,127,-78,-108,54,27,3,25, 
  /* [42][0][][] */ -10,-33,-15,15,127,16,41,29, 
  /* [43][0][][] */ 127,26,87,32,-72,-18,63,109, 
  /* [44][0][][] */ 69,58,-21,5,67,-104,-127,23, 
  /* [45][0][][] */ 34,8,20,2,86,-127,-6,-61, 
  /* [46][0][][] */ 56,-42,-10,127,43,54,18,73, 
  /* [47][0][][] */ -83,-87,41,66,-29,-1,127,-87, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0031609176658093929, 0.0026497701182961464, 0.00090729835210368037, 0.0024612538982182741, 0.0028832245152443647, 0.0031109338160604239, 0.0024562093894928694, 0.00090678583364933729, 0.0027424951549619436, 0.0029902022797614336, 0.0034745533484965563, 0.0034431407693773508, 0.00077923474600538611, 0.0033628572709858418, 0.0039407177828252316, 0.00081113440683111548, 0.0045424490235745907, 0.0031558503396809101, 0.0033901645801961422, 0.0028256622608751059, 0.0022550211288034916, 0.0023122180718928576, 0.004687874112278223, 0.00045103373122401536, 0.0020958513487130404, 0.0027190989349037409, 0.00038017160841263831, 0.0033577792346477509, 0.0022189407609403133, 0.0020609407220035791, 0.0059278537519276142, 0.005797781515866518, 0.0032318029552698135, 0.0031684807036072016, 0.003689054399728775, 0.0039699804037809372, 0.0029363422654569149, 0.0035745820496231318, 0.0034395006950944662, 0.002514176769182086, 0.0010663555003702641, 0.0025105071254074574, 0.0031370213255286217, 0.0029377464670687914, 0.0023286233190447092, 0.0031295281369239092, 0.0049960589967668056, 0.0019208216108381748, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7413, 15265, -5085, 8261, -2289, 2498, -12948, -18552, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00021417347306851298, 0.00011559871927602217, 0.00014570984058082104, 0.00011588938650675118, 0.00018375349463894963, 0.00014582523726858199, 0.00019985955441370606, 0.00012690712173935026, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -41,-5,31,18,-28,-13,8,9,-41,-7,-61,-54,-27,-61,-11,-30,45,-40,38,40,-13,30,-37,14,2,-37,52,-14,-6,-17,15,10,79,33,39,-127,17,-2,-16,-33,1,-13,42,45,31,2,26,5, 
  /* [1][0][][] */ 3,40,66,-23,-6,47,-45,-26,-2,23,-21,-94,11,97,-24,60,-21,22,-27,-64,2,-75,-31,28,-81,-11,-7,-120,-23,-11,36,-60,45,85,-37,-1,127,-24,2,54,-38,40,-91,-33,119,-20,-34,-20, 
  /* [2][0][][] */ 0,-19,-60,20,-2,47,30,8,-12,40,-2,31,64,-88,18,-63,37,-86,21,33,-29,56,-2,27,-14,66,-24,-65,11,6,15,-74,-47,-86,42,-31,103,24,-13,-54,-2,24,80,24,127,17,19,28, 
  /* [3][0][][] */ -16,29,-73,45,18,-43,-80,-101,13,-26,-37,-3,2,21,37,77,-15,17,-31,27,6,-103,26,-62,-75,-15,127,-14,-45,7,-62,21,-4,-85,10,-15,-24,-42,-19,102,-52,-32,-3,16,35,0,-43,46, 
  /* [4][0][][] */ -23,-46,-4,8,31,-26,-10,-5,27,-31,59,-74,7,31,7,6,-13,-24,12,-12,-3,-48,7,-18,17,-7,40,49,33,24,-19,23,-12,-3,9,0,-62,84,32,-21,31,-22,-19,-24,-72,13,127,11, 
  /* [5][0][][] */ 44,-16,0,22,31,-49,40,-127,26,-33,-14,125,-84,69,22,-73,-4,-90,23,10,-44,71,-35,-57,-52,82,-31,8,-26,47,-46,-40,23,57,28,-6,-44,-9,-38,-42,15,-41,-52,-7,-35,48,91,22, 
  /* [6][0][][] */ 58,-23,25,-10,-34,-19,-34,20,-45,6,-42,127,-42,-35,-7,55,15,46,16,33,35,-79,-25,20,23,38,-64,8,8,-36,13,37,3,16,-15,0,14,4,2,-5,-8,-16,41,62,-3,-35,75,-16, 
  /* [7][0][][] */ -28,2,-11,66,34,32,0,28,19,3,77,-5,125,110,67,50,45,47,-8,6,24,-22,-91,-29,17,0,-27,63,37,-25,-33,-17,33,4,36,-98,-71,41,36,55,-41,41,88,127,-61,-34,-109,56, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0091023724526166916, 0.0049129454419016838, 0.0061926683411002159, 0.0049252989701926708, 0.0078095234930515289, 0.0061975722201168537, 0.0084940306842327118, 0.0053935525938868523, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 12358, 6401, 6530, 1785, -441, -1185, -1717, 34713, 408, 4199, 4625, 57925, -116, 1286, -32, 11408, -1341, 13329, 1385, 8572, 9880, -12, 4990, -10999, 12481, 699, -780, 14221, 4235, -2288, -11447, 13172, 4920, 3633, -209, 2834, -9501, 10464, -2470, 15997, -2181, -1264, 2940, -118, -1893, -1958, 1826, -109, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.9925826867111027e-05, 0.00010460647172294557, 0.00015435300883837044, 0.0001248615444637835, 0.00086495187133550644, 0.00014402698434423655, 0.00014945822476875037, 0.0001096325577236712, 0.00011929711035918444, 7.5155308877583593e-05, 7.9912460932973772e-05, 5.1166807679692283e-05, 9.7664000350050628e-05, 7.0522204623557627e-05, 0.00020373771258164197, 0.0001646546006668359, 0.0001276803232030943, 0.00040913285920396447, 0.00011722918134182692, 0.0001589998573763296, 0.00013707600010093302, 0.00042884537833742797, 0.000144925870699808, 0.00021358765661716461, 0.00012166604574304074, 9.1908957983832806e-05, 6.4317413489334285e-05, 9.5023591711651534e-05, 0.00018071706290356815, 0.00085814256453886628, 0.00022383089526556432, 8.8803870312403888e-05, 0.00011075506336055696, 0.00014229034422896802, 0.00018108566291630268, 6.6808373958338052e-05, 9.3661394203081727e-05, 4.5155942643759772e-05, 0.00010458548786118627, 6.9945075665600598e-05, 0.00014425381959881634, 0.00012830612831749022, 8.1545978900976479e-05, 8.4412458818405867e-05, 8.7318265286739916e-05, 0.0002656669239513576, 7.1795810072217137e-05, 0.00018759946397040039, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -73,-96,-16,-38,127,-44,110,-38,-88,-78,-18,-55,116,40,58,-127,69,-18,3,-44,-48,127,0,51,11,109,71,-28,70,-58,32,-62,-110,-95,51,68,36,97,111,-66,-127,-9,40,71,53,-127,79,55, -79,-127,-85,38,-84,127,85,-69,-64,35,74,-127,127,83,114,-87,-70,-92,36,-61,-66,101,-91,111,-84,127,93,-112,79,-45,11,-127,-31,-77,76,115,121,122,127,-62,-113,-66,63,99,89,123,92,58, -15,-54,-56,97,-29,-36,52,-38,75,11,63,-75,19,57,-33,1,-75,-14,31,-39,-42,47,-83,-21,-84,59,26,-91,12,55,109,-44,25,23,-11,52,77,59,26,7,-18,97,40,41,42,35,18,-111, 
  /* [0][1][][] */ -127,-96,-14,-99,-75,-67,124,-105,-127,-127,86,-70,86,53,-127,-89,127,-127,-64,-100,-64,101,-29,45,2,109,104,-43,-102,-66,11,-54,-77,-127,-127,61,35,71,24,-102,71,-14,88,125,81,116,114,-127, -90,-125,-116,-125,-34,124,127,-127,77,50,127,-118,98,127,67,-124,59,-102,-127,-127,-127,82,-127,127,-127,110,127,-127,-127,127,-8,-113,-127,-115,48,127,127,127,2,-127,115,-104,127,127,127,0,127,82, -37,-71,-127,127,70,-56,49,-58,54,17,9,-62,17,65,87,-42,-27,7,-19,-70,-52,20,-80,-33,-125,58,38,-96,-71,37,127,-69,-53,18,64,74,75,73,-4,-37,54,127,68,7,55,-47,30,27, 
  /* [0][2][][] */ -117,-61,28,25,-36,-26,37,-39,32,-56,27,-19,-6,31,-57,-9,-81,-16,90,-45,10,16,-53,19,13,85,67,-15,18,58,14,-20,12,-86,-42,34,3,18,-52,-38,17,-1,42,65,29,63,9,-53, -94,-49,-39,-80,89,34,60,-62,86,24,-38,-46,7,48,-125,-66,24,13,41,-73,-22,0,-43,40,-55,69,80,-52,18,7,-21,-32,-65,-41,-71,55,28,20,-106,-56,24,-50,90,90,36,-107,20,14, -11,-22,-63,-16,-13,-19,19,-48,-52,16,-11,-13,2,16,50,-22,14,46,-6,-57,-29,-7,2,-52,-53,21,21,-30,-11,-62,41,-29,-89,12,17,48,9,17,-57,-21,-4,46,24,25,20,1,8,45, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0033968475181609392, 0.0044457749463617802, 0.0065600029192864895, 0.0053066154941916466, 0.036760453134775162, 0.0061211464926600456, 0.0063519743271172047, 0.0046593835577368736, 0.0050701270811259747, 0.0031941006891429424, 0.0033962796442210674, 0.002174589317291975, 0.0041507198475301266, 0.0029971934854984283, 0.0086588524281978607, 0.0069978204555809498, 0.0054264133796095848, 0.017388146370649338, 0.0049822400324046612, 0.0067574935965240002, 0.0058257300406694412, 0.018225928768515587, 0.0061593493446707726, 0.009077475406229496, 0.0051708067767322063, 0.0039061305578798056, 0.0027334899641573429, 0.004038502462208271, 0.0076804747804999352, 0.036471057683229446, 0.0095128128305077553, 0.0037741644773632288, 0.0047070900909602642, 0.0060473396442830563, 0.0076961405575275421, 0.0028393559623509645, 0.0039806091226637363, 0.0019191275350749493, 0.0044448832049965858, 0.0029726657085120678, 0.0061307870782911777, 0.0054530100896954536, 0.00346570392139256, 0.0035875295288860798, 0.0037110261619091034, 0.011290843598544598, 0.0030513217207044363, 0.0079729771241545677, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1015, -407, -189, 1135, 23121, 1992, -476, 5401, 1196, 1438, 221, 2499, 949, 631, -844, 503, 2845, 12930, 2530, -844, 1143, -1173, -41, 2605, -183, -632, 1968, -29, 3776, 14217, 2361, -3, 397, 12, 2088, -11, 564, -268, 1175, 990, 1453, 1871, 85, -267, 739, 2037, 1090, -126, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00047297630226239562, 0.00039641844341531396, 0.00032093233312480152, 0.00033732882002368569, 4.6772423957008868e-05, 0.00033585744677111506, 0.00060854200273752213, 0.00018344371346756816, 0.00033170799724757671, 0.0004952925955876708, 0.00032537672086618841, 0.00033134678960777819, 0.00023672930547036231, 0.00037418349529616535, 0.00031418894650414586, 0.00034328969195485115, 0.00026519209495745599, 7.7187185524962842e-05, 0.00029142675339244306, 0.0003252076858188957, 0.00039848161395639181, 0.00021331319294404238, 0.00048892875202000141, 0.00030655297450721264, 0.00045789635623805225, 0.00081479846267029643, 0.00030490814242511988, 0.00081597297685220838, 0.00022918541799299419, 6.9459347287192941e-05, 0.00031935854349285364, 0.00074605428380891681, 0.00040684317355044186, 0.00040975431329570711, 0.00034044243511743844, 0.0003620098577812314, 0.00036945697502233088, 0.00061103090411052108, 0.00041080487426370382, 0.00054137699771672487, 0.00037991642602719367, 0.00034554218291305006, 0.00035277378628961742, 0.00047190094483084977, 0.00042093725642189384, 0.0002537882246542722, 0.00030697585316374898, 0.00033304264070466161, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -34,22,-9,-15,-82,-35,-127,30, 
  /* [1][0][][] */ 94,-75,-47,-48,127,-91,92,16, 
  /* [2][0][][] */ -100,125,-42,-127,46,-26,-28,35, 
  /* [3][0][][] */ 50,7,89,12,76,119,127,-20, 
  /* [4][0][][] */ -72,-127,83,9,-74,-102,7,-33, 
  /* [5][0][][] */ 127,-16,61,65,-72,-6,13,-23, 
  /* [6][0][][] */ 27,29,127,-23,42,-32,-37,24, 
  /* [7][0][][] */ 30,11,-127,-30,-44,103,98,-75, 
  /* [8][0][][] */ -11,127,-29,9,61,100,33,62, 
  /* [9][0][][] */ -2,127,-59,85,21,-124,56,118, 
  /* [10][0][][] */ 8,-126,-6,-19,-75,-127,-50,-89, 
  /* [11][0][][] */ -127,-83,106,48,-11,-72,98,60, 
  /* [12][0][][] */ -23,44,-127,85,26,-61,-66,92, 
  /* [13][0][][] */ 90,-127,91,80,9,30,35,-63, 
  /* [14][0][][] */ -29,110,-34,-127,-22,-103,-27,-62, 
  /* [15][0][][] */ 46,113,27,-8,37,-63,94,-127, 
  /* [16][0][][] */ -106,-127,-55,86,-59,10,-20,76, 
  /* [17][0][][] */ -20,-101,-127,98,-50,84,-56,73, 
  /* [18][0][][] */ -84,-73,-52,83,8,71,2,127, 
  /* [19][0][][] */ 57,-125,100,-127,17,-63,40,-35, 
  /* [20][0][][] */ -5,85,35,18,45,127,67,-5, 
  /* [21][0][][] */ 27,114,49,-36,44,-63,92,-127, 
  /* [22][0][][] */ 22,19,99,10,-8,127,33,-35, 
  /* [23][0][][] */ -99,-60,27,-71,94,92,-60,-127, 
  /* [24][0][][] */ -93,-87,43,-83,106,108,-39,-127, 
  /* [25][0][][] */ 127,12,-57,-11,10,26,-58,-8, 
  /* [26][0][][] */ -127,-31,-114,-30,-52,-37,13,2, 
  /* [27][0][][] */ 79,35,-2,-58,-127,-24,89,86, 
  /* [28][0][][] */ -127,-95,6,60,-75,-111,16,-19, 
  /* [29][0][][] */ 117,94,39,-127,39,13,-67,-101, 
  /* [30][0][][] */ -88,-62,31,-66,80,88,-50,-127, 
  /* [31][0][][] */ 57,51,-4,127,12,-68,14,6, 
  /* [32][0][][] */ -33,127,-6,30,31,72,-18,48, 
  /* [33][0][][] */ -40,127,-59,15,18,-33,-26,-6, 
  /* [34][0][][] */ -127,-101,-38,115,-15,20,16,102, 
  /* [35][0][][] */ -55,127,-34,0,72,110,55,74, 
  /* [36][0][][] */ 74,36,2,-48,-127,-27,105,117, 
  /* [37][0][][] */ -64,108,24,26,-127,105,-29,-92, 
  /* [38][0][][] */ 36,36,23,21,127,64,102,59, 
  /* [39][0][][] */ -23,-75,32,-12,11,47,-100,127, 
  /* [40][0][][] */ -67,-61,-70,127,-26,-4,14,76, 
  /* [41][0][][] */ 127,5,51,98,-44,-12,-4,-18, 
  /* [42][0][][] */ -38,7,-73,-127,58,-109,3,80, 
  /* [43][0][][] */ 27,-3,84,-2,36,127,90,8, 
  /* [44][0][][] */ -28,-28,-65,127,42,9,-42,-40, 
  /* [45][0][][] */ 63,123,105,-125,42,-55,33,-127, 
  /* [46][0][][] */ -32,-127,-36,42,-9,39,-69,123, 
  /* [47][0][][] */ 35,48,121,1,100,127,127,-33, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0046340906992554665, 0.0038839979097247124, 0.0031444060150533915, 0.0033050542697310448, 0.00045826323912478983, 0.0032906380947679281, 0.0059623257257044315, 0.0017973305657505989, 0.0032499830704182386, 0.0048527396284043789, 0.0031879509333521128, 0.0032464440446346998, 0.0023194081149995327, 0.0036661461926996708, 0.0030783361289650202, 0.0033634570427238941, 0.0025982784572988749, 0.00075625861063599586, 0.0028553183656185865, 0.0031862945761531591, 0.0039042122662067413, 0.0020899835508316755, 0.0047903880476951599, 0.0030035211239010096, 0.0044863414950668812, 0.0079831695184111595, 0.0029874052852392197, 0.0079946769401431084, 0.0022454950958490372, 0.00068054342409595847, 0.0031289863400161266, 0.0073096328414976597, 0.0039861365221440792, 0.0040146592073142529, 0.0033355606719851494, 0.0035468721762299538, 0.0036198368761688471, 0.0059867110103368759, 0.0040249521844089031, 0.005304261576384306, 0.0037223156541585922, 0.0033855263609439135, 0.0034563797526061535, 0.0046235546469688416, 0.0041242265142500401, 0.0024865467566996813, 0.0030076641123741865, 0.0032630595378577709, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7184, -2502, 12772, -9917, 22581, 7666, -8287, 10687, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00017704893252812326, 0.00021760122035630047, 0.00016460551705677062, 0.0002342359657632187, 0.00020160582789685577, 0.00016810788656584918, 0.00016787269851192832, 0.00025413589901290834, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -12,-10,-21,-64,-24,-35,17,-24,36,10,-33,-3,113,127,-22,-109, 
  /* [1][0][][] */ 127,-56,-39,13,-52,73,-69,-46,-43,82,-32,-52,-11,4,-62,-19, 
  /* [2][0][][] */ -35,-97,45,39,53,-64,-77,-25,32,-103,22,-127,45,-22,-75,26, 
  /* [3][0][][] */ 36,14,19,18,-10,68,-55,-18,127,48,8,20,6,-11,8,25, 
  /* [4][0][][] */ -96,-36,-29,-127,-10,36,53,-116,35,-28,-48,-36,-116,32,-40,-20, 
  /* [5][0][][] */ 85,51,69,-21,44,-41,-127,-120,-18,-67,71,48,-59,47,63,-45, 
  /* [6][0][][] */ 107,36,-127,-74,25,-72,4,-92,-42,19,-115,87,86,-87,6,67, 
  /* [7][0][][] */ -127,-2,103,-26,-58,4,1,-60,-48,62,81,-30,63,-25,27,28, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0075245792977511883, 0.009248051792383194, 0.0069957342930138111, 0.0099550280719995499, 0.0085682477802038193, 0.0071445852518081665, 0.0071345893666148186, 0.010800776071846485, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 21361, -664, -3, 2755, -877, 674, 10675, 1288, 366, 76, -2022, 3432, -420, -672, -422, -775, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00010835599823622033, 0.0001872019493021071, 0.00017260646563954651, 0.00016737099213059992, 0.00094077520770952106, 0.00078621157445013523, 0.00014785963867325336, 0.00083602592349052429, 0.0002768387203104794, 0.0009658544440753758, 0.00024396319349762052, 0.00017806296818889678, 0.00010924828529823571, 0.00022160413209348917, 0.0001983752881642431, 0.0006763757555745542, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -1,1,10,7,-20,10,7,17,-5,-10,3,-6,-1,-6,3,-1, 2,-7,4,7,12,-3,11,-26,-9,10,-5,93,-4,23,4,-1, -1,-1,0,7,2,-15,-4,10,-3,3,-6,-11,2,-4,1,-2, 
  /* [0][1][][] */ 10,-14,5,6,127,-25,-127,-20,127,127,-4,-10,102,-25,-4,-22, -127,127,127,1,-89,-92,-15,-101,18,-104,127,127,127,127,127,127, 22,-2,-2,2,-10,127,2,-11,-6,-12,-9,-15,9,-5,-13,-12, 
  /* [0][2][][] */ 4,-8,-1,-15,-17,14,57,8,-9,-7,-3,-12,-10,0,-9,-15, 24,-20,-8,-127,7,-17,-6,127,-4,2,-3,-23,-4,-58,-15,-42, 2,-10,-6,-4,2,-6,1,-2,-1,2,-8,-6,0,-6,-6,-17, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0046051298268139362, 0.0079560829326510429, 0.0073357746005058289, 0.0071132672019302845, 0.03998294472694397, 0.033413991332054138, 0.0062840343452990055, 0.035531099885702133, 0.011765644885599613, 0.041048813611268997, 0.010368435643613338, 0.0075676757842302322, 0.0046430518850684166, 0.0094181755557656288, 0.0084309494122862816, 0.028745969757437706, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1494, 10, -181, -1729, 55681, 57692, 3936, 8541, 5611, 1322, 1057, -182, 6557, -7123, 75, 37398, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00020685920026153326, 0.0007969890721142292, 0.00023058436636347324, 0.00016095832688733935, 2.7680405764840543e-05, 2.8937585739186034e-05, 0.00013757740089204162, 2.2333251763484441e-05, 0.00013878733443561941, 4.0651124436408281e-05, 0.00047582411207258701, 0.00066002842504531145, 0.00025823744363151491, 1.8210630514658988e-05, 0.00066080898977816105, 4.2752391891553998e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -31, 
  /* [0][1][][] */ 66, -37, 16, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 106, -95, -10, 
  /* [1][1][][] */ -127, 105, 24, 
  /* [1][2][][] */ 14, -1, -12, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 121, 127, 60, 
  /* [3][1][][] */ 4, -19, -12, 
  /* [3][2][][] */ -98, -123, -40, 
  /* [4][0][][] */ 38, -55, 6, 
  /* [4][1][][] */ 38, -127, 6, 
  /* [4][2][][] */ 24, -101, -19, 
  /* [5][0][][] */ -68, 32, -12, 
  /* [5][1][][] */ -127, 38, -7, 
  /* [5][2][][] */ -88, 28, -13, 
  /* [6][0][][] */ -16, 79, 127, 
  /* [6][1][][] */ -49, 56, -15, 
  /* [6][2][][] */ -35, -50, -87, 
  /* [7][0][][] */ 44, 38, -10, 
  /* [7][1][][] */ 127, 72, -5, 
  /* [7][2][][] */ 43, 11, -16, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -25, -60, 96, 
  /* [9][0][][] */ -24, 55, -13, 
  /* [9][1][][] */ -18, 127, -16, 
  /* [9][2][][] */ -6, 93, -7, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 84, 11, -19, 
  /* [13][1][][] */ 127, 92, -12, 
  /* [13][2][][] */ 73, 103, 36, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -89, -28, 17, 
  /* [15][1][][] */ -127, -106, 21, 
  /* [15][2][][] */ -22, -58, 3, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.052749093621969223, 0.20323219895362854, 0.058799009770154953, 0.041044369339942932, 0.0070585031062364578, 0.0073790838941931725, 0.035082235932350159, 0.0056949788704514503, 0.035390768200159073, 0.010366036556661129, 0.12133514136075974, 0.16830724477767944, 0.065850540995597839, 0.0046437103301286697, 0.16850627958774567, 0.010901859030127525, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10206453502178192, } };
const TfArray<1, int> quant46_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.076107367873191833, } };
const TfArray<1, int> quant50_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.061034977436065674, } };
const TfArray<1, int> quant53_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.09065815806388855, } };
const TfArray<1, int> quant54_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.059231292456388474, } };
const TfArray<1, int> quant58_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.067315921187400818, } };
const TfArray<1, int> quant61_zero = { 1, { -32 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.075169242918491364, } };
const TfArray<1, int> quant62_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.042258020490407944, } };
const TfArray<1, int> quant65_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.089337073266506195, } };
const TfArray<1, int> quant66_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.030451046302914619, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.12962569296360016, } };
const TfArray<1, int> quant69_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
