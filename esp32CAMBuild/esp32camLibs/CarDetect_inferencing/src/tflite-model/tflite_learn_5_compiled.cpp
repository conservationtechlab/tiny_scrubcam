/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 21.06.2024 19:04:39

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[11] = { 9290, -19073, -22830, -19935, -16726, -16262, -17964, -20669, -19342, -26159, -27399, };
const TfArray<1, int> tensor_dimension2 = { 1, { 11 } };
const TfArray<11, float> quant2_scale = { 11, { 0.00039159995503723621, 0.00026371769490651786, 0.00022757526312489063, 0.00028010550886392593, 0.00033221274497918785, 0.00034252181649208069, 0.00030920037534087896, 0.000270729826297611, 0.00028679685783572495, 0.00031361033325083554, 0.00028201818349771202, } };
const TfArray<11, int> quant2_zero = { 11, { 0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[11*1*1*32] = { 
  /* [0][0][][] */ -26,34,-30,-99,5,-9,22,-22,-56,38,-30,-33,16,-4,127,-15,-17,111,-24,-22,68,-83,-35,-63,85,29,22,-44,17,29,33,-45, 
  /* [1][0][][] */ 60,-49,99,-72,54,15,107,-69,-71,-4,81,64,-8,-85,-27,38,-19,-119,53,83,-85,36,-68,71,56,96,-127,24,-36,31,37,32, 
  /* [2][0][][] */ -44,-4,4,0,-47,105,-52,-2,-14,-127,117,49,-92,105,-113,89,-82,126,-81,-5,-11,-63,-99,79,-88,54,60,62,108,-51,26,-56, 
  /* [3][0][][] */ 86,70,96,-106,99,-93,-127,-1,5,-112,-58,-7,-106,-110,9,84,56,5,37,38,19,-2,98,-51,64,8,9,-13,99,8,38,74, 
  /* [4][0][][] */ -26,20,70,-82,-37,-91,12,10,75,-63,-19,-11,57,-25,-115,-28,-54,1,-83,63,-56,-82,-127,33,-2,-31,9,-28,38,72,-63,79, 
  /* [5][0][][] */ 48,89,35,-55,69,-23,-74,-20,-24,-55,-73,56,14,53,-61,22,-24,-39,-72,-37,-67,-51,-38,-49,75,-25,-62,127,-10,31,-75,73, 
  /* [6][0][][] */ 96,-18,-20,-127,-71,-95,-105,-99,-8,46,-39,65,-19,106,-39,-1,-21,21,-25,-32,-8,82,-83,28,-93,56,9,-75,55,-71,-8,44, 
  /* [7][0][][] */ -79,-27,38,127,74,27,-47,62,-13,2,-108,96,-60,9,-120,-15,85,71,34,-22,-80,-102,-109,107,48,-14,-111,-117,83,-90,43,103, 
  /* [8][0][][] */ -67,-6,46,-100,-26,-58,11,-51,33,-127,20,-35,26,61,4,54,80,-43,-57,21,-23,79,-5,-13,33,105,-105,-96,7,29,-68,-83, 
  /* [9][0][][] */ -127,-44,-10,65,-108,12,84,-54,-38,20,97,116,67,80,-69,13,-69,-122,-8,-20,-52,-62,-37,-6,19,-54,-99,3,-50,-94,-84,35, 
  /* [10][0][][] */ 40,41,101,-65,38,127,61,21,-18,-51,25,-7,-47,76,-2,4,-77,-14,-86,37,-120,-101,16,34,60,0,-43,-92,38,-72,-12,21, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 11,1,1,32 } };
const TfArray<11, float> quant3_scale = { 11, { 0.0053819082677364349, 0.0036243731155991554, 0.0031276540830731392, 0.0038495974149554968, 0.0045657269656658173, 0.0047074086032807827, 0.0042494591325521469, 0.0037207435816526413, 0.0039415592327713966, 0.0043100668117403984, 0.003875883761793375, } };
const TfArray<11, int> quant3_zero = { 11, { 0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 424, 810, 156, -614, 406, 456, 1463, -23, 88, 1261, 590, 75, 93, 756, 755, 214, -691, 1715, -270, 239, 379, -973, -57, 3, 1088, 616, 1239, 767, 826, 1204, -481, 185, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 7.7208300353959203e-05, 7.2907379944808781e-05, 6.7644592490978539e-05, 7.9696415923535824e-05, 5.1188995712436736e-05, 5.9217123634880409e-05, 6.0689148085657507e-05, 6.9008339778520167e-05, 6.8855260906275362e-05, 0.00012502119352575392, 6.6089203755836934e-05, 7.9900251876097172e-05, 9.3144946731626987e-05, 5.7542834838386625e-05, 8.9626999397296458e-05, 6.7646309616975486e-05, 6.8671586632262915e-05, 6.181810749694705e-05, 4.8441244871355593e-05, 5.7962788559962064e-05, 7.8819793998263776e-05, 7.0745205448474735e-05, 8.1510479503776878e-05, 6.2918574258219451e-05, 6.4635503804311156e-05, 5.880892786080949e-05, 8.1327001680620015e-05, 7.7988894190639257e-05, 6.4833569922484457e-05, 6.0921865951968357e-05, 4.782260293723084e-05, 5.6221302656922489e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ 11,-39,103,24,75,11,-37,-35,-22,-101,-60,3,38,-8,-6,70,-24,-56,1,-28,-53,-86,4,70,-15,-34,47,4,91,26,21,-32,-1,-24,-71,51,-88,-90,-45,32,-1,-13,-33,71,45,-30,54,-45,-13,15,5,29,-20,-94,-56,66,-24,54,75,-36,-25,52,-70,52,19,28,65,74,52,87,-18,-67,37,-71,45,49,-67,-32,-26,38,58,30,95,-13,-29,-30,-121,33,59,127,26,-46,47,12,29,-50, 
  /* [1][0][][] */ -17,-18,-55,25,-36,31,7,25,40,-27,-96,26,57,-33,23,48,15,-24,-40,89,-37,-51,28,0,-26,40,-7,61,-36,-16,65,-59,4,87,-11,23,23,40,10,-79,-52,-8,24,-40,6,1,9,-31,-46,-53,97,22,-10,6,-42,-41,11,57,56,9,-57,60,-76,-44,-17,15,52,29,63,56,-3,21,-41,19,-4,5,18,-55,-11,72,-31,38,-26,-127,23,11,-88,-64,45,46,54,10,26,39,6,-3, 
  /* [2][0][][] */ 37,30,-30,62,-6,-46,59,71,-112,39,-17,84,67,-40,64,-57,-36,-11,21,43,-67,4,80,24,-23,47,80,14,-42,63,60,64,-42,-5,-53,-89,-48,25,77,-8,-97,-52,24,7,-48,87,0,-47,67,13,64,-127,-20,38,21,18,-98,70,-23,13,-6,45,-36,52,68,39,41,62,-56,46,-3,-41,33,-81,33,9,-30,-38,17,23,31,-96,5,-42,9,-64,-16,-11,61,100,-18,15,-30,-91,-31,-93, 
  /* [3][0][][] */ 84,-13,18,-13,-59,63,-87,-4,69,62,17,-6,60,75,59,-11,100,55,-52,0,75,13,-33,-69,-43,-45,-24,56,35,-54,51,15,-47,-2,9,-42,-82,-49,15,27,2,-84,-60,-8,68,25,6,-58,68,-74,20,-16,32,19,76,-21,-52,-66,-62,-46,-70,21,27,23,29,-6,-67,-28,-12,-20,49,46,8,-77,15,-50,22,127,57,-46,-70,-45,30,25,42,0,17,-92,-85,-3,-21,-69,18,-34,-60,28, 
  /* [4][0][][] */ 73,85,37,68,-4,-7,36,39,68,94,-1,69,45,-40,1,-23,-29,-25,-60,-8,94,-48,66,38,43,10,44,-31,-44,34,-38,-35,70,123,23,-87,-67,-56,-109,46,-45,-33,-71,-60,38,95,87,19,-13,-6,-34,-80,-64,34,-96,33,-47,-69,-7,31,-2,-46,-74,-46,-40,71,-1,6,39,-54,-127,-61,-15,-11,106,39,46,-73,-24,-31,31,-59,-88,-51,38,38,62,-39,-55,-101,50,69,74,56,-81,-59, 
  /* [5][0][][] */ 71,-70,90,65,38,-110,30,55,67,-59,-2,-77,6,57,12,32,30,37,-96,76,30,-1,29,-20,-106,-25,-8,-74,56,41,36,-103,-6,-5,-35,-17,-102,2,55,-11,-38,-11,102,59,-41,40,10,-51,-83,79,24,23,71,31,78,-23,61,27,25,-58,0,-58,43,-28,-20,73,-31,5,42,0,66,-30,-35,107,-28,-29,0,27,22,48,96,-17,59,127,-88,65,40,45,95,-16,67,72,-36,15,81,18, 
  /* [6][0][][] */ 8,-19,104,72,-48,-102,-5,80,-41,-47,37,-35,68,91,105,-61,-5,-18,52,79,-7,-28,84,62,1,-49,22,-63,13,-34,56,-80,-28,-89,-10,-71,22,57,-32,53,85,33,57,-11,-109,113,-53,27,-78,32,-14,-42,82,-6,127,-18,29,-6,8,87,-47,9,92,-29,-22,50,90,-39,56,-20,-45,25,68,-10,-32,5,-52,-109,-27,27,55,-35,76,-3,-31,-4,8,-37,100,123,118,28,10,-20,79,20, 
  /* [7][0][][] */ 99,36,-33,-28,-51,74,-20,-2,99,20,-64,-21,33,-52,30,51,36,11,-46,78,41,7,3,49,-75,77,32,30,-59,59,-13,19,-4,17,35,50,-76,98,-5,-28,65,-42,65,37,36,1,127,-21,52,-38,-67,-34,-22,61,30,11,106,-62,36,-43,-4,-12,63,-80,-42,-38,41,13,-73,27,101,50,52,71,34,34,-44,82,-53,49,52,-3,8,-56,69,36,-72,70,41,-8,47,31,-51,-21,-15,-1, 
  /* [8][0][][] */ 6,30,-52,-49,35,18,-51,16,3,39,31,76,15,-25,-33,-33,-25,93,-51,37,9,26,64,74,-69,78,49,50,-47,5,-69,89,65,-20,37,33,107,33,3,54,43,52,-71,-67,8,-17,23,127,55,-89,-30,5,-53,22,2,-61,50,76,-59,70,78,27,21,62,-8,-36,25,74,-53,62,73,-9,68,42,21,7,-26,82,69,88,15,80,-52,-65,47,55,47,28,-1,-21,-18,55,-39,-43,-61,16, 
  /* [9][0][][] */ 19,33,66,30,35,7,-11,-39,47,10,10,21,-12,31,-28,1,29,-32,14,-27,38,42,-45,-48,127,-1,-2,23,31,8,-10,48,6,8,13,16,-30,34,8,-8,32,-7,11,-39,27,13,-32,42,3,18,2,46,37,-27,-11,44,82,-24,19,18,9,38,72,-15,-11,13,51,33,19,36,50,-24,-11,87,-28,14,2,-18,-3,42,35,59,70,14,1,8,-3,-20,63,36,42,31,84,35,33,55, 
  /* [10][0][][] */ -53,76,87,-47,20,22,102,24,-32,22,45,-39,68,40,-29,25,-15,71,-34,-30,-6,4,57,-16,-14,41,-83,-64,2,83,-38,-67,94,70,104,36,-33,-4,-9,32,10,105,-47,-26,-106,-20,-25,-46,20,28,23,-45,74,46,-19,-14,-85,5,35,-14,-15,58,80,55,87,-35,-53,-15,3,-59,-73,-19,57,26,-52,97,1,68,57,14,65,-32,43,127,-85,68,98,19,54,49,-11,-22,-11,-37,3,-66, 
  /* [11][0][][] */ 76,11,6,58,77,51,34,0,26,43,-29,63,7,-82,32,-37,-14,-60,20,21,17,37,21,-52,-127,-56,-1,55,49,9,31,5,-58,-23,32,23,-46,-3,-5,-15,4,61,-48,12,-10,-37,-71,-70,57,57,77,23,-42,-39,-5,17,-61,-19,-7,-28,-40,62,63,13,30,67,-32,16,64,23,-55,-26,8,42,-54,19,-32,-6,-7,41,-52,-20,-50,9,9,-77,14,-35,-53,0,-38,-41,-47,-34,-12,-74, 
  /* [12][0][][] */ 2,30,-36,9,37,-2,-21,29,-34,65,-8,19,-21,43,26,-46,-55,-16,18,-38,23,20,2,42,33,-1,42,-50,39,1,-22,51,-27,-33,-23,30,10,14,8,16,66,2,-63,-21,-12,-39,4,80,-22,-52,-28,58,10,1,-18,35,47,-31,27,28,25,52,15,20,50,12,-20,52,23,50,44,34,42,105,-8,0,-20,0,-54,-36,-28,56,51,-8,-19,25,30,54,-46,-42,82,17,79,5,18,127, 
  /* [13][0][][] */ 94,-34,79,92,90,127,80,55,28,-47,33,-18,86,-7,71,-39,-75,-30,-121,41,32,-36,114,-40,-108,55,28,42,-65,-60,88,58,35,103,-4,65,-26,-31,59,66,9,84,-12,33,-3,22,-45,-18,46,60,11,-70,-58,56,62,-65,-41,42,16,-45,-1,114,-42,32,-11,-22,-59,66,5,26,99,26,-74,31,-52,-36,-64,89,88,-54,57,-57,75,47,-101,-102,118,111,-8,-42,-114,50,26,-40,88,-9, 
  /* [14][0][][] */ -23,-46,34,49,35,-13,-1,-63,15,-11,32,27,-16,26,-52,-48,-38,-23,36,19,7,3,2,23,59,-1,-19,11,-65,-68,-37,19,50,-4,-21,19,44,86,11,-63,2,-52,39,40,25,-39,28,-45,39,26,36,83,45,-17,10,-9,46,2,36,33,0,-47,31,37,-43,-14,31,-43,-44,-32,-7,46,9,65,28,-17,30,-37,19,18,30,27,-29,-51,-70,-44,-49,12,54,-3,89,-36,25,114,-9,127, 
  /* [15][0][][] */ 18,-9,-20,53,71,-51,56,-79,-5,6,-36,13,80,-51,-57,-69,66,23,-94,24,14,8,58,82,-46,58,29,73,14,41,52,-51,22,20,-29,-17,-41,28,56,-30,24,82,-28,-1,29,-57,-67,-127,3,-54,-1,-37,-54,-58,-33,6,-1,47,-43,78,-25,-27,-17,79,-16,76,-60,14,-34,3,23,-34,26,-86,47,-71,8,43,70,39,-49,-1,-115,-37,-71,-59,-37,-13,45,20,-124,-12,-2,37,-51,21, 
  /* [16][0][][] */ -21,-16,22,-39,8,127,-31,5,60,53,-90,101,-3,-7,-44,-57,73,55,55,29,65,116,-31,22,-11,40,-50,27,-90,-9,7,39,-34,51,32,10,-19,-3,-41,-13,-18,-53,16,76,104,48,51,-39,-52,-109,-21,82,-50,88,69,78,10,59,19,6,94,108,36,33,15,6,-48,62,12,86,-20,-22,51,25,41,36,-6,44,-88,-32,-18,-67,16,-42,67,49,104,-21,5,-29,-6,77,5,-20,-69,21, 
  /* [17][0][][] */ 36,-61,18,79,-13,-84,-28,-81,53,-60,88,4,93,41,-58,53,43,63,19,108,-50,7,34,-25,-17,80,-40,47,96,-33,-25,72,-2,6,50,67,-21,100,-67,-26,-49,-21,12,3,-5,8,62,-72,71,75,3,7,-7,67,22,-44,-26,80,-72,-79,14,-67,72,74,-42,-39,56,-33,-39,16,127,47,29,-119,-35,65,103,4,53,-23,34,2,-76,-55,-67,32,62,-33,14,6,-101,-84,-44,91,8,45, 
  /* [18][0][][] */ -79,82,117,-40,9,-96,-79,11,-3,92,-95,28,-32,2,46,-54,23,-31,-11,-30,84,-14,9,-65,27,-100,-21,98,51,29,7,35,54,-31,-97,-83,-36,58,-57,59,-53,-10,-52,-13,-108,15,60,11,10,0,57,42,-92,-18,-3,95,-51,31,-27,-88,74,95,-12,41,-61,-105,-25,78,55,-42,-85,88,-86,35,-81,-89,45,35,-11,-65,-41,10,-52,-21,114,-37,52,55,-102,-104,-98,103,127,-53,45,-20, 
  /* [19][0][][] */ 25,41,74,31,61,-122,76,89,-19,-54,38,11,-49,16,-15,76,43,-65,106,59,-14,94,-24,35,55,-63,44,-39,-50,-58,-32,23,77,-48,42,-30,17,-70,-24,-57,3,-91,-42,22,-75,49,97,-47,-8,40,-33,-20,-4,10,27,9,-35,90,23,5,41,-32,58,60,-34,12,5,15,-12,28,54,-29,-24,-111,-16,-63,-17,-113,35,115,58,-127,1,60,-33,18,2,24,88,68,14,67,9,56,53,-80, 
  /* [20][0][][] */ -15,37,28,62,-47,50,17,19,52,11,-38,-3,-5,72,18,-54,-27,-18,-41,-15,26,-27,-43,-45,49,-14,-64,24,6,-4,-32,64,65,25,-8,52,23,31,-15,-64,-12,-23,-50,-57,-15,-47,-92,55,-36,-58,-54,76,18,68,26,-7,127,37,43,45,63,-30,-13,-24,-17,-40,-35,11,-43,-41,7,49,-36,-52,11,21,63,56,51,48,48,27,8,-34,20,64,9,41,-1,22,22,31,3,45,10,68, 
  /* [21][0][][] */ 45,30,42,-35,90,23,97,-25,-5,-43,-62,101,8,-10,-68,-94,-22,2,67,-14,29,-12,39,-22,15,-66,-46,59,-2,-27,-1,38,40,4,-72,-27,80,-5,-115,53,-36,11,17,19,9,-72,-127,21,-27,-18,-22,86,11,16,-27,57,-42,62,-70,115,104,-2,-20,18,38,26,-61,-38,-86,44,0,21,20,-54,37,17,-53,-12,2,43,12,107,27,-40,-5,-97,51,-105,-112,21,60,-30,21,-49,57,-43, 
  /* [22][0][][] */ 2,-30,-39,-46,51,-34,78,43,-49,20,-58,-27,56,-42,-82,-19,29,54,-36,-27,42,-64,14,26,87,-2,-67,54,-39,-41,-41,-63,24,24,-3,7,12,15,-35,-59,-8,47,31,55,36,-67,64,15,-34,-87,-9,45,-31,-40,21,22,25,-16,-12,-17,71,-40,-53,-46,-44,4,-58,-9,48,92,-37,-12,-16,54,51,-30,30,-10,6,82,57,-66,-22,-4,89,59,30,-35,-10,13,16,34,-6,32,-31,127, 
  /* [23][0][][] */ 54,-48,25,31,83,-66,12,-59,-11,-85,78,74,24,-116,29,-10,86,-13,-64,75,57,-34,87,-6,-47,-30,72,31,63,50,65,-11,-17,36,26,-1,71,-48,-61,27,-67,9,5,-66,-51,-50,76,28,90,-77,-51,-91,73,-14,-43,74,-127,1,83,60,-65,-50,-17,5,38,41,-66,-75,54,-38,79,-40,-7,-32,-20,-71,39,-9,88,86,-32,-65,17,-18,58,12,95,30,-56,73,35,11,78,-62,-2,-11, 
  /* [24][0][][] */ -27,-35,-52,-8,-43,-67,-34,-39,9,105,58,57,100,43,3,-62,-89,15,6,-23,90,-26,-26,-17,69,8,66,51,67,45,24,-36,16,36,46,24,-39,-52,71,-14,-53,-54,92,21,37,-17,65,38,-118,-6,8,-13,61,42,74,-34,-17,64,47,3,53,16,32,84,-45,82,-24,-35,-43,77,-49,5,4,36,88,75,30,-127,-56,-33,-25,-40,-27,-103,30,54,4,-95,30,-56,16,-30,9,-26,-37,32, 
  /* [25][0][][] */ -50,-28,-45,9,84,-44,-56,34,-1,-88,-9,44,70,-7,-71,-9,-46,59,67,-69,49,100,11,-28,19,-29,-67,44,66,-53,47,101,94,-63,50,56,84,-87,-1,6,-65,86,-69,18,83,42,-10,-66,-76,83,-44,-12,48,-1,-35,27,-45,55,-70,75,100,49,39,53,15,72,-18,6,-55,-3,-35,-66,39,-127,67,20,62,5,25,0,49,11,-46,52,-53,-40,-40,-76,-4,15,79,34,-90,-20,12,-87, 
  /* [26][0][][] */ 24,-43,-13,12,-35,-11,22,-12,-11,-67,79,6,-38,19,-5,8,97,52,-48,6,21,9,77,16,13,85,1,45,47,-8,-54,11,-17,-26,-29,24,-27,107,-41,45,-7,91,38,10,-58,32,-5,107,30,45,10,97,5,-42,-26,-59,127,42,16,12,-4,-68,43,-2,78,-20,10,62,-28,56,104,62,43,-31,-44,25,49,17,-40,42,-3,102,36,-27,69,17,-49,21,-29,32,17,-7,-16,115,25,86, 
  /* [27][0][][] */ 35,20,-32,-52,-27,-45,-13,-9,7,111,25,-93,10,34,82,-37,8,11,58,-14,-42,-45,1,33,-71,66,-62,18,53,33,5,-2,78,75,-23,-27,-78,-52,-67,62,-59,7,1,36,101,2,24,20,112,86,75,-15,-40,-85,1,-16,24,10,-127,-62,-101,-12,-39,48,39,9,-53,59,33,9,-92,50,27,-55,-6,-64,66,88,78,39,52,-15,51,-35,-109,-43,-43,0,-17,12,-41,0,89,-5,92,6, 
  /* [28][0][][] */ 84,7,83,53,-61,-23,-55,-60,-54,-84,54,45,-31,-93,30,99,89,95,-106,72,-23,36,-48,-36,-127,68,-31,-11,-32,-28,18,12,-69,34,71,71,20,-100,-8,32,72,48,-23,51,-68,14,31,38,31,-46,-34,-97,-45,20,15,38,9,13,72,48,2,-14,-51,19,63,70,6,77,-20,48,-35,-15,64,-86,14,-74,-67,-32,-30,63,-29,-54,70,-12,67,-87,54,-68,-57,-23,-46,-36,-91,3,-42,-119, 
  /* [29][0][][] */ 37,48,-4,-17,-46,-30,-78,26,73,38,-41,-39,102,-13,-10,-44,-103,86,83,-20,-35,-1,47,28,56,54,-31,-28,-69,-10,64,-6,108,21,-29,7,15,120,4,73,16,46,-77,62,-15,66,0,12,24,47,46,-66,44,-71,81,43,-4,46,-40,79,-98,66,-69,-30,-31,-49,56,77,62,-67,63,-20,113,48,62,17,76,-55,-6,45,-4,-45,-19,-77,48,127,25,61,-8,73,92,62,2,14,9,67, 
  /* [30][0][][] */ 9,-56,-63,19,-123,8,-71,-19,102,-23,3,-44,-109,8,37,27,-6,29,87,-107,28,-91,-115,-8,-102,9,-73,88,-9,-85,-87,-12,-96,-75,-127,-66,14,-21,-1,-5,85,-52,-22,93,83,-50,82,73,-67,51,11,-103,88,-28,-13,80,-77,-65,-69,-70,-105,-3,-76,-29,-114,-92,-92,70,-64,87,39,-34,-91,98,44,-68,-53,-67,-81,-34,11,11,-100,-14,-70,34,-91,104,-40,-100,72,36,-40,9,-2,-59, 
  /* [31][0][][] */ 88,-62,45,89,52,81,-49,-58,-36,-30,-51,-58,97,-127,-7,106,-24,-65,23,51,54,52,-14,97,6,-86,54,54,-46,-38,54,105,-23,35,-64,6,81,-53,-36,-65,23,-55,-24,42,24,-33,7,48,80,19,97,-34,-83,-54,-71,30,-121,70,17,114,-17,11,79,-52,75,108,-9,-39,79,-63,-84,17,-60,-49,22,-9,-40,-69,64,102,-45,-25,52,36,67,72,-126,27,14,-29,-72,-26,62,60,-13,-118, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0032813528086990118, 0.0030985635239630938, 0.0028748952317982912, 0.0033870975021272898, 0.0021755322813987732, 0.0025167276617139578, 0.0025792887900024652, 0.0029328544624149799, 0.0029263484757393599, 0.0053134006448090076, 0.0028087911196053028, 0.003395760664716363, 0.0039586601778864861, 0.0024455704260617495, 0.0038091472815722227, 0.0028749681077897549, 0.0029185423627495766, 0.0026272693648934364, 0.0020587528124451637, 0.0024634185247123241, 0.0033498411066830158, 0.0030066710896790028, 0.0034641954116523266, 0.0026740392204374075, 0.0027470088098198175, 0.002499379450455308, 0.0034563974477350712, 0.0033145279157906771, 0.0027554268017411232, 0.002589179202914238, 0.0020324606448411942, 0.0023894053883850574, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1192, -162, 2663, 5120, 3487, -2207, 3169, -1225, -1519, -176, 4454, -2048, 3266, 4091, 1271, 1780, -701, -193, -922, 4623, 2047, -259, 2231, -448, 343, 2736, 1203, 1572, 5297, 1666, 4459, 1510, 2154, 3001, 3578, 2684, -482, 5648, 2431, -4158, -369, 1430, -6, 1503, -992, 817, -822, 1012, -5184, 1959, 893, -1072, 4952, -630, 2002, 1060, 2502, 3878, -506, -1343, 281, 1677, 625, 4898, 4822, 2768, 2380, 4356, 3991, -335, 3286, 5463, 3558, -32, 4006, 7155, 1014, -3307, 555, 1056, 6235, 1486, 277, -1558, 586, 1229, 1020, -1284, 3269, -186, 3464, 863, 384, -1331, 365, 3461, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00017669578664936125, 0.0002450104511808604, 0.00021682493388652802, 0.00015381518460344523, 0.00017908238805830479, 0.00018571643158793449, 0.00017984752776101232, 0.0002039555402006954, 0.00020266957290004939, 0.00030864487052895129, 0.00017056097567547113, 0.00020918059453833848, 0.00018077122513204813, 0.00017515051877126098, 0.00023127465101424605, 0.00023778897593729198, 0.000258238724200055, 0.00021243451919872314, 0.0002236732398159802, 0.00013831285468768328, 0.0001853766298154369, 0.00030018464894965291, 0.00017289430252276361, 0.00021242864022497088, 0.0002383068494964391, 0.00025775603717193007, 0.00024313117319252342, 0.00022404828632716089, 0.00014974128862377256, 0.00022129312856122851, 0.00011902829282917082, 0.00018995467689819634, 0.00019226252334192395, 0.00020311516709625721, 0.00018016831018030643, 0.00020104846043977886, 0.00017385208047926426, 0.00015316849749069661, 0.00016495010640937835, 0.00012527847138699144, 0.00022786179033573717, 0.00018251432629767805, 0.00020369063713587821, 0.00017333717551082373, 0.00024745971313677728, 0.00014045673015061766, 0.00021919090067967772, 0.00025196158094331622, 0.00012138468446210027, 0.00017440854571759701, 0.00029436129261739552, 0.00021763007680419832, 0.00015494594117626548, 0.00021819338144268841, 0.00022192444885149598, 0.00020909629529342055, 0.0002038538659689948, 0.00011455857020337135, 0.00031235284404829144, 0.00020315544679760933, 0.00025085158995352685, 0.00017026530986186117, 0.00022328463091980666, 0.00013910177221987396, 0.00013613433111459017, 0.00017405538528691977, 0.00021336898498702794, 0.00017221833695657551, 0.00014669515076093376, 0.00022920391347724944, 0.00019838754087686539, 0.00012559068272821605, 0.00013584001862909645, 0.00022620106756221503, 0.00017233795369975269, 0.00012004622840322554, 0.00016023239004425704, 0.00018299033399671316, 0.00023611157666891813, 0.00021464476594701409, 0.0001441525382688269, 0.00021971204841975123, 0.00028590718284249306, 0.00020386540563777089, 0.00027862063143402338, 0.00018771993927657604, 0.00029876234475523233, 0.00027387792943045497, 0.00023002787202131003, 0.00028416549321264029, 0.00020787703397218138, 0.00023177108960226178, 0.00019510449783410877, 0.00018304272089153528, 0.00031001828028820455, 0.0001883546938188374, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -21,89,-105,30,33,-51,119,57,-40,22,61,-88,89,127,-98,42, 
  /* [1][0][][] */ -17,15,-60,-35,0,47,15,-127,53,-22,-30,-64,-16,-62,-65,5, 
  /* [2][0][][] */ -17,-28,39,90,15,43,-127,105,-46,-4,81,-72,-8,-78,-40,70, 
  /* [3][0][][] */ 76,-93,62,6,-17,-41,-24,127,-25,54,79,30,3,37,-7,19, 
  /* [4][0][][] */ -43,-26,-36,65,-122,12,-36,-97,-28,-25,54,0,39,33,93,127, 
  /* [5][0][][] */ 127,27,-36,-28,-78,26,33,80,29,-2,64,95,108,24,-82,5, 
  /* [6][0][][] */ 23,-51,-50,-39,-110,2,3,-77,-42,-82,-26,15,102,42,127,7, 
  /* [7][0][][] */ -62,29,-25,-66,-12,-77,-76,31,-97,43,-104,-72,-127,-63,33,118, 
  /* [8][0][][] */ 39,44,74,16,41,22,77,23,53,-36,40,10,-127,-23,-83,13, 
  /* [9][0][][] */ -62,69,14,-38,-44,-18,28,13,-26,22,-35,-7,70,127,20,52, 
  /* [10][0][][] */ 78,35,-38,38,-36,-29,80,-85,-73,2,-35,-124,-127,-102,5,82, 
  /* [11][0][][] */ 47,0,40,18,-17,-29,23,106,-103,14,-7,20,1,-14,38,127, 
  /* [12][0][][] */ -55,-31,-4,-7,2,-8,127,44,-36,14,19,-26,2,72,-54,116, 
  /* [13][0][][] */ 43,40,24,84,106,14,87,127,-19,101,-112,-73,40,88,-89,-45, 
  /* [14][0][][] */ -127,118,10,-15,-23,-20,70,-9,5,49,118,-14,-82,26,-82,67, 
  /* [15][0][][] */ -18,-22,-127,-31,72,-53,-81,-18,-26,-10,2,-65,-4,-85,-53,37, 
  /* [16][0][][] */ 114,-37,4,-8,60,-31,57,-31,-38,9,127,56,68,39,-48,-7, 
  /* [17][0][][] */ 17,-2,-12,-105,6,-45,127,-112,-34,-46,-62,48,56,96,41,30, 
  /* [18][0][][] */ 14,127,-13,-30,60,-72,-49,-55,-33,71,-29,-26,11,46,-20,-50, 
  /* [19][0][][] */ -65,-95,94,-81,31,-127,31,-31,62,57,83,68,27,-21,29,-11, 
  /* [20][0][][] */ -5,104,65,4,8,7,32,-30,60,-8,115,-12,-127,-27,-103,-2, 
  /* [21][0][][] */ -53,35,12,15,51,17,83,42,-127,29,-31,12,7,12,-96,-14, 
  /* [22][0][][] */ 10,-101,35,0,2,-127,115,-3,5,-57,-31,-65,29,-75,-48,-36, 
  /* [23][0][][] */ -63,-84,8,16,34,-19,21,-26,34,-17,46,4,-1,59,52,127, 
  /* [24][0][][] */ 0,19,32,89,49,28,-45,-127,61,7,-19,-20,39,4,0,-50, 
  /* [25][0][][] */ -15,16,12,-81,-29,-8,32,-57,-26,55,-37,11,26,127,21,10, 
  /* [26][0][][] */ -74,83,2,26,28,-82,-23,-25,22,36,19,53,9,-17,-80,127, 
  /* [27][0][][] */ -13,-127,-76,-12,-73,90,9,-36,16,-28,84,3,29,-29,-121,-17, 
  /* [28][0][][] */ -40,-4,28,99,9,5,-39,-127,-127,41,123,-21,67,-5,-32,-27, 
  /* [29][0][][] */ -127,94,-14,-9,-21,12,-120,-56,-35,-37,-5,-16,10,-41,-62,52, 
  /* [30][0][][] */ 42,68,-59,71,-127,-106,-64,9,-20,-11,13,-100,121,25,-24,108, 
  /* [31][0][][] */ 127,25,-83,-34,-67,18,124,40,-35,17,73,88,-12,2,-57,24, 
  /* [32][0][][] */ -52,-53,127,0,-57,59,113,15,-40,-11,4,39,8,58,99,56, 
  /* [33][0][][] */ 19,15,-63,-73,-49,29,103,42,18,-13,21,-52,84,127,-52,39, 
  /* [34][0][][] */ -54,-8,98,3,22,-32,102,-11,-127,19,14,-45,44,49,-63,-28, 
  /* [35][0][][] */ 20,8,-70,21,-93,92,-20,-26,-14,127,25,73,-34,29,-19,34, 
  /* [36][0][][] */ -14,-99,127,-71,-55,18,-21,-18,-4,26,-55,114,-17,-104,-33,72, 
  /* [37][0][][] */ 113,-2,39,-49,122,-66,-3,0,-52,127,-63,-5,-123,-29,125,-9, 
  /* [38][0][][] */ 28,11,34,-92,-27,-76,-92,81,-61,46,-127,-75,-35,-116,-113,92, 
  /* [39][0][][] */ -67,25,-44,-12,-98,-74,80,-17,-127,-23,37,65,21,3,23,26, 
  /* [40][0][][] */ 127,57,11,-64,-45,29,-16,-29,-12,2,-47,-63,7,86,18,15, 
  /* [41][0][][] */ 96,-88,-63,-54,-33,-11,-41,-35,43,-47,24,-74,127,-112,44,-27, 
  /* [42][0][][] */ -1,-93,-38,127,15,-106,-112,34,19,28,3,58,-85,59,-49,-6, 
  /* [43][0][][] */ -87,-40,-64,-103,-56,-8,-16,87,40,-127,-26,24,1,-23,-30,64, 
  /* [44][0][][] */ -22,39,-6,-43,-25,11,35,127,93,-61,67,106,104,57,-18,-5, 
  /* [45][0][][] */ 27,74,-84,102,127,-107,-41,-49,126,-70,54,-80,-15,-7,-89,72, 
  /* [46][0][][] */ -40,-72,-27,-28,127,-47,38,25,-39,92,-20,-111,52,77,-74,109, 
  /* [47][0][][] */ 86,-39,-41,-20,70,-2,-25,-52,-7,127,-20,42,-27,-103,-64,27, 
  /* [48][0][][] */ -2,18,-28,-91,-4,-55,127,-92,18,22,-8,56,16,42,-24,41, 
  /* [49][0][][] */ -48,82,-87,23,-7,-70,84,46,-35,-18,50,-127,-3,37,120,-61, 
  /* [50][0][][] */ 0,36,-25,-8,-127,-8,-60,-40,60,62,36,14,-27,-20,-9,38, 
  /* [51][0][][] */ 127,-32,-35,2,-42,68,-83,-48,50,-39,-26,63,-37,-106,-22,59, 
  /* [52][0][][] */ -12,-22,56,83,-33,-78,-127,-4,-51,-41,-60,-79,9,-48,43,53, 
  /* [53][0][][] */ 31,90,66,-127,-2,88,104,23,-21,-54,-20,-34,84,-78,-3,50, 
  /* [54][0][][] */ 42,110,39,-27,-8,-96,-71,56,3,-25,-63,127,95,97,4,72, 
  /* [55][0][][] */ -48,22,31,72,54,5,68,99,-120,-34,44,6,127,46,-23,5, 
  /* [56][0][][] */ 127,43,17,-4,-35,84,-39,-61,-7,50,-66,3,-51,81,-25,27, 
  /* [57][0][][] */ -63,-61,-84,-51,-92,-123,85,-9,-127,-35,48,71,-10,28,-8,65, 
  /* [58][0][][] */ 49,-50,52,20,13,-66,-27,10,39,9,-127,-39,28,-30,-39,41, 
  /* [59][0][][] */ 53,-1,-123,58,-10,25,103,0,-81,-32,13,-67,-110,-60,23,127, 
  /* [60][0][][] */ 12,25,-3,9,-24,-17,-18,30,-39,-87,39,127,-28,-103,-21,-8, 
  /* [61][0][][] */ -29,24,58,-74,-115,38,13,127,7,-63,54,62,65,-6,-29,107, 
  /* [62][0][][] */ 95,83,14,-121,-21,-2,11,-57,2,29,-36,25,48,-32,-127,-77, 
  /* [63][0][][] */ -10,-40,-11,-9,-88,-87,-49,11,-94,-25,-28,-14,127,0,46,-7, 
  /* [64][0][][] */ 9,-3,-40,45,-127,-39,-15,-101,20,100,75,-1,30,-58,-54,112, 
  /* [65][0][][] */ -45,3,-31,-5,-92,71,22,-8,56,-112,110,-66,69,63,-127,76, 
  /* [66][0][][] */ -127,79,-71,-79,43,-30,-104,-36,-94,100,56,13,-101,-56,27,56, 
  /* [67][0][][] */ -3,-33,-127,-113,53,65,14,-10,-16,5,49,-16,29,36,7,46, 
  /* [68][0][][] */ 56,41,-1,-32,-68,47,2,52,-53,82,127,-48,-11,-45,-119,-6, 
  /* [69][0][][] */ 48,-89,7,-31,4,-78,-29,127,6,29,58,64,10,36,-25,1, 
  /* [70][0][][] */ 23,-6,101,31,62,-42,127,5,16,24,-50,55,-48,36,-101,44, 
  /* [71][0][][] */ 17,38,114,-94,-127,-74,11,-11,-11,-4,15,-107,-99,18,18,27, 
  /* [72][0][][] */ -71,-111,29,-127,79,1,36,19,-89,6,-110,-1,29,120,-40,126, 
  /* [73][0][][] */ -23,-17,20,-30,119,-98,-22,-22,-2,127,-105,27,-59,-68,111,6, 
  /* [74][0][][] */ -89,3,-127,-69,68,-11,-46,48,-83,-14,-127,-20,-23,-7,-34,75, 
  /* [75][0][][] */ 97,-21,15,-42,18,15,-127,-3,-19,-84,88,-8,-1,1,10,-18, 
  /* [76][0][][] */ 6,-65,4,92,51,85,87,-92,83,-127,26,59,27,-62,13,14, 
  /* [77][0][][] */ -28,-41,127,-21,0,-51,21,-118,5,-1,66,95,30,60,22,9, 
  /* [78][0][][] */ -58,-10,2,-38,-21,-66,49,-27,10,-27,35,-83,-93,-77,-127,-38, 
  /* [79][0][][] */ -125,-96,-49,1,127,22,-12,-17,-7,21,18,65,-39,-75,-75,-5, 
  /* [80][0][][] */ -6,-108,58,127,-31,-37,-117,38,-16,6,39,-19,-61,-18,8,53, 
  /* [81][0][][] */ 125,66,-25,80,8,46,5,126,36,54,127,48,91,35,58,-42, 
  /* [82][0][][] */ -55,14,30,-5,14,-127,-86,-47,8,60,-42,-33,3,59,-61,-14, 
  /* [83][0][][] */ 63,-34,60,-19,-73,-51,-98,35,-2,-127,39,-91,28,-56,4,12, 
  /* [84][0][][] */ 38,-34,-107,6,127,31,52,57,-90,43,-69,-14,44,-45,-95,46, 
  /* [85][0][][] */ -11,56,-2,-70,106,19,58,-96,107,-15,35,6,127,-87,23,20, 
  /* [86][0][][] */ 127,-43,123,18,-18,-59,97,51,-76,-58,-87,-30,45,14,-65,22, 
  /* [87][0][][] */ -10,-7,17,-70,56,-27,-32,-11,16,-28,58,-21,-84,-127,10,20, 
  /* [88][0][][] */ -72,-42,18,9,4,5,-62,-26,-5,11,-66,-127,-25,-65,-31,0, 
  /* [89][0][][] */ -69,30,10,-50,31,-9,-127,21,50,1,-56,-14,-13,-63,-51,-28, 
  /* [90][0][][] */ 10,15,-9,-61,127,21,-78,25,38,52,7,-32,37,15,-61,-44, 
  /* [91][0][][] */ -23,-45,47,49,-22,18,-20,82,-55,-58,-16,-36,-5,78,41,127, 
  /* [92][0][][] */ -67,93,-13,-10,-42,81,-116,97,-39,-1,127,-26,9,120,87,57, 
  /* [93][0][][] */ 5,73,-22,-46,35,83,-89,19,30,31,59,48,-127,19,-28,63, 
  /* [94][0][][] */ 6,24,41,3,-127,-47,12,-2,7,-3,52,-14,-22,-24,13,-4, 
  /* [95][0][][] */ 8,29,63,-25,96,22,-2,84,12,58,-79,108,-46,33,127,-51, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0023485973943024874, 0.0032566194422543049, 0.0028819842264056206, 0.0020444740075618029, 0.0023803196381777525, 0.0024684977252036333, 0.0023904896806925535, 0.0027109275106340647, 0.0026938347145915031, 0.0041024326346814632, 0.0022670549806207418, 0.0027803776320070028, 0.0024027670733630657, 0.0023280580062419176, 0.0030740464571863413, 0.0031606331467628479, 0.0034324461594223976, 0.002823628019541502, 0.0029730102978646755, 0.0018384208669885993, 0.0024639810435473919, 0.0039899814873933792, 0.0022980689536780119, 0.0028235497884452343, 0.0031675167847424746, 0.0034260305110365152, 0.0032316404394805431, 0.0029779954347759485, 0.0019903248175978661, 0.002941374434158206, 0.0015820951666682959, 0.0025248313322663307, 0.002555506769567728, 0.0026997574605047703, 0.0023947532754391432, 0.0026722871698439121, 0.0023107996676117182, 0.0020358783658593893, 0.0021924767643213272, 0.0016651710029691458, 0.0030286835972219706, 0.0024259360507130623, 0.0027074064128100872, 0.0023039556108415127, 0.0032891745213419199, 0.0018669166602194309, 0.0029134321957826614, 0.0033490119967609644, 0.0016134156612679362, 0.0023181959986686707, 0.0039125788025557995, 0.002892686054110527, 0.0020595036912709475, 0.0029001734219491482, 0.0029497658833861351, 0.0027792570181190968, 0.002709575928747654, 0.0015226847026497126, 0.0041517182253301144, 0.0027002927381545305, 0.0033342584501951933, 0.0022631250321865082, 0.0029678449500352144, 0.0018489069771021605, 0.0018094644183292985, 0.002313501900061965, 0.0028360486030578613, 0.0022890842519700527, 0.0019498362671583891, 0.0030465226154774427, 0.0026369190309196711, 0.0016693208599463105, 0.0018055523978546262, 0.0030066096223890781, 0.002290674252435565, 0.0015956253046169877, 0.0021297698840498924, 0.0024322629906237125, 0.0031383377499878407, 0.00285300612449646, 0.0019160404335707426, 0.0029203591402620077, 0.003800208680331707, 0.0027097293641418219, 0.0037033576518297195, 0.0024951277300715446, 0.0039710765704512596, 0.003640318987891078, 0.0030574745032936335, 0.0037770585622638464, 0.0027630510739982128, 0.003080644877627492, 0.0025932814460247755, 0.0024329593870788813, 0.0041206874884665012, 0.0025035648141056299, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 8793, 17318, -8309, -5772, 179, 3564, 7419, -199, 18469, 4484, -1173, 432, -13894, 13935, -5831, 15295, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 7.044933590805158e-05, 6.7775450588669628e-05, 8.2865204603876919e-05, 8.0295751104131341e-05, 0.00010448382090544328, 0.00010716130054788664, 9.0847141109406948e-05, 7.4877585575450212e-05, 8.6653497419320047e-05, 8.943982538767159e-05, 8.9296110672876239e-05, 5.7760989875532687e-05, 7.6268443081062287e-05, 8.6091487901285291e-05, 8.1299316661898047e-05, 8.0904996138997376e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -127,80,68,13,-113,-25,-76,39,-107,-10,-1,-6,36,45,11,-47,35,1,117,18,-13,-79,127,75,94,34,7,50,-74,-126,-39,10,-48,-54,61,-9,13,-1,-3,49,13,22,-80,27,-87,-16,-39,93,-9,-22,-118,1,-25,15,36,-41,-82,32,17,60,51,36,-8,-24,-45,-81,-16,15,-122,-29,30,62,-46,-10,-50,-52,-46,4,-28,-21,-35,84,122,-74,-14,73,33,105,23,-53,-9,25,-43,-36,-58,11, 
  /* [1][0][][] */ 86,44,28,-45,-43,7,2,11,-43,19,95,-25,21,-15,-92,-29,-7,-20,-75,37,3,-61,65,29,-13,-68,11,-73,62,-90,95,-67,15,62,-7,127,79,81,-34,-77,5,12,34,-50,-42,60,-127,-72,-66,-34,8,-25,45,-77,-27,58,33,-8,-58,-26,77,46,-13,-101,1,8,-75,-18,13,4,-54,-56,-74,-28,-6,-118,3,32,11,-40,-22,-28,-67,-36,7,-50,-33,59,-74,-13,-95,15,26,57,-64,60, 
  /* [2][0][][] */ 83,-2,-20,25,7,-41,33,32,-34,-32,-2,-27,-51,-4,-1,-39,-79,-26,7,37,-2,-55,-58,63,17,-59,10,20,-29,60,-70,118,-68,126,-9,16,17,-28,-30,-20,-127,107,49,70,-44,30,-17,-24,38,18,-27,-35,48,0,-4,54,35,6,27,17,16,7,-2,11,72,23,-17,-3,20,90,-13,15,47,42,75,18,37,-79,84,37,79,-15,-31,49,-36,-17,-2,103,71,-2,-23,19,-61,54,-52,34, 
  /* [3][0][][] */ -7,-3,-43,0,47,-27,5,-53,-4,46,50,61,-1,13,-60,42,33,-14,42,5,-6,127,46,-47,35,4,-52,18,69,-56,43,4,-3,27,-27,-45,-19,67,57,19,-72,-24,-38,85,-8,51,22,-29,1,-52,21,-21,65,-86,-25,-48,17,65,-23,19,3,-18,-23,11,47,35,-52,-1,13,12,2,-30,-19,-41,42,-23,22,-6,-12,-13,-38,3,-35,14,-17,-51,29,-43,0,55,46,-17,57,25,-93,74, 
  /* [4][0][][] */ 25,35,-47,-2,26,33,-45,6,-16,83,127,-26,28,-35,-20,-50,5,-17,-39,30,-4,-19,60,71,-44,0,-113,15,-42,-60,-14,22,-90,-39,38,72,-10,65,-2,40,-34,-62,59,-61,-50,12,-34,81,-22,30,-3,28,39,-4,-54,2,71,-11,-1,-23,60,-28,7,18,-54,20,-41,13,-69,51,-49,34,21,-64,-35,-70,26,-69,-16,52,-33,92,-49,15,-51,46,34,-78,81,-11,-16,73,-52,-13,100,6, 
  /* [5][0][][] */ -64,16,27,-19,59,-46,50,-40,-6,27,21,4,50,-47,-25,-31,29,-33,34,31,-93,-29,-43,3,-6,-41,20,4,32,-62,0,50,39,113,5,79,-23,43,49,-29,-10,68,80,-50,-13,63,62,19,12,28,-40,26,17,-57,22,-66,72,-50,-39,-54,127,112,-46,-13,82,-69,-57,-65,-78,-36,-64,25,-43,-3,-12,-51,17,-10,-67,-10,80,8,43,-73,-102,67,56,2,-39,32,-3,26,-3,52,13,54, 
  /* [6][0][][] */ -8,13,-49,53,-62,-103,62,102,-74,24,-43,10,-71,-73,49,32,-14,-43,-5,11,-7,-41,-60,-65,-39,57,66,20,26,26,83,-60,47,-6,26,-45,21,-30,26,71,8,13,-63,-47,14,-74,-86,34,12,-89,-32,91,-12,23,-19,-35,33,26,31,-15,-127,32,-96,-7,7,7,6,53,-15,48,-1,-14,-22,37,68,40,41,-24,58,-89,7,-60,-58,43,0,-44,30,24,-35,19,27,39,-23,-7,-9,80, 
  /* [7][0][][] */ 20,73,-9,0,-2,-7,34,-41,-38,-6,-12,-2,-29,3,-1,-22,-5,-80,-58,64,12,127,26,44,1,-30,-8,37,25,46,72,-29,67,22,-11,24,-6,-43,18,14,-76,-3,27,-67,10,-61,106,-26,6,-20,-79,-39,-35,-3,7,4,26,9,-53,-6,5,106,20,-19,-9,-28,-45,45,-28,-62,-54,31,18,49,-29,38,-52,57,30,-36,-26,-72,48,-74,86,-10,15,7,-29,84,-67,9,68,-53,-59,27, 
  /* [8][0][][] */ 9,74,-39,38,-31,-34,-77,24,-105,-25,26,55,-6,11,18,109,32,-62,27,16,36,0,-6,-20,-40,50,-1,14,-38,-36,-45,-41,-53,-58,-13,-10,1,62,28,-12,13,-44,60,20,-93,-27,42,10,-12,-54,25,85,-19,-29,-90,114,-14,51,3,-49,-38,31,-2,63,-23,-75,-35,-16,-40,23,-7,29,-71,-67,-127,-56,-70,41,-121,-23,-17,43,-47,-53,-34,15,28,33,2,46,-34,12,-117,-120,47,-81, 
  /* [9][0][][] */ -17,20,-76,46,-49,-54,42,55,-35,31,10,127,-3,-31,17,99,20,14,35,-35,3,8,61,-104,-8,-6,23,-24,22,-23,45,24,-61,9,19,-40,44,-8,-35,-13,-7,-16,48,-61,-61,11,-2,35,35,77,16,4,-66,-75,5,-7,5,-21,63,-31,-34,49,-50,-24,46,14,-5,8,-54,24,36,17,-16,40,-56,-65,-28,24,-53,12,50,3,66,-15,18,-10,-22,-29,-63,6,1,48,47,7,-5,-42, 
  /* [10][0][][] */ 35,-8,-12,15,-21,-53,74,-2,-5,-30,-43,-6,-87,2,13,-2,-50,-15,1,9,38,43,40,-25,-57,52,26,-11,-67,-67,-19,-6,76,-33,22,-12,58,-85,86,127,24,-61,-1,9,-11,-98,-24,15,10,79,-47,-27,-21,16,17,27,-2,-77,84,73,-28,53,-56,-12,-24,-18,25,48,20,-16,-38,38,91,25,-7,-52,23,-37,65,-19,-34,4,30,-2,-51,16,2,29,-75,6,34,30,63,23,-54,7, 
  /* [11][0][][] */ -53,-33,80,-66,-12,-51,-48,-58,51,-34,62,8,54,-31,-9,6,-16,-26,38,23,-75,-19,-64,-56,71,-1,-46,22,15,-74,77,-39,34,-1,38,34,-48,-2,-102,7,-63,51,-63,38,8,-8,-3,-23,27,-30,-101,-62,32,16,63,-57,1,-12,37,-66,35,-5,-29,-127,-9,-104,90,91,53,-15,76,13,-56,-39,75,-36,81,35,27,48,27,-24,-11,55,73,86,54,-26,-44,-88,8,64,34,60,115,48, 
  /* [12][0][][] */ 22,-11,15,-17,39,99,8,29,38,53,-45,0,-9,55,44,5,-60,39,13,46,127,17,65,-92,0,13,-51,-49,-17,87,28,8,66,-15,-7,-65,10,-23,-14,-22,17,-22,36,28,10,25,0,-24,-69,30,10,48,5,-16,21,28,-64,28,14,53,26,-77,-2,-96,-34,113,-15,-25,-28,-65,64,-17,9,14,-33,78,-6,57,-67,-34,-24,7,106,34,-6,81,-39,-56,43,2,-102,3,84,-3,-41,-52, 
  /* [13][0][][] */ -43,13,-4,-12,-5,-50,43,-22,-13,-84,-84,-108,61,-122,-34,-72,-19,-46,-53,-12,-33,4,26,78,-54,18,98,16,-2,-33,69,22,-13,6,-106,127,-3,-29,50,-68,100,-18,6,-5,-65,-99,89,-36,48,-1,-47,41,76,6,5,69,59,-80,4,26,39,29,-28,-70,-17,33,-63,26,-63,-4,-35,-1,-84,37,-84,-43,-115,49,-4,80,-22,10,37,-41,55,5,33,35,-26,-30,-48,-28,-7,12,-11,-28, 
  /* [14][0][][] */ -38,-19,-114,-47,117,54,-109,17,34,-43,105,3,38,-56,-76,-117,-34,85,60,120,47,-67,-61,17,22,-1,-53,87,35,-68,-1,5,69,33,-24,-33,-1,78,81,6,78,34,-36,61,53,-53,126,-58,64,-62,-5,-28,113,33,-53,11,43,102,-114,31,-3,-53,-41,-127,73,-107,-51,-7,-91,51,-54,106,-51,-48,39,-9,71,25,-72,-74,25,60,-5,-23,-27,75,10,-45,-14,85,123,41,-32,-12,-25,-78, 
  /* [15][0][][] */ -55,-53,69,-47,28,-22,-24,-106,41,19,5,86,-31,-9,66,92,-127,-53,-12,-64,40,-21,-4,-24,38,-9,38,-79,-64,-91,-71,19,-32,35,59,-73,-19,-61,25,-51,-18,-6,41,-40,6,-41,48,94,-74,38,30,-91,-32,28,-1,-67,-118,-29,74,-15,-53,12,-76,16,-68,-3,-9,29,62,-120,89,-57,110,-19,-37,-18,25,9,66,16,-26,33,17,13,41,-45,-102,-17,-43,-14,-76,16,60,-36,-18,68, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0029940966051071882, 0.0028804566245526075, 0.0035217711701989174, 0.0034125694073736668, 0.0044405623339116573, 0.004554355051368475, 0.0038610035553574562, 0.0031822973396629095, 0.0036827735602855682, 0.0038011923898011446, 0.0037950845435261726, 0.0024548419751226902, 0.0032414088491350412, 0.0036588881630450487, 0.0034552209544926882, 0.00343846227042377, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -3043, -323, -7069, -4484, -2345, 2650, -3820, -512, -2210, -2798, 8401, -1233, -677, 19537, 9312, -4552, 11420, -3601, -5698, -12, -7507, -5710, 2445, -3932, 704, -1010, -3709, -2661, 3970, -5023, 1258, 1232, 11385, -2977, -5948, 65, -4768, -3187, -1910, 5927, -4366, 25, -2541, -6195, 14156, 10199, 8341, 10526, -1489, 8138, 10425, -5365, -2058, -3422, -3943, 5832, -2565, -984, 10223, 3858, 19066, 12204, 12322, -7698, 2697, -72, -2531, 1086, -5058, -1190, 4177, 4183, 13405, 1529, -4545, 9952, -1162, -7203, 12248, 2537, -2424, 11939, 363, 3977, 16427, -3472, -8052, -3560, -1106, -4195, 26902, 241, -5003, -1449, -616, -5598, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00028331295470707119, 0.00018225406529381871, 7.543418905697763e-05, 0.00014638600987382233, 0.00018854750669561327, 0.00039828012813813984, 0.00030283423257060349, 0.00026632033404894173, 0.00016089413838926703, 0.00014662751345895231, 0.0001539532677270472, 0.00038509871228598058, 0.00026669187354855239, 9.4705828814767301e-05, 0.00014856299094390124, 0.00016829516971483827, 0.00011211811215616763, 0.00027557768044061959, 0.00013039587065577507, 0.00010947237751679495, 0.00016560245421715081, 0.00025304182781837881, 0.00030084970057941973, 0.00015910070214886218, 0.00061135028954595327, 0.00015347842418123037, 0.00023347600654233247, 0.00014383028610609472, 0.00012868376506958157, 0.0001402362686349079, 0.00062258058460429311, 0.0001765814668033272, 0.00020036495698150247, 0.00013913113798480481, 0.0001815984578570351, 0.00022044121578801423, 0.00011939925025217235, 0.00019854363927152008, 0.00028845190536230803, 0.00011975583765888587, 0.00012937832798343152, 0.00018098938744515181, 0.00015775824431329966, 9.6284187748096883e-05, 0.00012611766578629613, 0.00014910762547515333, 0.0001559246884426102, 0.00014758479665033519, 0.00018433593504596502, 9.7871634352486581e-05, 0.00016529280401300639, 0.00012678076745942235, 0.0001755249104462564, 0.00020457961363717914, 0.00017284491332247853, 0.00016980218060780317, 0.00018193619325757027, 0.00019230677571613342, 0.0001483982487116009, 0.00013006743392907083, 7.9964491305872798e-05, 0.00014653227117378265, 9.9874203442595899e-05, 0.00012100538879167289, 0.00012871051148977131, 0.00031780422432348132, 0.00020039806258864701, 0.00031767640030011535, 0.00021599457249976695, 0.00028636428760364652, 0.00021831989579368383, 0.00014848455612082034, 0.00011585062748054042, 0.00023147829051595181, 0.00025819923030212522, 0.00017943824059329927, 0.00010422024934086949, 0.00014553168148268014, 0.00014760311751160771, 0.00019602983957156539, 0.00027344259433448315, 0.00010538582864683121, 0.00019822688773274422, 0.00016074421000666916, 0.00012417882680892944, 0.00016838207375258207, 8.7984815763775259e-05, 0.00024861397105269134, 0.00031032878905534744, 0.00017212642705999315, 5.706525917048566e-05, 0.00044430181151255965, 0.00026631870423443615, 0.00025839527370408177, 0.00063291453989222646, 0.00025271665072068572, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 15,77,59,-13,-41,15,56,29,98,-82,-81,61,-14,-66,-37,0,-106,30,76,44,56,69,62,98,24,-64,-23,91,-20,38,7,-5,-49,41,-16,123,5,37,19,13,30,-82,57,49,-84,-53,-18,23,-40,-90,-5,4,74,34,10,27,-57,-56,-80,-127,-117,-10,-127,11,-90,35,-19,-27,-12,43,23,2,-69,22,39,-18,63,-12,-69,22,0,-127,68,-38,-1,-41,-36,43,-47,0,-127,36,55,13,36,21, -26,-42,-2,76,-16,63,-13,9,127,30,-19,86,-14,-68,-127,123,-127,64,68,116,127,27,75,71,14,-34,33,104,-5,127,-9,-125,6,127,38,80,85,83,5,-42,127,-19,105,90,-25,-127,127,-127,-25,-127,-77,-48,29,127,4,-127,34,31,-127,-76,-114,-122,-66,116,-30,58,107,-13,9,127,127,-34,-92,3,-14,-127,96,-33,19,127,2,-37,127,-69,-114,-61,22,104,45,40,-86,-19,127,-5,127,31, 29,-53,79,26,-45,11,-4,35,65,37,-34,12,-1,-28,-21,-49,-17,28,61,31,57,63,21,127,39,-79,29,34,3,20,-5,-66,-44,-71,-15,87,43,24,20,3,20,53,69,36,-48,-37,-27,48,-5,-105,30,9,92,5,44,35,86,-75,-22,-83,-112,30,-99,19,35,25,-111,-1,-17,28,16,1,-29,-35,18,-26,75,10,-84,21,-3,-84,49,-25,18,-48,-43,41,-68,-10,-112,40,21,48,21,11, 
  /* [0][1][][] */ 76,-15,71,127,1,-58,127,4,-18,-127,-40,127,-16,-127,-94,71,-93,-16,75,20,-98,23,-96,-45,-23,73,-108,127,-98,52,83,68,6,94,28,106,-108,45,-2,-44,111,-127,25,127,-127,-30,-35,-91,-97,-51,-127,32,127,-28,118,9,-127,13,-42,24,-127,-65,-30,43,-127,-15,127,-45,-49,36,-71,-127,-127,53,127,-54,127,113,-127,-62,127,-100,-61,127,-91,9,69,98,-21,10,-117,28,1,-75,69,9, -127,-1,-53,74,-50,-127,-117,-127,62,33,46,38,-103,5,-53,127,-98,-127,127,127,50,-127,-127,78,-127,127,42,107,-101,15,-127,47,-127,58,127,-127,40,127,127,-31,-62,31,12,102,52,-83,-104,-84,15,-79,-68,127,89,63,99,-58,19,66,73,3,-101,-43,-90,127,7,-127,123,127,39,-3,-76,-94,-58,37,-85,4,110,127,39,-91,-88,9,-114,113,-127,-58,127,127,127,127,-61,-127,-49,-53,43,127, 61,13,86,107,-26,-20,7,22,-39,122,-46,71,3,-75,-77,62,-19,-5,45,43,-78,41,-32,-92,-20,38,127,0,127,56,44,-127,-4,-104,3,96,-127,31,-24,-38,34,86,15,93,-61,12,-20,-44,127,-47,-91,-7,92,-30,-127,13,54,-6,-73,98,-94,-63,-36,39,123,-15,-35,-3,-47,15,-50,-108,-119,-127,33,-86,57,51,-111,-31,-39,-30,-40,88,-88,27,35,70,-41,-27,-90,37,0,127,37,12, 
  /* [0][2][][] */ 49,-127,104,-25,79,26,30,48,-79,-80,-73,-55,9,-106,-42,-5,34,44,12,38,42,54,8,43,-3,46,-27,-9,-70,-18,-12,-29,-19,-39,0,12,110,14,4,-59,30,-6,-17,20,-90,4,-91,-12,-16,51,-12,81,21,1,-39,18,-34,6,31,45,-124,5,5,-8,-48,45,-47,-27,35,-8,-24,114,-1,13,27,-11,-111,-7,-48,-24,37,-46,-17,-52,-43,91,80,32,-65,6,-79,22,7,-5,37,-12, -3,7,127,-11,127,39,-6,60,-107,23,-127,-95,127,-104,-17,-18,93,82,11,-24,71,44,18,87,50,-125,-5,49,-77,41,-19,-14,-38,41,33,13,87,18,13,-127,18,-13,-127,-1,-36,-21,-68,-70,-15,-48,-5,67,53,-29,-30,-90,10,127,2,-1,-64,-127,44,36,-59,25,-3,0,127,20,-7,68,-63,0,-9,-85,-24,-36,-25,-56,13,1,-57,-93,-82,127,109,88,100,75,-51,30,2,-17,57,-13, 34,82,77,2,56,21,10,45,-46,60,-47,-28,30,-120,-42,32,2,30,-7,37,12,40,-4,-20,-24,-25,6,-9,-44,-1,5,-99,-35,-47,-2,7,72,12,5,-42,32,24,4,42,-107,15,-62,-3,66,65,-4,85,21,2,-4,36,14,-36,7,100,-120,0,-40,-20,46,36,-107,-5,49,-12,-20,103,30,-25,22,-26,-85,29,-22,-38,-3,-66,0,-47,13,77,91,14,-45,-26,-51,22,8,2,-22,-12, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.012065909802913666, 0.0077619506046175957, 0.0032126386649906635, 0.0062343794852495193, 0.0080299796536564827, 0.016962204128503799, 0.012897294014692307, 0.011342217214405537, 0.0068522603251039982, 0.0062446645461022854, 0.006556658074259758, 0.01640082523226738, 0.011358040384948254, 0.0040333913639187813, 0.0063270940445363522, 0.0071674599312245846, 0.0047749564982950687, 0.011736474931240082, 0.0055533810518682003, 0.0046622781082987785, 0.0070527810603380203, 0.010776704177260399, 0.012812775559723377, 0.0067758806981146336, 0.026036569848656654, 0.0065364353358745575, 0.0099434228613972664, 0.0061255344189703465, 0.0054804650135338306, 0.0059724701568484306, 0.026514852419495583, 0.0075203622691333294, 0.0085332682356238365, 0.0059254043735563755, 0.0077340290881693363, 0.0093882884830236435, 0.0050850501284003258, 0.0084557011723518372, 0.012284770607948303, 0.0051002367399632931, 0.0055100452154874802, 0.0077080894261598587, 0.0067187072709202766, 0.0041006114333868027, 0.00537117850035429, 0.006350289098918438, 0.0066406182013452053, 0.0062854341231286526, 0.0078506143763661385, 0.0041682184673845768, 0.0070395935326814651, 0.0053994189947843552, 0.0074753649532794952, 0.0087127648293972015, 0.0073612276464700699, 0.0072316420264542103, 0.0077484128996729851, 0.0081900814548134804, 0.0063200774602591991, 0.0055393935181200504, 0.0034055779688060284, 0.0062406081706285477, 0.0042535052634775639, 0.0051534534431993961, 0.0054816040210425854, 0.013534845784306526, 0.0085346782580018044, 0.013529402203857899, 0.0091989124193787575, 0.012195861898362637, 0.0092979446053504944, 0.0063237533904612064, 0.0049339192919433117, 0.009858342818915844, 0.010996351018548012, 0.0076420283876359463, 0.0044385972432792187, 0.0061979945749044418, 0.006286214105784893, 0.0083486419171094894, 0.011645544320344925, 0.0044882376678287983, 0.008442210964858532, 0.0068458751775324345, 0.0052886055782437325, 0.0071711614727973938, 0.0037471523974090815, 0.010588127188384533, 0.013216476887464523, 0.0073306281119585037, 0.0024303309619426727, 0.018922204151749611, 0.011342148296535015, 0.011004699394106865, 0.026954961940646172, 0.010762855410575867, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 6836, 2520, 425, -1144, 8001, 9846, 8235, 1615, -215, 7420, 1487, -7123, 4117, 3499, -403, -319, 4273, 10409, -584, -493, 4621, 11682, 11475, -1191, -5253, -225, 9344, -1607, 2621, 442, 16741, -1327, 12072, 2683, 4363, -3963, 564, -2991, 445, 1314, 3437, 1846, 2151, -679, 820, 1461, 3947, 3210, 2299, 2676, 6809, 1986, -2245, 1029, 1199, 1385, 1521, 2258, 6601, 1557, -1286, 3947, 3115, 4701, 3733, 5513, -4182, 3528, 5738, -1595, 6248, 1533, 2231, 3442, 4035, 3895, -774, 1722, 2400, 4805, 3116, 3555, 7929, 1127, 4306, 5072, 1102, -2106, 9418, -119, 1049, -1791, 7462, 1950, -4178, -298, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00010538542846916243, 0.00013822389882989228, 0.00016456081357318908, 0.00023072058684192598, 9.068196959560737e-05, 9.3689777713734657e-05, 0.0001185890578199178, 0.00017327359819319099, 0.00021691960864700377, 0.00010779793228721246, 0.00020125067385379225, 8.2280799688305706e-05, 0.00012946334027219564, 0.00016424657951574773, 0.00017144283629022539, 0.00014994769298937172, 0.00015099921438377351, 8.2051221397705376e-05, 0.00017178420966956764, 0.00016127656272146851, 0.00014306827506516129, 7.6561664172913879e-05, 7.4509131081867963e-05, 0.0001700023130979389, 0.00010578153887763619, 0.00019372855604160577, 9.0422967332415283e-05, 0.00010912304423982278, 0.00012821426207665354, 0.00021019719133619219, 5.9488014812814072e-05, 0.00020460165978875011, 7.153025217121467e-05, 0.00018797743541654199, 0.00015751071623526514, 0.00013573718024417758, 0.00022877151786815375, 0.00014746458327863365, 0.00014722475316375494, 0.00016412149125244468, 0.00014888643636368215, 0.00013980185030959547, 0.00013202514674048871, 0.00022565413382835686, 0.00025547671248205006, 0.00016706626047380269, 0.00015409312618430704, 0.00019480180344544351, 0.00019470522238407284, 0.00016329366189893335, 0.00011064115824410692, 0.00023876789782661945, 0.00018472086230758578, 0.00016286250320263207, 0.00018733467732090503, 0.00021479534916579723, 0.00019827243522740901, 0.00016709369083400816, 0.00012257328489795327, 0.0001456016325391829, 0.00017781340284273028, 0.00015777791850268841, 0.00015118146257009357, 0.00014614318206440657, 0.00014828136772848666, 0.00013297697296366096, 0.0001280677824979648, 0.00014433712931349874, 0.00010953539458569139, 0.00017188843048643321, 0.00011256082507316023, 0.00017506601579952985, 0.00013968862185720354, 0.00014031759928911924, 0.00012665729445870966, 0.00010355214180890471, 0.00014575324894394726, 0.00016573762695770711, 0.00016326316108461469, 0.00013980586663819849, 0.00016148004215210676, 0.00010677329555619508, 0.00010428273526486009, 0.00016448821406811476, 0.00012089093070244417, 0.00010962249507429078, 0.00018238120537716895, 0.00019393429101910442, 9.0606488811317831e-05, 0.00016717457037884742, 0.00020145253802184016, 0.00013002465129829943, 9.7957126854453236e-05, 0.00021742910030297935, 9.6184448921121657e-05, 0.00010790158557938412, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -127,12,31,-59,-24,-66,-114,-5,35,-81,25,-83,101,-126,-24,-71, 
  /* [1][0][][] */ -82,66,-62,-118,-68,67,4,26,-69,-41,69,12,41,127,43,67, 
  /* [2][0][][] */ -46,-22,-42,-36,43,-75,21,-25,-93,127,90,44,18,49,-45,89, 
  /* [3][0][][] */ -33,-94,-17,-17,-85,54,-57,-127,-10,2,57,-79,-36,-39,-96,-18, 
  /* [4][0][][] */ 86,36,-64,12,-127,-87,-95,66,-18,126,83,73,23,52,-4,-111, 
  /* [5][0][][] */ -68,49,-52,-37,37,-45,0,-44,41,-40,11,-55,40,-127,-34,-50, 
  /* [6][0][][] */ -17,-46,-10,2,-38,65,27,-38,-13,-13,61,-26,22,32,-127,-10, 
  /* [7][0][][] */ 3,57,127,-51,31,53,26,-83,-19,63,-71,-36,18,-4,54,44, 
  /* [8][0][][] */ -70,-68,10,5,72,41,89,127,-29,-36,-42,-46,14,67,-38,-63, 
  /* [9][0][][] */ 53,46,84,45,-56,-2,-127,-71,55,-16,73,23,-30,-81,44,-34, 
  /* [10][0][][] */ -2,-127,-1,-35,-97,52,-2,18,-39,-59,0,25,-9,17,-92,40, 
  /* [11][0][][] */ 95,-46,29,59,-115,-95,96,-19,118,114,-16,44,-13,-85,-46,127, 
  /* [12][0][][] */ -66,-92,61,-19,77,29,48,44,48,-35,43,127,-7,61,-65,12, 
  /* [13][0][][] */ -17,-6,37,27,-3,9,127,2,-22,16,-7,78,-54,69,22,-73, 
  /* [14][0][][] */ 42,-92,127,41,24,77,83,56,37,82,21,57,26,20,21,-92, 
  /* [15][0][][] */ -2,116,21,13,60,127,-79,64,-41,-30,-51,-16,-41,82,10,-33, 
  /* [16][0][][] */ -47,41,127,-51,16,113,-24,-10,-7,16,-44,65,61,17,106,98, 
  /* [17][0][][] */ -102,-35,66,-113,-15,-75,-41,-127,-120,60,-49,-22,-27,-35,117,-69, 
  /* [18][0][][] */ -94,-27,-82,-76,91,59,-21,-70,-10,77,127,48,2,86,-60,-11, 
  /* [19][0][][] */ 41,127,62,110,72,-4,23,11,-39,108,57,104,93,92,-63,23, 
  /* [20][0][][] */ 96,-55,-27,60,-77,-31,-19,46,-31,-45,-127,-86,101,-94,19,-12, 
  /* [21][0][][] */ -127,-49,5,23,-22,-56,-94,93,-28,22,41,-47,-2,27,-88,20, 
  /* [22][0][][] */ -29,26,-103,-118,127,-17,-65,89,82,106,-11,74,-24,93,-26,-8, 
  /* [23][0][][] */ -76,29,-23,16,20,28,126,71,7,127,-16,-49,28,38,-59,-3, 
  /* [24][0][][] */ 42,-116,1,-67,91,40,127,-50,31,62,56,106,-51,82,-3,-38, 
  /* [25][0][][] */ 101,-29,55,6,14,3,-43,127,112,-27,-36,-33,116,-23,92,33, 
  /* [26][0][][] */ 47,34,87,29,46,-18,-102,16,3,76,27,127,49,-82,75,-51, 
  /* [27][0][][] */ -42,44,-95,-5,-57,112,5,-87,54,-34,127,57,30,-99,101,120, 
  /* [28][0][][] */ -43,35,-89,-67,58,-74,-8,-41,-104,127,-66,17,-16,93,-55,33, 
  /* [29][0][][] */ 62,110,-91,13,37,45,-88,-9,33,24,16,48,-127,33,-25,68, 
  /* [30][0][][] */ 20,78,-96,-88,85,-55,18,27,-108,77,-91,44,19,93,13,127, 
  /* [31][0][][] */ -11,-116,22,37,34,-45,-28,38,-16,-11,46,-25,2,42,-15,127, 
  /* [32][0][][] */ -116,63,17,-14,-98,42,9,123,42,-120,55,-127,-2,90,31,44, 
  /* [33][0][][] */ -65,10,61,54,-29,1,-18,30,-90,-75,44,-8,-6,-8,-15,127, 
  /* [34][0][][] */ -6,20,-84,-81,54,-14,7,74,34,-9,-3,-33,-47,-28,-53,127, 
  /* [35][0][][] */ 75,7,1,-36,-24,22,-98,-17,-39,-127,-44,-26,36,-1,92,-9, 
  /* [36][0][][] */ -72,-7,-118,-4,58,127,-35,28,-2,-1,30,11,59,46,-99,65, 
  /* [37][0][][] */ -3,42,25,-58,9,-127,48,-7,-116,47,-45,-35,30,44,98,67, 
  /* [38][0][][] */ -41,95,35,-34,60,19,30,-54,-8,37,-127,44,-50,-103,-96,-4, 
  /* [39][0][][] */ 64,77,-127,-101,8,-53,1,-25,1,-16,61,-80,59,19,-56,-70, 
  /* [40][0][][] */ -53,5,-32,-63,-38,-8,-11,-127,-56,12,-20,-45,36,79,71,81, 
  /* [41][0][][] */ -27,-127,-3,88,-29,-52,-23,0,34,-57,106,-54,-69,-11,64,59, 
  /* [42][0][][] */ -46,127,-103,-117,25,-19,36,-39,124,-45,7,-7,124,-39,-59,68, 
  /* [43][0][][] */ -45,18,-2,-19,88,10,30,32,-7,16,-22,-127,-72,-55,-20,53, 
  /* [44][0][][] */ 108,-19,22,56,-29,15,10,32,-16,-49,2,41,127,47,-44,-29, 
  /* [45][0][][] */ -19,-127,-28,66,-43,-74,1,27,63,-6,12,32,-83,91,31,-23, 
  /* [46][0][][] */ -35,-64,86,79,-3,26,-93,77,17,-41,42,-14,-14,38,54,127, 
  /* [47][0][][] */ -48,-44,-19,105,-21,3,27,72,-18,-114,-127,-44,6,-41,-60,-7, 
  /* [48][0][][] */ -53,47,-23,-24,-7,40,-20,-82,26,-26,20,-30,48,-127,-66,15, 
  /* [49][0][][] */ -112,13,3,-30,-29,26,119,127,-43,-2,3,11,-16,85,9,25, 
  /* [50][0][][] */ 73,29,-91,16,39,-61,-93,-17,-62,47,-50,13,29,-127,-117,-88, 
  /* [51][0][][] */ -20,12,7,40,-10,27,-45,-64,-37,-48,-6,-33,-11,6,-21,127, 
  /* [52][0][][] */ -127,-8,13,-8,51,53,59,41,19,-101,-19,-49,-107,-86,-89,-2, 
  /* [53][0][][] */ 13,-127,-42,-121,-12,61,26,49,25,-94,-127,85,-7,35,88,73, 
  /* [54][0][][] */ 1,-67,-27,8,-87,63,78,11,-23,-96,60,62,-52,-44,-127,31, 
  /* [55][0][][] */ -8,-41,-74,42,58,-26,76,127,-19,-61,-122,-33,47,-65,-44,67, 
  /* [56][0][][] */ 21,6,-31,-4,-127,-4,-124,-4,-5,-23,-43,14,94,-52,27,36, 
  /* [57][0][][] */ -79,21,20,-1,118,48,53,24,-30,127,-16,-21,-43,110,-34,-11, 
  /* [58][0][][] */ 17,15,-16,12,23,17,-29,-42,30,-127,-53,32,-83,-40,-9,38, 
  /* [59][0][][] */ -127,-46,23,40,45,89,-55,-64,112,107,-52,12,-11,53,-30,-23, 
  /* [60][0][][] */ 5,-91,-14,35,-127,-45,28,26,-36,20,10,39,19,-11,22,55, 
  /* [61][0][][] */ 11,-3,-31,-2,-46,-6,-99,-78,-38,11,31,121,22,-80,127,83, 
  /* [62][0][][] */ 67,40,77,-42,-26,50,38,111,-49,127,-24,115,45,98,41,61, 
  /* [63][0][][] */ 32,-90,-9,-13,-46,2,62,-43,0,0,-7,-31,-18,127,107,47, 
  /* [64][0][][] */ 43,31,-114,-66,17,39,-2,-3,0,-127,85,-12,35,-42,-78,83, 
  /* [65][0][][] */ -12,-7,68,26,53,-61,4,66,-84,-5,-82,-127,49,44,-61,-30, 
  /* [66][0][][] */ -47,-127,30,-110,-18,-61,74,-59,2,-16,-40,105,-44,-12,-50,70, 
  /* [67][0][][] */ -47,-40,-65,-36,-41,127,-53,-110,-85,-25,-68,-111,2,-38,-63,48, 
  /* [68][0][][] */ 99,67,-27,-18,-46,0,-96,-59,-40,-106,-24,-31,66,-13,50,-127, 
  /* [69][0][][] */ 57,-6,10,16,-12,-38,-55,42,-61,127,-39,44,27,10,99,-8, 
  /* [70][0][][] */ 39,-38,-17,44,-126,9,1,-58,76,127,15,88,50,-43,-14,39, 
  /* [71][0][][] */ 127,-27,72,44,-91,14,8,-23,97,-21,-62,-21,76,-59,9,-30, 
  /* [72][0][][] */ -9,-48,18,127,19,-12,-116,54,127,-6,49,30,-40,-62,-41,60, 
  /* [73][0][][] */ 60,5,8,-65,44,-84,-72,29,21,127,-34,68,-31,-50,21,-27, 
  /* [74][0][][] */ 93,-21,111,115,-127,-28,89,-18,-107,-64,24,-78,30,-100,19,48, 
  /* [75][0][][] */ 123,127,-117,36,125,84,-53,-38,-17,-56,24,79,-62,68,104,114, 
  /* [76][0][][] */ -65,-48,19,-30,-49,20,127,16,-99,14,82,77,-74,-110,-39,70, 
  /* [77][0][][] */ -127,86,-38,-30,-36,-86,58,59,83,-59,-16,29,-17,71,-9,45, 
  /* [78][0][][] */ 49,73,-62,49,-78,17,-127,-31,2,3,-88,46,-12,-79,6,39, 
  /* [79][0][][] */ 5,3,102,52,-58,-68,-57,-44,-20,-29,19,-17,-41,107,-127,77, 
  /* [80][0][][] */ 51,84,-15,-127,-46,44,77,2,4,8,-42,30,69,-68,2,-25, 
  /* [81][0][][] */ 69,-113,-11,-127,124,45,-28,125,123,89,-52,28,0,62,-95,-108, 
  /* [82][0][][] */ 72,34,71,-48,99,-111,37,65,9,127,-27,24,-22,-51,39,-86, 
  /* [83][0][][] */ -48,75,7,-3,88,66,127,105,17,26,-36,-59,-76,95,-80,-86, 
  /* [84][0][][] */ -2,-59,20,78,12,-39,-97,30,-115,12,-83,-22,-127,36,4,-45, 
  /* [85][0][][] */ -109,84,-98,9,-9,-89,-107,-98,-14,71,-17,-127,-40,-58,-123,56, 
  /* [86][0][][] */ -21,18,36,80,30,-48,65,25,-13,40,-30,-62,66,61,-127,-22, 
  /* [87][0][][] */ -4,44,113,-36,-127,-4,20,3,15,-31,13,47,-18,45,19,10, 
  /* [88][0][][] */ -52,-80,-127,-4,9,8,52,38,-28,-70,-87,14,89,8,26,57, 
  /* [89][0][][] */ 20,18,7,-127,-2,-66,-20,32,124,1,19,-119,21,-46,36,-21, 
  /* [90][0][][] */ -5,73,28,-6,-58,21,1,100,44,-47,-35,127,23,-2,-58,42, 
  /* [91][0][][] */ -27,-15,22,11,101,73,0,-127,-54,12,-27,77,-115,-91,-20,-35, 
  /* [92][0][][] */ -47,52,32,-44,-127,-39,-49,59,-20,67,101,92,-39,-32,5,15, 
  /* [93][0][][] */ 64,19,127,60,-77,-60,4,3,-37,-57,-53,-17,23,-26,-31,-25, 
  /* [94][0][][] */ -19,-105,27,-127,23,12,8,17,84,-32,23,38,25,50,-28,77, 
  /* [95][0][][] */ -23,-87,-22,-48,127,126,-72,14,116,33,-112,88,-40,117,-30,-6, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0018999138846993446, 0.0024919337593019009, 0.002966742031276226, 0.0041594863869249821, 0.0016348363133147359, 0.0016890618717297912, 0.0021379520185291767, 0.0031238181982189417, 0.0039106789045035839, 0.0019434071145951748, 0.003628195496276021, 0.0014833781169727445, 0.0023339963518083096, 0.0029610767960548401, 0.0030908125918358564, 0.0027032929938286543, 0.0027222500648349524, 0.0014792392030358315, 0.0030969670042395592, 0.0029075327329337597, 0.0025792692322283983, 0.0013802720932289958, 0.00134326855186373, 0.0030648426618427038, 0.0019070550333708525, 0.0034925849176943302, 0.0016301670111715794, 0.0019672964699566364, 0.0023114776704460382, 0.0037894854322075844, 0.0010724642779678106, 0.0036886080633848906, 0.0012895646505057812, 0.0033889024052768946, 0.0028396411798894405, 0.0024471026845276356, 0.0041243480518460274, 0.0026585271116346121, 0.0026542032137513161, 0.0029588218312710524, 0.0026841606013476849, 0.002520381473004818, 0.0023801811039447784, 0.004068146925419569, 0.0046057957224547863, 0.0030119107104837894, 0.002778027905151248, 0.0035119338426738977, 0.0035101925022900105, 0.0029438973870128393, 0.0019946654792875051, 0.0043045650236308575, 0.0033301920630037785, 0.0029361243359744549, 0.0033773146569728851, 0.0038723822217434645, 0.0035745031200349331, 0.0030124052427709103, 0.0022097807377576828, 0.0026249412912875414, 0.0032056628260761499, 0.0028444582130759954, 0.0027255357708781958, 0.0026347045786678791, 0.0026732522528618574, 0.0023973409552127123, 0.0023088369052857161, 0.0026021446101367474, 0.0019747305195778608, 0.0030988459475338459, 0.00202927365899086, 0.0031561322975903749, 0.0025183400139212608, 0.0025296793319284916, 0.002283408073708415, 0.0018668629927560687, 0.0026276747230440378, 0.0029879577923566103, 0.0029433474410325289, 0.0025204538833349943, 0.0029112009797245264, 0.0019249346805736423, 0.0018800342222675681, 0.002965433057397604, 0.0021794508211314678, 0.0019763007294386625, 0.0032880122307687998, 0.00349629414267838, 0.0016334755346179008, 0.0030138634610921144, 0.0036318348720669746, 0.002344115637242794, 0.0017659947043284774, 0.0039198640733957291, 0.0017340363701805472, 0.0019452756969258189, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -33131, -1660, -6236, -12463, 8635, -14917, 20269, -3965, 13468, -11654, 15078, 4644, 2225, -20804, -4020, 8908, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 8.0338300904259086e-05, 6.3795421738177538e-05, 7.4835246778093278e-05, 7.5057745561935008e-05, 9.3633723736274987e-05, 0.00015728097059763968, 6.7922279413323849e-05, 8.5979874711483717e-05, 0.00011972280481131747, 0.00011070447362726554, 8.8140455773100257e-05, 7.5899064540863037e-05, 7.3650597187224776e-05, 0.00011187736527062953, 6.8635898060165346e-05, 8.3430932136252522e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 6,69,23,8,-25,-85,4,-5,-28,-55,2,-5,94,-65,74,20,-100,6,57,11,80,27,-85,-11,40,76,114,70,29,69,61,-65,28,-23,25,0,45,-12,5,-46,127,34,0,-3,-9,2,6,4,30,-28,102,-7,-61,26,45,40,24,-36,13,17,-4,38,-38,-6,49,39,71,-6,17,-11,8,2,35,27,18,20,54,-13,40,37,1,59,40,47,-53,-15,-7,65,20,16,-62,-3,38,23,113,77, 
  /* [1][0][][] */ -15,37,-27,3,2,-4,101,-43,-80,-24,-48,-56,14,-51,-25,-23,-4,-10,-20,-10,-36,-122,122,-42,23,-20,-5,47,-20,23,-70,30,-39,28,13,-18,1,55,-69,92,44,6,25,-76,52,-36,-21,19,-77,8,77,-44,-48,45,79,40,14,27,-55,14,-39,11,-2,-15,47,25,103,0,-35,-127,6,-18,27,45,-38,22,-85,-19,71,-10,35,-44,14,-74,-12,-53,15,-13,3,-30,54,-25,67,-24,-48,42, 
  /* [2][0][][] */ -9,10,22,-28,52,45,-74,6,-48,27,-5,-62,42,5,-13,55,18,-2,-127,-4,-15,-51,-38,24,-15,16,-53,12,-7,-20,-11,66,-19,-15,6,-7,-19,28,-8,-25,41,12,-7,74,23,62,-24,27,-93,2,-12,43,4,35,0,-52,62,-29,40,17,-13,19,0,83,42,-13,-26,6,4,9,-15,-30,15,54,42,68,-69,-51,-16,-12,67,37,51,-6,-1,-35,1,-35,18,-24,1,78,-21,-7,86,-33, 
  /* [3][0][][] */ 39,-5,-3,-127,10,-36,124,5,21,109,-102,-17,36,-27,-24,44,52,-7,16,24,-52,16,22,-4,-23,112,33,17,-41,-12,-61,37,-3,-32,38,-32,-5,-31,-17,48,5,-21,-10,10,52,-2,11,47,54,-66,30,-18,100,60,3,23,20,10,-10,-35,-7,-4,81,-18,-28,-30,101,-30,-7,-48,-47,38,26,-49,4,-57,-18,-7,102,-10,0,-60,-21,-12,-27,-46,72,36,-18,39,-33,31,8,-85,-40,35, 
  /* [4][0][][] */ -31,62,75,15,-50,37,-18,-36,9,-20,27,-16,49,42,-18,6,-23,-37,-8,-66,35,-31,-60,33,-5,-47,-41,51,-37,127,-69,-8,22,-21,8,-47,80,51,-69,12,43,25,9,-42,-32,15,65,-41,26,-54,-41,-37,-47,3,65,38,18,80,-35,48,-32,-32,-5,-1,86,63,-57,-34,27,4,2,-69,-16,54,70,49,-49,34,-68,42,0,75,22,-87,75,-96,-27,-74,-57,-45,-102,-2,33,11,45,4, 
  /* [5][0][][] */ -3,2,19,-27,-31,-18,-28,-13,44,7,-41,-7,-2,-22,22,-2,-25,11,-41,-41,-33,24,-16,5,32,-58,53,-25,-9,52,10,69,-10,-78,10,21,-22,-21,-44,25,-25,-14,-32,-2,-11,39,-77,54,-4,13,62,-3,24,-65,17,39,-14,-59,0,-13,48,41,34,62,-12,35,114,-22,20,-35,9,-3,-11,27,46,-6,-9,13,127,50,-20,4,-40,38,20,51,12,70,0,-39,-1,7,14,-18,-56,6, 
  /* [6][0][][] */ 27,-66,68,-7,-67,71,-65,-112,14,-80,-85,44,30,-21,-28,66,19,50,11,-40,-81,-17,-85,-79,-26,-44,-19,58,-127,27,-10,-12,25,70,-44,18,-16,-50,46,-25,-14,72,45,-3,7,42,-116,24,27,6,-88,-98,65,-7,-84,18,28,-24,17,12,-12,-73,42,9,80,-70,-52,-35,-43,20,-15,-72,-14,-108,-20,-106,94,17,-55,51,-5,44,66,-39,25,-19,-26,12,-92,50,-63,108,6,-51,73,-74, 
  /* [7][0][][] */ 26,-22,-69,75,-22,27,54,-10,-81,-28,57,69,-11,-53,-5,-46,9,9,13,30,-95,-19,-3,-62,46,31,17,75,32,46,25,14,-69,-127,27,83,-23,0,-44,41,-22,-45,44,-85,19,79,58,46,13,46,-29,33,25,-15,19,-65,-24,38,-74,-38,60,1,12,-91,68,-57,75,-10,-83,-33,45,3,-12,-15,-66,-18,36,-19,69,-33,12,-53,-73,-4,30,48,-76,29,28,11,-10,-4,-4,-15,72,-16, 
  /* [8][0][][] */ -46,-68,22,-1,-16,-2,20,7,-7,-13,55,41,19,38,-20,3,58,-25,6,-5,-29,-91,-43,-21,-1,-47,64,-3,-2,54,1,-19,-31,20,-8,15,-20,-4,8,-26,1,42,7,-25,21,-9,13,31,55,24,42,11,2,-10,-27,-13,-5,94,-38,27,-1,-61,-64,-10,-54,-10,-21,8,-2,-1,59,-73,-30,-127,31,-93,-4,9,-51,1,-19,8,-6,40,56,-73,-31,56,-43,87,7,-36,-20,23,-5,-56, 
  /* [9][0][][] */ -25,-29,-4,10,8,22,13,39,-32,9,32,36,-19,38,4,-66,0,9,-15,-26,14,35,-22,19,-33,29,-8,17,19,-9,32,18,1,9,24,49,2,-2,24,-10,-10,-7,1,19,25,50,-6,41,-30,-14,-19,22,127,17,13,-9,23,-5,38,26,-18,-2,75,-14,31,38,43,-3,27,-19,-22,38,6,-115,-29,-105,-26,-13,12,-11,0,17,39,-21,57,-6,-46,-23,0,110,26,25,44,27,-10,22, 
  /* [10][0][][] */ 30,33,8,-1,-4,15,-29,-16,90,14,-53,18,23,-2,-6,-68,-30,-25,33,-16,4,-3,5,-34,35,2,-87,47,-63,73,7,12,18,12,-27,16,23,-17,30,-15,30,-21,88,-69,-29,1,20,29,6,2,-15,-21,-55,11,4,21,-19,9,-11,-14,-5,-56,-19,-1,-16,-53,-102,-41,-27,-28,54,6,-15,24,-2,20,73,-7,-97,15,-10,34,34,21,-7,12,-78,-127,-11,21,55,6,48,-24,7,3, 
  /* [11][0][][] */ 28,-46,18,38,-105,54,39,30,100,-48,-30,-40,16,33,53,22,-31,92,2,-60,1,29,-11,-32,47,16,27,-15,53,-47,-60,21,26,116,-127,42,39,-53,37,23,-42,63,-35,49,-40,-1,-12,39,71,29,-24,-37,-20,8,-39,95,-43,1,2,-38,-13,24,-5,-104,57,-26,-103,-108,-10,-29,-97,-2,61,-14,-8,-9,43,90,-88,-46,19,-1,-33,12,4,-39,60,67,11,-49,1,24,-10,47,116,49, 
  /* [12][0][][] */ 2,26,-61,-4,24,-21,-2,23,47,-30,-13,-2,-6,-28,5,-11,9,-34,-38,24,11,45,-5,18,-43,-20,-127,11,70,-46,16,-7,-45,-77,82,-3,34,-24,-9,23,-14,-65,19,32,31,5,21,-27,-56,2,-28,98,62,-11,17,-67,1,12,-28,-56,15,34,66,-6,-29,-34,18,27,104,30,43,-11,-13,-14,-35,-9,-57,-32,42,-77,32,-49,25,-48,-7,-6,0,-81,5,18,-63,-1,1,65,27,22, 
  /* [13][0][][] */ -41,-2,-59,16,1,39,4,-7,37,60,-47,9,-37,-11,19,-55,14,37,50,23,-42,-60,0,20,14,38,-16,16,9,41,43,-12,-36,65,-21,36,39,-73,-64,-29,-5,-17,11,15,35,47,-61,25,-33,21,-9,33,-22,-48,28,11,27,-62,-18,14,58,6,-15,-21,16,57,127,27,65,-15,-35,-38,12,41,-85,43,11,-54,112,-45,17,-34,27,17,18,51,-41,-36,-39,-38,-11,18,28,42,54,33, 
  /* [14][0][][] */ -25,58,21,27,-92,-49,15,49,-63,-28,62,16,-100,-4,57,22,-24,45,-54,48,-9,20,-106,59,-35,-3,-58,-120,15,-18,16,79,-40,15,3,-14,-42,-52,-2,-63,12,-29,36,-22,-29,51,-52,25,9,-46,95,-2,2,30,-17,35,-57,16,-1,54,43,83,12,70,20,-13,24,-82,23,56,67,25,-70,47,13,2,53,25,46,24,-92,90,-17,-127,91,-34,1,0,-115,1,-4,5,-15,13,34,42, 
  /* [15][0][][] */ 78,-49,27,17,21,1,-42,-47,14,6,-42,8,49,41,-9,-18,1,22,-63,33,15,-26,12,29,42,-66,72,35,59,-43,-42,47,72,33,-15,-56,19,78,69,69,82,39,-18,1,-45,-127,12,-60,-25,6,-14,-20,-2,-41,-52,49,-14,-10,-8,11,-16,-70,-25,17,24,33,-37,47,-9,-7,-15,-30,20,-119,-57,-99,16,42,-102,7,62,-47,10,2,-60,5,-25,-20,13,88,-6,-61,-30,-16,29,-38, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0034143778029829264, 0.0027113053947687149, 0.0031804980244487524, 0.003189953975379467, 0.0039794333279132843, 0.0066844411194324493, 0.0028866967186331749, 0.0036541444715112448, 0.0050882189534604549, 0.0047049401327967644, 0.0037459691520780325, 0.0032257102429866791, 0.0031301502604037523, 0.0047547877766191959, 0.0029170254711061716, 0.0035458146594464779, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 9663, 1685, -912, 7959, -2482, -220, -3142, -4562, 5678, -5193, -947, -7888, -561, -4003, -4852, -5752, -300, -968, -7693, -2483, -1919, -986, -2498, -170, -9, 5654, -11054, -10168, -664, -2435, -314, 1200, 9730, 497, -5740, -2381, -1295, 11248, 7702, 10023, -518, 2625, -2267, 15013, -357, 2485, 12636, 7464, -11699, -337, -5814, -4680, -118, -4582, -561, 7002, -229, 4482, 1288, 7091, -1941, -2882, -1388, 10499, 23418, 373, 22971, 12257, -1842, 189, 11280, -4470, -802, 91, -1441, -2927, 16614, 5184, 15408, 6571, 9654, -2276, 14423, 7741, -1309, -165, 7045, -5495, 10341, -552, -9787, -460, -885, -388, 13723, -1362, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.0001187650632346049, 0.00021886501053813845, 0.00023828011762816459, 0.00014711431867908686, 0.0003589374537114054, 0.00041464067180640996, 9.1058776888530701e-05, 0.00019240377878304571, 0.0003069225640501827, 0.00022779195569455624, 0.00026276891003362834, 0.00016975868493318558, 0.00014712351548951119, 0.00013029204274062067, 0.00018259206262882799, 0.0001712881785351783, 0.0003033728280570358, 0.00023818237241357565, 0.00017992609355133027, 0.00040409472421742976, 0.00024912651861086488, 0.0002358688652748242, 0.00022835737036075443, 0.00015112626715563238, 0.0032037405762821436, 0.00023795176821295172, 0.0001985570415854454, 9.7626885690260679e-05, 0.00034043466439470649, 0.00019556301413103938, 0.00019335291290190071, 0.00033552106469869614, 8.5754327301401645e-05, 0.00051935226656496525, 0.00013529260468203574, 0.00025192514294758439, 0.0002182366733904928, 0.00011046030704164878, 0.00018077826825901866, 0.00014001246017869562, 0.00051565817557275295, 0.00021287071285769343, 0.00022630122839473188, 0.00010346553608542308, 0.00016857357695698738, 0.00029961843392811716, 0.0001039450871758163, 0.0001763771433616057, 9.8677279311232269e-05, 0.00054208846995607018, 0.00017698737792670727, 0.00019946151587646455, 0.00015371429617516696, 0.0002289012772962451, 0.0003050419909413904, 0.00020496458455454558, 0.00014027414727024734, 0.0003332248015794903, 0.00036835411447100341, 0.00017608777852728963, 0.00027855695225298405, 0.00023140110715758055, 0.00015184450603555888, 0.00012292806059122086, 0.00013164730626158416, 0.00033911128412000835, 7.5588031904771924e-05, 0.00011801475920947269, 0.00018034280219580978, 0.00032597887911833823, 0.00012129455717513338, 0.00023265952768269926, 0.00044680124847218394, 0.00019910346600227058, 0.00016701628919690847, 0.00019180613162461668, 8.9511828264221549e-05, 0.00021940619626548141, 9.4742288638371974e-05, 0.0001642147108213976, 0.00011772227298934013, 0.00022317012189887464, 0.0001139462910941802, 0.00026465454720892012, 0.00013057886098977178, 0.00033450752380304039, 0.00014327678945846856, 0.00021417187235783786, 0.00011909841850865632, 0.00023793791478965431, 0.00011238058505114168, 0.00025388837093487382, 0.00029311273829080164, 0.000180369897861965, 0.0001383704220643267, 0.0002289316471433267, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -35,5,-18,4,81,-14,95,19,-20,-6,-23,18,-7,-3,-8,12,-17,9,6,-8,13,53,-27,76,2,-27,-32,17,23,-9,26,-18,-17,2,29,5,9,-127,-49,49,7,-98,33,-42,2,33,-2,-58,5,39,6,63,-66,18,21,-24,-24,-20,-3,-30,-16,-20,2,-127,-30,-23,-54,-81,-20,41,-20,47,88,18,-34,-8,-74,33,127,-118,-127,17,-75,-52,-27,-49,-20,-2,-62,-4,7,-44,5,78,23,16, -92,60,44,-67,-13,4,127,-26,-14,2,-31,29,-43,32,-68,118,-25,99,127,-30,26,127,56,127,32,9,67,125,121,23,127,-31,-127,-14,-75,-36,-1,-92,127,-123,-33,-127,6,-115,41,-46,-48,-4,127,-3,77,127,-83,82,-69,-37,-127,-16,-4,38,-19,-127,-127,-78,-89,-8,0,-127,-13,29,-83,127,-127,-8,-36,-10,-127,-12,-6,-127,-109,23,-24,-71,127,93,-46,14,-127,1,33,-6,-10,127,-28,-127, -63,24,-38,28,69,-13,95,7,-34,15,-25,18,-3,-4,3,63,-16,23,-9,-20,9,24,-13,75,6,-45,21,20,16,4,3,-20,-23,-1,20,44,23,-113,-55,22,3,71,0,-50,2,-57,9,-54,-8,30,2,47,33,-6,18,-34,-2,-22,-2,-30,-5,-7,-64,-54,-36,-23,120,-55,-32,36,-21,42,90,-5,-23,29,-67,80,-47,-72,-42,11,-87,-37,-8,-70,-26,-30,-83,-55,20,67,-16,68,1,16, 
  /* [0][1][][] */ -127,-11,29,-68,16,102,-61,-10,-15,-9,-15,31,-51,18,23,72,-25,48,37,31,16,-7,41,-10,36,15,64,24,-26,-11,7,-13,-121,-13,98,38,4,-46,-81,-127,-4,13,106,-70,-45,127,-99,-103,88,66,26,-26,-127,73,45,-77,51,-38,23,-45,30,-3,76,-101,-88,29,-45,-47,-1,-7,-107,13,89,127,11,-48,-85,-16,-46,5,-53,1,-37,-47,51,23,-127,62,-92,127,81,-112,127,-11,-74,-1, 99,125,127,127,-127,-127,74,-43,127,127,-58,-62,-33,127,4,125,127,-127,35,127,127,-72,127,-113,-127,-127,127,127,-127,127,-13,127,-102,127,121,-99,127,23,-17,-9,127,48,-127,-127,127,-19,50,106,105,-127,127,-83,84,127,-127,127,-84,127,-127,127,-64,119,96,-41,107,127,-37,123,-112,-127,-74,-79,-29,116,127,93,55,-127,96,-51,45,127,26,127,74,100,-62,127,-53,46,83,-5,-77,-57,-127,-61, -96,-40,-1,-61,2,69,-59,0,-56,7,-7,127,-45,37,27,127,-20,46,61,19,3,-9,13,-12,42,-8,60,11,-35,-22,23,-11,-88,-35,127,127,7,-101,-87,-127,-22,42,74,-69,-47,-75,-93,-127,49,55,15,-10,110,27,89,-86,73,-28,30,-60,14,-10,-108,-83,-118,11,-59,-61,-27,0,-127,-5,69,-83,7,127,-55,-19,-80,53,-55,8,-57,-57,9,-1,-65,31,-83,-69,127,127,-32,-13,-56,1, 
  /* [0][2][][] */ -73,-80,-58,-45,47,10,94,70,-23,14,51,26,110,-7,12,-102,-3,-12,-47,-22,-14,-20,-28,-25,7,14,-8,31,28,6,-38,-20,99,-8,-15,-12,-28,30,-55,-8,-31,125,49,-50,17,-4,-108,-24,11,-3,-33,6,-6,-27,31,-62,72,-36,13,-68,11,45,-2,-57,-90,-33,127,12,53,16,-4,2,44,0,3,-19,-9,-7,-17,39,-6,-2,-127,-23,-13,11,53,-63,31,-2,24,-43,-8,-12,-16,26, 46,-127,13,-115,-5,-7,80,127,-69,47,127,-10,36,28,127,36,2,-41,86,-38,-46,-40,47,1,25,41,22,42,-2,26,-90,-43,66,-35,-45,-18,-107,-47,30,14,-30,-99,-72,93,-3,-25,-97,-11,89,-18,-8,-3,80,5,-52,-73,-19,-63,37,-87,127,47,119,15,-127,-90,-24,-82,127,2,-29,15,23,-43,33,-18,9,-54,11,78,-13,-11,-72,-32,29,-127,41,32,65,15,23,9,19,-94,-32,125, 22,7,-79,-74,41,12,82,55,-39,17,30,57,127,19,9,-26,5,-22,7,-14,-11,-26,-12,-32,-2,15,-19,40,25,12,-38,-12,125,-6,11,10,-22,16,-59,-8,-42,-59,54,-55,1,-6,-127,-20,2,-9,-4,5,-7,-60,39,-38,82,-21,11,-40,3,48,14,-22,-62,-34,-18,-1,37,-6,-21,-2,-14,-47,-7,9,-46,-23,79,49,-44,0,-120,-6,-21,17,34,22,45,15,28,-6,12,8,-16,14, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0050475150346755981, 0.0093017630279064178, 0.010126904584467411, 0.0062523586675524712, 0.015254841186106205, 0.017622228711843491, 0.0038699978031218052, 0.0081771602854132652, 0.013044209219515324, 0.0096811577677726746, 0.011167678982019424, 0.007214744109660387, 0.0062527493573725224, 0.0055374116636812687, 0.007760162465274334, 0.0072797476314008236, 0.012893345206975937, 0.010122750885784626, 0.0076468586921691895, 0.017174025997519493, 0.010587876662611961, 0.010024426504969597, 0.0097051877528429031, 0.0064228661358356476, 0.13615897297859192, 0.010112949647009373, 0.0084386738017201424, 0.0041491426527500153, 0.014468473382294178, 0.0083114281296730042, 0.0082174986600875854, 0.014259644784033298, 0.003644558833912015, 0.022072471678256989, 0.0057499357499182224, 0.010706818662583828, 0.0092750582844018936, 0.0046945628710091114, 0.0076830759644508362, 0.0059505295939743519, 0.02191547118127346, 0.0090470053255558014, 0.0096178017556667328, 0.004397285170853138, 0.00716437678784132, 0.012733782641589642, 0.0044176662340760231, 0.0074960286729037762, 0.0041937842033803463, 0.023038759827613831, 0.0075219636783003807, 0.0084771141409873962, 0.0065328571945428848, 0.0097283041104674339, 0.012964284978806973, 0.0087109943851828575, 0.0059616509824991226, 0.014162053354084492, 0.015655050054192543, 0.0074837305583059788, 0.011838669888675213, 0.0098345465958118439, 0.0064533911645412445, 0.0052244425751268864, 0.0055950107052922249, 0.014412229880690575, 0.0032124912831932306, 0.0050156270153820515, 0.0076645691879093647, 0.013854102231562138, 0.0051550185307860374, 0.009888029657304287, 0.018989052623510361, 0.0084618972614407539, 0.0070981918834149837, 0.0081517603248357773, 0.0038042527157813311, 0.0093247629702091217, 0.0040265470743179321, 0.0069791250862181187, 0.0050031966529786587, 0.0094847297295928001, 0.0048427172005176544, 0.011247818358242512, 0.0055496017448604107, 0.014216569252312183, 0.0060892635956406593, 0.0091023044660687447, 0.0050616827793419361, 0.010112361051142216, 0.0047761746682226658, 0.010790255852043629, 0.012457291595637798, 0.0076657203026115894, 0.0058807427994906902, 0.009729594923555851, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1845, 8313, 463, 2459, 7094, 17109, -36, 452, 13082, -498, 19679, 7626, 1645, 1493, 5726, -1175, 2654, 2729, 366, 12069, 1186, 6176, -1570, 1933, -16119, 2064, 3744, 2454, 5415, 734, 2991, 6784, 1174, 19299, 2481, 5178, 2539, 1716, 5006, 3806, 12310, 2165, 2915, 1404, 3177, 17292, 11615, 5230, 1040, -1629, 1296, 6620, 2770, -2753, 4806, 1076, 1723, 8046, 2890, 1460, 3548, 11939, 4087, -922, 21641, 9956, 1373, 2451, 6858, 4721, 2322, 894, -4491, 6123, 1522, 4297, 788, 9820, 3891, 11905, 3108, 1514, 6965, 17877, -180, 14416, 3641, 2447, -822, 2608, 1992, 16541, 3280, 5435, 9556, 6307, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00021048798225820065, 0.0001013192450045608, 0.00022425818315241486, 0.00013405340723693371, 0.00011083496792707592, 5.2173250878695399e-05, 0.00017658433353062719, 0.00024586112704128027, 7.0547575887758285e-05, 0.00015058285498525947, 3.9724254747852683e-05, 7.8188495535869151e-05, 0.00015915573749225587, 0.00021150321117602289, 0.0001114044789574109, 0.00014881719835102558, 0.00024038410629145801, 0.00021348682639654726, 0.00012800030526705086, 6.798647518735379e-05, 0.00020402279915288091, 0.00011204983456991613, 0.00017947267042472959, 0.00013216373918112367, 5.0489328714320436e-05, 0.00014797200856264681, 0.00015648898261133581, 0.00014848403225187212, 0.00016857405717018992, 0.00021859521802980453, 0.00014847367128822953, 8.8845416030380875e-05, 0.00027676959871314466, 4.5032549678580835e-05, 0.00018767375149764121, 0.0001305420882999897, 0.00020953071361873299, 0.00024980021407827735, 0.00010558120266068727, 0.0001303427416132763, 7.878941687522456e-05, 0.0001610293984413147, 0.00015901470032986253, 0.00015270637231878936, 0.00011503578571137041, 5.506549496203661e-05, 6.2127321143634617e-05, 0.00014771023415960371, 0.00021531882521230727, 0.00017910769383888692, 0.00029669346986338496, 0.00011655152775347233, 0.00018548559455666691, 0.00013872321869712323, 0.00014503831334877759, 0.00025134437601082027, 0.00017435380141250789, 9.9140939710196108e-05, 7.7130724093876779e-05, 0.00017195125110447407, 0.00011874975461978465, 7.3326817073393613e-05, 0.00015400527627207339, 0.00018160119361709803, 4.6049448428675532e-05, 8.8610046077519655e-05, 0.00025879958411678672, 0.00018583152268547565, 0.00010806303180288523, 9.5933282864280045e-05, 0.00019049589172936976, 0.00013463935465551913, 0.00012524971680250019, 0.00012737994256895036, 0.00020952134218532592, 0.00016997302009258419, 0.00011904988059541211, 8.8077511463779956e-05, 0.00015289372822735459, 7.6046053436584771e-05, 0.00013955075701233, 0.00014424145047087222, 9.3766313511878252e-05, 5.1542639994295314e-05, 0.00015110224194359034, 5.0009039114229381e-05, 0.00016014749417081475, 0.00021338547230698168, 0.00018191192066296935, 0.00022113135491963476, 0.00018114042177330703, 6.0649250372080132e-05, 0.00015656222240068018, 0.00010335492697777227, 7.2424256359227002e-05, 0.00012736754433717579, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 43,3,-29,110,-127,-60,94,42,72,98,9,50,24,20,11,90, 
  /* [1][0][][] */ 4,17,-50,-20,127,89,8,2,-16,13,-29,45,-47,82,-61,-28, 
  /* [2][0][][] */ -50,88,83,-21,71,90,-8,39,50,5,49,-37,76,-127,-37,8, 
  /* [3][0][][] */ 127,-23,48,23,48,55,-2,15,54,28,-81,-37,-14,70,-35,89, 
  /* [4][0][][] */ -38,-6,-10,27,-63,31,-90,-7,-9,69,-10,-103,-10,-1,-66,127, 
  /* [5][0][][] */ -127,20,68,-18,114,-7,2,50,-69,60,-42,41,-80,48,-113,-90, 
  /* [6][0][][] */ -127,50,-60,27,-17,-83,73,-1,3,-23,-71,48,-4,-14,-83,-8, 
  /* [7][0][][] */ -10,105,52,-26,77,55,127,46,66,-1,31,58,96,-12,-5,4, 
  /* [8][0][][] */ -19,-10,-58,63,-27,90,-30,-84,34,-11,61,21,127,24,-80,16, 
  /* [9][0][][] */ -33,-127,-43,105,-63,-75,-2,81,49,24,-11,46,-72,26,19,-22, 
  /* [10][0][][] */ -48,-19,-94,14,-118,123,124,-127,19,-32,54,-55,34,119,-114,84, 
  /* [11][0][][] */ -41,-73,-54,-4,-9,95,82,6,-37,7,35,-71,-39,117,-127,102, 
  /* [12][0][][] */ -93,-127,-32,99,-108,-84,21,77,102,39,-58,71,21,-110,27,34, 
  /* [13][0][][] */ -67,-18,-40,-19,-29,4,48,34,-38,127,13,-23,40,52,17,-7, 
  /* [14][0][][] */ -91,-14,-85,-8,-2,62,-46,-99,127,-48,46,8,73,-61,-84,-93, 
  /* [15][0][][] */ -12,-121,127,-70,-63,-22,-3,82,12,-52,-65,-14,69,-39,-13,-41, 
  /* [16][0][][] */ -2,-33,16,-53,19,18,-22,-39,58,-127,26,-14,-9,38,-61,-95, 
  /* [17][0][][] */ -127,14,24,-120,11,50,-33,19,106,-97,34,86,113,-104,3,-121, 
  /* [18][0][][] */ 83,-3,-41,-92,17,6,113,-73,34,55,-12,55,14,87,6,-127, 
  /* [19][0][][] */ -39,-33,12,-51,-102,65,-1,-3,31,-42,23,-127,-9,13,-22,24, 
  /* [20][0][][] */ 13,45,42,-66,59,18,-29,85,-100,-127,39,-49,-26,92,-25,17, 
  /* [21][0][][] */ 29,-98,-40,-42,29,-16,71,119,-127,-84,1,19,97,-110,0,-34, 
  /* [22][0][][] */ 65,-26,50,10,9,18,101,10,37,91,32,11,16,3,127,-7, 
  /* [23][0][][] */ -113,-127,-44,81,110,43,2,65,-23,14,17,-20,-32,73,83,125, 
  /* [24][0][][] */ 15,-16,8,73,31,-127,16,-103,59,126,-125,60,-8,-116,89,-112, 
  /* [25][0][][] */ 127,17,63,90,-5,-37,-24,39,-77,83,47,-71,-12,34,24,-42, 
  /* [26][0][][] */ -14,23,24,33,-46,84,-12,30,-50,-27,-84,44,13,33,45,-127, 
  /* [27][0][][] */ 22,-13,-38,-86,-74,7,-96,11,-115,-40,-81,-51,-94,36,-37,127, 
  /* [28][0][][] */ -49,18,21,-7,16,-5,-127,4,5,-26,16,-12,8,-40,-31,-3, 
  /* [29][0][][] */ -13,-101,-39,61,-43,-1,127,-11,57,41,-105,44,54,-43,-23,70, 
  /* [30][0][][] */ -1,-56,-22,4,-127,3,42,-31,-14,-10,22,-15,-6,30,17,56, 
  /* [31][0][][] */ -127,-41,-24,103,-89,-41,-53,14,-25,-66,-24,-52,-23,-44,-69,25, 
  /* [32][0][][] */ -82,-93,-68,0,-77,-18,-8,-35,127,50,-53,-28,15,49,18,-37, 
  /* [33][0][][] */ -63,0,-87,78,-101,-86,40,13,-127,-1,-28,-86,-19,81,67,102, 
  /* [34][0][][] */ 40,19,-41,23,-25,-1,26,-11,74,-124,-47,42,-32,28,47,127, 
  /* [35][0][][] */ 42,1,-64,-41,-127,44,94,-25,9,52,-37,32,9,66,-15,38, 
  /* [36][0][][] */ -25,12,-66,56,127,6,44,71,-81,13,-60,-82,38,-65,10,40, 
  /* [37][0][][] */ -127,45,-15,-68,37,-68,-50,-25,-19,-16,-34,58,27,-68,48,-102, 
  /* [38][0][][] */ 16,111,49,-75,-127,-44,-111,-6,-12,-96,52,47,-90,-105,36,-9, 
  /* [39][0][][] */ -1,-41,24,71,2,100,69,-97,2,52,8,-50,8,86,56,127, 
  /* [40][0][][] */ 88,28,45,46,-65,-44,38,14,-111,38,-6,10,-43,21,127,1, 
  /* [41][0][][] */ 16,13,7,50,-98,93,-8,60,-55,22,-127,12,-14,42,63,-114, 
  /* [42][0][][] */ -33,-108,20,-53,127,-9,80,41,-79,-76,-55,-9,-19,23,3,52, 
  /* [43][0][][] */ -11,-127,-10,13,103,-1,-12,3,-39,-56,-88,-64,112,37,-20,25, 
  /* [44][0][][] */ -24,-62,-114,-64,40,86,54,-31,-23,-127,-50,63,-37,29,69,121, 
  /* [45][0][][] */ 30,-20,-90,-1,-127,52,-53,-75,122,-71,39,-35,15,1,-61,47, 
  /* [46][0][][] */ 72,-103,-3,3,85,-69,28,127,8,-73,27,119,-16,-71,105,-120, 
  /* [47][0][][] */ -42,-49,6,22,0,32,65,29,-32,127,31,86,-23,74,-8,63, 
  /* [48][0][][] */ 40,-9,-71,-127,30,-63,31,69,24,-72,-14,52,-29,9,-23,-111, 
  /* [49][0][][] */ 45,37,4,-13,-22,-40,15,71,-15,127,-20,34,-42,-33,58,46, 
  /* [50][0][][] */ 7,-8,5,-4,-127,-19,6,-27,46,13,19,61,-18,-62,14,0, 
  /* [51][0][][] */ 37,-3,16,-127,-27,79,12,-56,12,43,42,-77,80,57,-17,4, 
  /* [52][0][][] */ 11,-23,-6,-62,56,-75,-6,-11,49,-16,127,-57,28,-4,-35,68, 
  /* [53][0][][] */ -61,-71,48,-55,-51,-127,25,-72,-27,92,-61,90,-40,-9,44,-54, 
  /* [54][0][][] */ 36,77,19,-8,-127,-28,-62,-115,7,-13,25,26,-38,-75,39,20, 
  /* [55][0][][] */ 18,0,-26,26,-14,12,12,9,5,127,9,51,9,-21,-17,23, 
  /* [56][0][][] */ -12,-90,-22,100,-50,50,-14,92,127,21,27,37,-13,-30,11,71, 
  /* [57][0][][] */ 13,18,63,-127,31,-4,3,21,2,-50,13,97,50,-33,98,1, 
  /* [58][0][][] */ 127,-90,22,-31,55,78,-33,83,96,98,-39,25,69,-16,67,-31, 
  /* [59][0][][] */ -19,71,-2,-84,-14,-79,-5,22,1,8,-68,-83,-127,-118,73,-2, 
  /* [60][0][][] */ 77,-34,-20,56,-13,-31,-18,-50,23,127,12,79,-22,-44,-23,-50, 
  /* [61][0][][] */ 87,94,-32,-5,-112,-127,6,-56,-102,-12,-37,-34,-65,-62,31,51, 
  /* [62][0][][] */ -36,87,-46,40,-81,127,-43,60,-60,-4,-26,39,-54,45,61,-72, 
  /* [63][0][][] */ 19,-21,-74,-112,-23,-112,82,-20,-26,-105,-27,65,-87,127,71,-54, 
  /* [64][0][][] */ -14,25,14,-62,51,-41,23,127,-124,-19,-87,-26,-69,36,87,67, 
  /* [65][0][][] */ -39,-19,-54,19,38,-19,-20,-38,-103,-68,33,-13,-127,79,-47,7, 
  /* [66][0][][] */ -18,59,-15,31,-38,127,-18,26,-61,18,-32,44,-9,56,51,-71, 
  /* [67][0][][] */ -36,-51,-16,-9,15,-58,86,-94,18,-8,6,127,-29,-15,1,-124, 
  /* [68][0][][] */ 8,-127,-23,102,-19,-17,19,80,24,37,81,-6,-71,31,-34,-10, 
  /* [69][0][][] */ 17,65,127,-70,71,25,-55,73,10,67,32,48,98,-94,71,-85, 
  /* [70][0][][] */ 16,20,50,-33,86,-10,-101,-20,-121,-87,-12,35,-38,45,-127,-26, 
  /* [71][0][][] */ -75,-25,49,-74,93,-17,48,66,-65,82,-127,-17,-71,48,-77,98, 
  /* [72][0][][] */ -6,-4,80,15,-86,-50,-99,-6,-71,78,3,42,7,127,-109,-27, 
  /* [73][0][][] */ -1,-36,-23,-38,68,-87,31,-51,82,101,83,9,27,9,-74,127, 
  /* [74][0][][] */ -21,-7,-60,96,-100,-17,94,36,74,70,37,122,127,51,-28,31, 
  /* [75][0][][] */ -43,44,-31,14,-56,127,-9,19,-45,30,-42,34,1,60,22,-45, 
  /* [76][0][][] */ -54,109,-96,90,-95,-13,-29,34,61,39,-62,-41,81,-33,-127,87, 
  /* [77][0][][] */ 86,65,-106,103,68,59,37,49,42,15,127,-29,17,26,59,15, 
  /* [78][0][][] */ 21,-45,0,-75,65,-127,35,-57,39,56,109,-34,39,-9,-28,118, 
  /* [79][0][][] */ -55,48,-22,16,-10,-28,-30,9,-127,-8,64,-4,69,20,-67,-23, 
  /* [80][0][][] */ -102,29,100,38,103,67,-26,-127,-60,70,-70,-33,-38,-112,-6,67, 
  /* [81][0][][] */ 54,74,-18,-27,9,-31,79,105,-99,90,-67,-12,-34,45,101,127, 
  /* [82][0][][] */ 81,127,-94,-89,4,-73,121,-95,19,48,-72,122,115,-16,119,-50, 
  /* [83][0][][] */ -19,-67,62,53,41,59,-31,-122,80,-45,89,29,81,-74,-45,-127, 
  /* [84][0][][] */ -127,-81,-47,-13,-40,76,92,8,76,52,122,72,41,88,-71,-12, 
  /* [85][0][][] */ 99,-31,92,-39,116,5,-13,90,54,127,-86,-28,-58,20,117,9, 
  /* [86][0][][] */ -55,91,-43,2,20,57,6,-23,70,44,127,-27,-22,47,-23,-25, 
  /* [87][0][][] */ 20,-40,30,-40,41,-127,25,-32,47,-5,53,-26,22,-36,-43,48, 
  /* [88][0][][] */ -123,97,26,17,127,-26,37,-7,-80,-74,85,-66,83,117,71,-110, 
  /* [89][0][][] */ -29,23,-10,20,-39,127,-18,43,-41,2,-32,17,-32,57,15,-97, 
  /* [90][0][][] */ 27,-73,3,22,127,3,59,74,-44,-82,-100,-25,-4,23,-93,36, 
  /* [91][0][][] */ -51,21,-21,-74,8,-46,-91,37,-127,45,-126,-92,-80,-53,-24,38, 
  /* [92][0][][] */ 82,33,74,49,-116,-127,-21,3,-14,53,-28,-26,-28,-70,23,-24, 
  /* [93][0][][] */ -14,-95,-97,71,-57,-53,22,127,78,66,38,88,-53,81,14,-21, 
  /* [94][0][][] */ 127,10,96,8,32,-38,20,35,0,65,-18,29,50,21,122,7, 
  /* [95][0][][] */ -47,-16,4,-24,127,-17,26,60,-25,12,-95,-43,22,16,-44,29, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0047919801436364651, 0.0023066389840096235, 0.0051054731011390686, 0.0030518665444105864, 0.0025232743937522173, 0.0011877788929268718, 0.0040201279334723949, 0.0055972868576645851, 0.0016060896450653672, 0.0034281769767403603, 0.00090436439495533705, 0.0017800432397052646, 0.0036233474966138601, 0.0048150927759706974, 0.0025362400338053703, 0.0033879796974360943, 0.0054725967347621918, 0.0048602516762912273, 0.0029140613041818142, 0.0015477834967896342, 0.0046447934582829475, 0.0025509321130812168, 0.0040858839638531208, 0.0030088464263826609, 0.0011494426289573312, 0.0033687383402138948, 0.003562635974958539, 0.0033803950063884258, 0.0038377654273062944, 0.0049765496514737606, 0.0033801591489464045, 0.0020226591732352972, 0.0063009504228830338, 0.0010252132778987288, 0.0042725899256765842, 0.0029719278682023287, 0.0047701867297291756, 0.0056869643740355968, 0.0024036669638007879, 0.0029673893004655838, 0.0017937239026650786, 0.003666003467515111, 0.0036201367620378733, 0.0034765210002660751, 0.0026189105119556189, 0.0012536238646134734, 0.001414393656887114, 0.0033627785742282867, 0.0049019590951502323, 0.0040775747038424015, 0.0067545385099947453, 0.0026534178759902716, 0.0042227744124829769, 0.0031581798102706671, 0.0033019494730979204, 0.0057221190072596073, 0.003969347570091486, 0.0022570476867258549, 0.0017559620318934321, 0.0039146509952843189, 0.0027034629601985216, 0.0016693619545549154, 0.0035060918889939785, 0.0041343420743942261, 0.0010483640944585204, 0.002017300808802247, 0.005891844630241394, 0.0042306496761739254, 0.0024601684417575598, 0.0021840219851583242, 0.0043368390761315823, 0.0030652063433080912, 0.0028514412697404623, 0.0028999380301684141, 0.0047699734568595886, 0.0038696143310517073, 0.0027102956082671881, 0.0020051770843565464, 0.0034807862248271704, 0.0017312683630734682, 0.0031770195346325636, 0.0032838082406669855, 0.0021346886642277241, 0.0011734223226085305, 0.003440001280978322, 0.0011385083198547363, 0.0036459260154515505, 0.0048579443246126175, 0.0041414159350097179, 0.0050342874601483345, 0.0041238521225750446, 0.0013807439245283604, 0.0035643032751977444, 0.002352983457967639, 0.001648814301006496, 0.0028996560722589493, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -4021, 17038, -20712, 5823, 11912, -13789, -37200, -11079, -4253, 12596, -13473, -12241, 9766, -5755, -7318, -1335, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 8.8561391748953611e-05, 0.00010701491555664688, 0.00010975913028232753, 0.00012738542864099145, 7.6989170338492841e-05, 0.00013864714128430933, 8.6809770436957479e-05, 0.00013254847726784647, 8.6740932601969689e-05, 6.0111735365353525e-05, 0.00014970013580750674, 0.00011635718692559749, 8.8457622041460127e-05, 9.4242757768370211e-05, 0.00012445922766346484, 8.3624341641552746e-05, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 40,30,26,-40,71,75,-39,52,6,105,-6,51,-32,20,0,57,24,84,41,-75,-83,68,-16,59,66,45,40,47,-57,-53,-4,88,-12,12,-79,52,73,-127,-36,18,20,-27,63,0,-20,-50,-69,-5, 
  /* [1][0][][] */ -43,15,-81,-43,-8,83,-76,17,-24,-58,-44,27,58,-12,-31,-24,-33,-28,-2,19,-77,48,-106,-45,-52,-64,62,60,-48,-17,49,-44,19,-64,-34,44,19,-66,127,-48,-27,20,-65,-30,16,58,23,30, 
  /* [2][0][][] */ -14,-2,70,-44,-20,-72,21,28,90,105,-72,17,119,-53,127,79,-71,-31,-16,34,76,-83,-45,-103,10,-33,35,-69,28,43,-59,18,20,-29,57,43,-66,9,2,-23,36,44,59,10,41,-75,105,-53, 
  /* [3][0][][] */ 49,0,-16,-31,15,105,33,-34,35,-70,27,-35,-56,3,4,49,-29,-67,37,-127,-14,14,-21,-3,-37,90,117,74,-24,-45,31,49,61,-40,107,16,-38,-64,-6,48,25,17,-17,6,27,21,-30,-21, 
  /* [4][0][][] */ 112,16,3,-42,87,75,28,2,81,-7,-116,19,63,-25,36,-18,-94,-127,-3,-109,-17,57,-31,-41,-61,121,-99,108,-59,-72,16,64,61,-55,16,-4,5,18,-33,27,-59,-17,10,59,-45,86,-30,-47, 
  /* [5][0][][] */ -9,-13,-49,4,-24,56,29,-32,64,47,36,105,61,-30,29,2,-39,127,-14,35,-3,8,-69,-18,37,1,-65,-43,-15,19,13,-21,-34,2,33,10,-44,7,-94,-3,95,-25,31,55,-15,-2,-48,28, 
  /* [6][0][][] */ 54,39,6,78,-2,-21,97,-56,18,37,127,102,32,59,-43,31,34,-30,-84,78,45,-82,-37,63,-123,79,82,-9,102,53,-10,-18,99,-64,-117,-23,74,75,2,-12,-6,45,52,-36,65,107,32,-4, 
  /* [7][0][][] */ -85,-1,-33,32,-61,-57,3,45,70,121,-43,-63,-81,29,-31,-19,-69,93,6,127,-44,47,23,15,-25,-86,-28,-78,37,43,-8,-5,-31,14,4,0,7,-44,121,12,-3,23,28,-26,47,44,-13,7, 
  /* [8][0][][] */ 3,-87,56,-72,65,-51,76,-33,-30,-127,25,4,-31,-18,31,42,29,2,-28,99,-3,43,-21,17,78,-5,-66,-23,-121,-24,-64,-87,8,-69,-2,82,2,17,97,22,20,16,88,105,-19,-64,-62,95, 
  /* [9][0][][] */ 5,-21,10,-61,25,75,-39,48,26,-29,-46,-8,17,-69,127,-11,5,-121,65,32,-87,48,68,-47,-20,-80,-30,73,66,77,-51,-46,-50,15,-29,119,-33,-49,-61,-38,-56,6,27,104,72,80,-87,7, 
  /* [10][0][][] */ -12,2,-25,-18,36,30,-56,-41,52,32,65,-8,-43,-22,38,-53,-68,127,-11,64,0,-17,15,37,-53,37,11,112,44,-4,-35,-13,73,12,-1,13,-15,-59,-40,27,-74,13,23,-18,7,47,20,35, 
  /* [11][0][][] */ -9,35,-21,43,8,38,7,3,24,16,-127,-71,56,34,-2,-34,0,11,-23,-49,-5,0,91,0,51,15,-24,9,4,29,-16,68,35,-4,-55,7,44,77,94,22,28,-27,67,-8,-31,-19,66,-1, 
  /* [12][0][][] */ -63,5,35,26,-59,-44,-3,-5,-47,-40,-127,17,86,-123,12,31,69,118,89,-122,-26,33,-57,-83,-14,-29,41,-12,7,18,-20,92,56,93,61,-54,-81,-40,33,2,-25,14,66,-15,35,-18,-63,-50, 
  /* [13][0][][] */ -49,-112,-43,-86,10,23,62,3,-91,17,103,-53,35,23,115,20,111,17,-22,-98,73,-52,127,-4,-57,6,-14,12,-22,-103,-93,-3,58,-20,-71,48,37,-64,61,-74,-10,47,66,42,38,-32,89,-69, 
  /* [14][0][][] */ 61,19,-49,3,-47,14,-70,-36,-13,70,53,34,-19,-57,16,-36,51,-109,14,6,96,-51,19,11,-4,127,-90,-11,-54,-35,-94,5,111,42,97,-31,-67,15,-15,75,-15,-20,110,-12,-50,-50,-34,40, 
  /* [15][0][][] */ -74,12,43,31,98,-8,4,27,-2,78,-9,63,54,-2,-40,-30,7,54,5,-40,21,-56,-54,-55,41,-68,-43,70,-28,15,22,-3,-76,-4,127,-2,-101,22,70,-32,-60,-26,0,-11,-46,-28,-22,5, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0037638589274138212, 0.0045481338165700436, 0.0046647628769278526, 0.0054138805717229843, 0.003272039582952857, 0.0058925035409629345, 0.0036894152872264385, 0.0056333104148507118, 0.003686489537358284, 0.002554748672991991, 0.0063622556626796722, 0.0049451803788542747, 0.0037594488821923733, 0.004005317110568285, 0.005289517343044281, 0.0035540345124900341, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 13677, -1003, 20812, -258, 15604, -601, 41638, -63, 9117, 48464, 3336, 27438, -1029, 15416, 43214, 19992, 722, -4186, 2349, 46643, -673, 23989, 34, 16662, 20299, 47534, 2202, -118, -6263, 21615, 23784, -285, 2108, -3387, 1166, 11988, 8294, 35487, 4248, 24443, 29055, 1508, 668, 14536, -595, 2052, 34372, 23112, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.1421661889180541e-05, 9.1146517661400139e-05, 6.6361957578919828e-05, 0.00011191213707206771, 9.4264942163135856e-05, 0.00013244154979474843, 4.6414254029514268e-05, 0.0001476344041293487, 7.556779746664688e-05, 4.7387653467012569e-05, 5.1644063205458224e-05, 8.5851032054051757e-05, 6.5224812715314329e-05, 9.3016875325702131e-05, 3.8386464439099655e-05, 0.00011469290620880201, 9.6104035037569702e-05, 5.9239013353362679e-05, 0.00011855160119011998, 5.3366318752523512e-05, 7.2916147473733872e-05, 4.8768019041744992e-05, 8.1856160250026733e-05, 0.00011264824570389464, 6.680122169200331e-05, 5.1934690418420359e-05, 4.5650591346202418e-05, 5.6334756664000452e-05, 0.00017967958410736173, 7.7242300903890282e-05, 5.720365879824385e-05, 0.00038662154111079872, 8.009577140910551e-05, 0.00012265570694580674, 7.8554905485361814e-05, 6.8763059971388429e-05, 8.7469015852548182e-05, 5.9025980590377003e-05, 6.8640387326013297e-05, 0.00012525150668807328, 5.217488796915859e-05, 0.00016894226428121328, 0.00025765507598407567, 6.370950723066926e-05, 0.00017441812087781727, 5.2965409850003198e-05, 5.1687882660189644e-05, 7.0450143539346755e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -41,60,-127,112,-54,77,-72,127,-61,-94,69,-90,76,-67,-50,-49,91,93,87,-123,93,-67,88,-125,-84,-89,100,114,-117,-127,-127,70,108,-89,59,-97,-86,-103,78,-82,-35,-88,127,-116,69,54,-25,-100, -63,67,-83,101,-42,110,-47,82,-92,-104,96,-77,101,-100,-46,-58,101,118,127,-116,127,-127,100,-127,-65,-123,91,127,44,-126,-122,127,127,-127,81,-65,-72,-127,118,-127,-97,77,121,-84,-45,99,-32,-89, -56,31,-41,10,-29,38,-34,67,-66,-72,30,-61,38,-127,-18,-5,30,68,68,-52,47,-92,51,-43,-59,-62,46,67,100,-53,-76,66,61,-96,26,-1,-1,-52,73,-89,-119,-63,55,-18,-54,68,-29,-33, 
  /* [0][1][][] */ -78,77,-46,127,-61,108,-127,91,-66,-116,94,-99,106,-84,-110,-76,112,101,-78,-127,118,-112,88,-60,-95,-116,105,90,-125,-83,-93,60,94,53,99,-127,-120,-96,90,-67,-88,-92,82,-127,127,59,-127,-90, -116,127,-88,107,-127,127,-118,115,-127,-127,127,-127,127,-105,-127,-127,127,127,-66,-120,117,-121,127,-93,-127,-127,127,114,42,-78,-107,45,121,50,127,-118,-127,-116,127,-93,-97,127,94,-104,-47,127,-103,-127, -75,66,-95,34,-61,53,-82,50,-87,-85,77,-57,91,-95,-51,-7,77,74,-57,-58,49,-98,50,-7,-82,-77,56,80,127,-68,-33,-13,20,29,73,-45,-5,-56,92,-41,-55,-71,34,-50,-87,85,-46,-17, 
  /* [0][2][][] */ -66,31,-8,97,-53,30,-73,111,-85,-58,51,-59,83,-42,-85,-60,65,48,-57,-23,46,-62,52,-54,-114,-68,60,27,-84,-40,-47,11,34,85,68,-65,-73,-91,51,-53,-127,-75,23,-126,80,41,-95,-67, -127,45,-91,75,-106,39,-75,104,-115,-54,70,-71,77,-105,-76,-51,87,52,-68,-29,46,-110,36,-60,-120,-83,71,40,26,-65,-48,40,47,90,76,-74,-60,-89,65,-37,-59,83,43,-91,-26,68,-96,-88, -69,49,-74,20,-81,9,-83,82,-36,-31,38,-46,77,-68,-22,16,29,43,-36,-4,16,-45,63,-21,-59,-43,61,6,99,-46,-24,34,1,54,51,1,-15,-55,50,-42,-17,-11,27,-11,-20,63,-30,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0034604205284267664, 0.0038737270515412092, 0.0028203832916915417, 0.0047562657855451107, 0.0040062600746750832, 0.0056287660263478756, 0.0019726057071238756, 0.0062744617462158203, 0.0032116312067955732, 0.0020139752887189388, 0.0021948725916445255, 0.0036486687604337931, 0.0027720544021576643, 0.0039532170630991459, 0.0016314247623085976, 0.0048744482919573784, 0.0040844213217496872, 0.0025176580529659986, 0.0050384430214762688, 0.0022680684924125671, 0.0030989362858235836, 0.0020726406946778297, 0.0034788867924362421, 0.0047875503078103065, 0.0028390518855303526, 0.0022072242572903633, 0.0019401500467211008, 0.0023942270781844854, 0.0076363822445273399, 0.0032827977556735277, 0.0024311554152518511, 0.0164314154535532, 0.0034040701575577259, 0.0052128676325082779, 0.0033385835122317076, 0.0029224299360066652, 0.0037174331955611706, 0.0025086042005568743, 0.0029172163922339678, 0.0053231888450682163, 0.0022174327168613672, 0.0071800462901592255, 0.010950339958071709, 0.0027076539117842913, 0.0074127698317170143, 0.002251029945909977, 0.0021967350039631128, 0.002994131064042449, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1197, -577, 1064, -2079, 2938, -1474, 4151, -2114, 327, 1229, 3248, 2789, 666, -424, 976, 6505, -1673, 4118, 3258, 782, -887, 1834, -325, 4493, 2106, 1284, 837, -1221, 8614, -47, 3195, -1561, -315, 3023, -955, 1691, 1343, 617, 122, 6841, 1624, 7310, -4135, 1019, 6133, 102, 1524, 1990, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00030371782486326993, 0.00035579170798882842, 0.00031886500073596835, 0.00024089314683806151, 0.00027019961271435022, 0.00019871666154358536, 0.00018659807392396033, 0.00022965540119912475, 0.00035850927815772593, 0.00031652566394768655, 0.00016651711484882981, 0.00022820457525085658, 0.00027144906925968826, 0.00030352952308021486, 0.00026037966017611325, 0.0001399418106302619, 0.0002802255330607295, 0.00021321325039025396, 0.00023009639699012041, 0.00033968291245400906, 0.00030675547895953059, 0.00027027365285903215, 0.0002503279538359493, 0.00017594250675756484, 0.00023810807033441961, 0.00032244180329144001, 0.00036703571095131338, 0.00032479001674801111, 0.00010507732076803222, 0.00043395758257247508, 0.00014928258315194398, 0.00019423670892138034, 0.00029233700479380786, 0.00024011093773879111, 0.00024217972531914711, 0.00026084494311362505, 0.00025610558805055916, 0.00042485015001147985, 0.00035991246113553643, 0.00013681246491614729, 0.00033714389428496361, 0.00011768622061936185, 0.00013209912867750973, 0.00037084025098010898, 0.0001394114806316793, 0.00031684682471677661, 0.00029365808586589992, 0.00027238350594416261, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 74,45,116,-52,77,123,-127,-49, 
  /* [1][0][][] */ 2,-67,-127,-1,44,35,19,14, 
  /* [2][0][][] */ -127,-9,-43,-34,64,9,-66,-49, 
  /* [3][0][][] */ 17,45,127,-61,-3,-94,0,-3, 
  /* [4][0][][] */ -127,25,-41,-7,46,28,-25,-41, 
  /* [5][0][][] */ -99,23,-51,-6,0,53,-83,-127, 
  /* [6][0][][] */ -37,-127,-109,39,106,10,-1,58, 
  /* [7][0][][] */ -56,-127,-67,-57,-66,-48,9,71, 
  /* [8][0][][] */ 81,47,-2,-14,75,-94,-127,37, 
  /* [9][0][][] */ -45,61,-48,93,-59,-38,127,-22, 
  /* [10][0][][] */ -25,127,39,61,111,-20,-7,53, 
  /* [11][0][][] */ -83,-53,-30,-23,-102,127,126,3, 
  /* [12][0][][] */ 72,52,-127,31,-14,-53,-86,-7, 
  /* [13][0][][] */ 75,-49,-85,-3,10,-127,-41,-15, 
  /* [14][0][][] */ -4,-64,94,39,127,-109,-48,23, 
  /* [15][0][][] */ -58,-35,15,127,86,76,-71,42, 
  /* [16][0][][] */ 108,46,-32,9,54,-127,-105,-20, 
  /* [17][0][][] */ 48,127,60,74,51,51,24,-77, 
  /* [18][0][][] */ 32,-9,-11,-1,127,1,49,9, 
  /* [19][0][][] */ 20,114,24,15,-127,8,20,-36, 
  /* [20][0][][] */ -56,28,80,-127,18,51,-17,116, 
  /* [21][0][][] */ -26,83,43,-122,14,52,-39,127, 
  /* [22][0][][] */ -51,-77,-87,20,-127,98,77,-34, 
  /* [23][0][][] */ 109,55,-127,9,33,-63,-70,-22, 
  /* [24][0][][] */ -84,26,13,16,-12,101,-113,127, 
  /* [25][0][][] */ -94,-53,-127,14,-49,-58,53,89, 
  /* [26][0][][] */ 38,1,-43,-26,104,-36,127,-38, 
  /* [27][0][][] */ 127,-66,18,86,-4,30,-18,83, 
  /* [28][0][][] */ 42,72,85,-3,127,-43,45,-21, 
  /* [29][0][][] */ -16,0,-15,-42,-59,5,127,-45, 
  /* [30][0][][] */ 74,-127,-41,-74,-127,-19,-10,-88, 
  /* [31][0][][] */ 12,21,-6,-4,-127,5,-28,-8, 
  /* [32][0][][] */ 42,-49,-34,91,-12,-81,127,-122, 
  /* [33][0][][] */ 27,127,47,48,27,-8,42,-31, 
  /* [34][0][][] */ -124,-14,127,-4,-10,93,80,21, 
  /* [35][0][][] */ -55,86,127,-18,-63,-56,-47,28, 
  /* [36][0][][] */ -103,12,127,3,-31,121,76,21, 
  /* [37][0][][] */ -24,-57,1,-127,-19,-99,63,44, 
  /* [38][0][][] */ 47,-11,90,-61,56,36,-127,10, 
  /* [39][0][][] */ -5,111,-127,-23,-35,-18,-4,99, 
  /* [40][0][][] */ 55,-44,20,30,16,2,1,127, 
  /* [41][0][][] */ -38,108,127,-1,37,72,-92,23, 
  /* [42][0][][] */ 72,-127,-117,-17,-98,34,12,-92, 
  /* [43][0][][] */ -6,-56,13,-69,127,-24,8,44, 
  /* [44][0][][] */ 11,127,118,2,-3,68,-91,24, 
  /* [45][0][][] */ -31,63,-7,81,-114,36,-127,25, 
  /* [46][0][][] */ -26,-40,70,52,-123,-127,-39,-18, 
  /* [47][0][][] */ -12,90,59,-124,-127,42,-19,68, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0030092617962509394, 0.0035252140369266272, 0.0031593411695212126, 0.0023867895361036062, 0.0026771605480462313, 0.0019689013715833426, 0.0018488293280825019, 0.002275445032864809, 0.0035521399695426226, 0.0031361628789454699, 0.0016498655313625932, 0.0022610700689256191, 0.0026895401533693075, 0.0030073958914726973, 0.0025798636488616467, 0.0013865552609786391, 0.0027764979749917984, 0.0021125348284840584, 0.0022798143327236176, 0.0033656067680567503, 0.0030393591150641441, 0.002677893964573741, 0.0024802703410387039, 0.0017432530876249075, 0.0023591946810483932, 0.0031947803217917681, 0.0036366204731166363, 0.0032180468551814556, 0.0010411149123683572, 0.0042996881529688835, 0.0014791043940931559, 0.0019245136063545942, 0.0028964995872229338, 0.0023790393024682999, 0.0023995370138436556, 0.0025844736956059933, 0.0025375157129019499, 0.0042094509117305279, 0.0035660429857671261, 0.001355549436993897, 0.003340449882671237, 0.0011660449672490358, 0.0013088491978123784, 0.0036743162199854851, 0.0013813006225973368, 0.0031393449753522873, 0.002909588860347867, 0.0026987986639142036, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 3933, 2815, 24738, -4110, 5536, -14350, 638, -11441, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 8.4069535660091788e-05, 0.00011746855307137594, 0.00015345796418841928, 0.00010856200970010832, 0.00013375210983213037, 0.000150376494275406, 9.6822041086852551e-05, 0.00010134070907952264, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -59,-35,-20,-52,-16,-16,90,103,-120,-93,2,21,-69,-8,-70,41,-85,-9,26,127,77,-68,7,99,73,63,40,8,-96,-72,-74,-47,-71,114,61,-48,39,-44,84,-2,46,4,8,-106,53,-45,-51,-94, 
  /* [1][0][][] */ -9,73,-33,-44,-60,49,-29,-61,-38,64,-17,1,43,34,-62,-2,-17,-127,66,-53,122,-1,-68,29,57,-3,-102,47,26,-9,65,32,-54,-13,8,-24,-25,96,-16,-16,93,33,-7,2,100,32,-28,62, 
  /* [2][0][][] */ -35,-27,127,-8,98,-51,-15,26,-37,2,-2,43,11,-45,-48,-116,-57,-101,-32,15,-109,30,-57,-35,-50,16,-16,-51,-32,17,-28,-9,-14,3,30,2,31,-35,-54,8,44,-46,23,-64,-49,-57,-61,-54, 
  /* [3][0][][] */ 53,39,52,8,17,-40,29,81,-57,-20,40,-20,-76,47,-29,42,62,36,-41,13,-97,-80,123,-1,-16,-5,-59,-14,-62,71,127,-77,-5,-105,-20,37,-24,-82,-16,65,-55,-58,76,-21,-102,-51,62,-20, 
  /* [4][0][][] */ 11,-3,68,-27,9,-8,-3,-23,-56,-4,-32,7,44,-71,29,-103,25,45,-3,-40,14,33,2,19,6,2,55,-21,23,22,-127,-15,-29,-17,-3,10,42,5,27,4,-37,-8,-59,9,-23,-77,16,33, 
  /* [5][0][][] */ 24,-50,55,26,23,25,33,0,-74,-12,-48,29,40,21,28,-28,90,71,-4,-13,85,-43,127,-88,-14,49,-4,47,18,26,-40,-54,1,-58,-41,15,48,26,64,16,-87,15,42,26,56,-32,66,4, 
  /* [6][0][][] */ -63,59,-115,73,54,27,27,10,-21,-25,42,-82,-94,-30,-46,32,-103,42,-7,93,13,37,-78,-101,-15,-17,39,68,-28,-26,-40,14,44,72,-54,-37,-31,9,93,-5,50,56,-104,-62,-43,127,-36,-23, 
  /* [7][0][][] */ 38,58,-87,9,7,61,118,48,50,74,-127,-11,-30,4,-39,-65,23,36,107,99,66,30,100,30,112,91,-67,80,-62,37,-18,-89,35,-80,-37,25,2,79,-54,86,-56,54,-6,-78,71,7,76,-28, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0035729552619159222, 0.0049924133345484734, 0.0065219635143876076, 0.0046138851903378963, 0.0056844647042453289, 0.006391000933945179, 0.0041149365715682507, 0.0043069799430668354, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -2373, 15274, -1246, -123, 1182, -1272, 1087, 854, -3907, -10, -4710, -139, -1707, -1799, -2012, 3093, 10513, 3488, -96, -7649, -8427, -729, 19367, -7432, -4929, -2123, 6710, -7148, -1063, -544, -8574, 10299, 4175, 485, 3862, -597, -43, -742, 14855, -870, 6933, -6632, 1221, 3452, -1346, 12782, -1039, -2340, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00026764458743855357, 0.00010345633199904114, 0.00081563717685639858, 0.00022020829783286899, 0.00018529770022723824, 0.00021415999799501151, 0.00021473526430781931, 0.00028188436408527195, 0.0001117096035159193, 0.00018891440413426608, 0.00027593120466917753, 0.0020691934041678905, 0.00042905611917376518, 0.00035540535463951528, 0.00043660125811584294, 0.00087493710452690721, 0.0001289667998207733, 7.8192402725107968e-05, 0.00030747204436920583, 0.00019693966896738857, 0.00024486228358000517, 0.00029665842885151505, 8.7094413174781948e-05, 0.00035412597935646772, 0.00019138453353662044, 0.00031906063668429852, 0.00045539462007582188, 0.00017606295295991004, 0.00027535436674952507, 0.00045670627150684595, 0.00014439057849813253, 0.00013789448712486774, 0.00016587776190135628, 0.0002275162551086396, 0.0001458168844692409, 0.00039879337418824434, 0.003147131996229291, 0.00034485262585803866, 0.00011022212856914848, 0.00019438346498645842, 0.0001666174503043294, 0.00011146388715133071, 0.0002624084590934217, 0.00025240355171263218, 0.00047441694187000394, 6.1362683482002467e-05, 8.7019339844118804e-05, 0.00018566218204796314, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 31,-79,10,19,-9,-60,-44,66,-45,8,-51,11,51,14,-11,-2,113,-10,40,17,8,2,-88,45,-7,-8,-20,-34,-54,84,-7,-127,57,-19,-65,-61,-6,-55,-22,-36,-21,33,8,29,-24,86,127,0, -127,-119,-20,127,-73,85,-99,127,18,6,-21,10,53,42,2,-44,-45,46,21,16,9,127,7,127,127,-24,-61,84,63,-127,-3,-108,83,-10,-39,-111,25,9,-71,-41,-121,14,-113,-99,38,66,30,127, 5,-11,9,7,-39,52,49,36,8,-62,-32,12,-18,15,-1,-1,-83,26,-48,-10,-18,-30,127,42,-36,-9,-8,11,18,49,28,-9,1,-11,-40,91,17,9,-7,89,30,-8,26,-30,-6,70,-20,-11, 
  /* [0][1][][] */ -6,-36,-25,0,51,-127,127,-92,-24,12,32,30,127,15,5,-25,-23,-51,26,60,82,-43,12,20,-57,127,-106,-14,127,-97,32,-72,-26,13,-50,4,15,-60,-55,-8,127,127,17,-127,-70,-58,-10,70, 104,-127,127,-4,127,46,-70,-43,39,127,127,-127,-89,127,127,127,127,127,95,127,127,92,-14,8,118,-85,-127,127,32,123,127,52,-127,127,127,127,-127,127,-127,-88,53,62,-127,-23,127,-127,-37,70, 27,34,-39,-10,-72,84,-126,121,92,-89,33,59,-41,7,3,-57,9,2,-127,40,6,-94,-35,4,64,-11,-22,89,-80,-29,40,-46,-24,28,106,13,43,-8,-6,-61,127,25,45,63,-51,109,74,-58, 
  /* [0][2][][] */ 13,7,7,-35,12,-48,-9,-12,2,-5,16,4,-9,-13,-5,1,-49,18,8,-32,9,-9,76,-3,-73,16,52,-34,18,4,21,19,14,-12,-94,8,-1,-2,10,29,-52,47,28,8,-28,7,-15,8, 53,-22,-31,-40,30,12,118,-118,127,-18,6,7,-67,-24,-21,-59,-31,85,6,44,23,9,-31,-42,-51,60,109,-12,-85,9,-15,-11,-22,-14,-19,-6,50,-12,-11,127,-127,18,2,57,48,38,5,-97, -6,21,4,-24,-25,0,10,-108,-30,-5,-2,0,29,-16,-24,15,38,58,-24,1,3,-22,-41,-4,33,-16,43,-10,-17,-1,7,-26,20,-23,4,-29,-5,4,29,22,-21,-11,16,10,-12,38,68,-25, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.01137489452958107, 0.0043968940153717995, 0.0346645787358284, 0.0093588521704077721, 0.0078751519322395325, 0.0091017996892333031, 0.0091262487694621086, 0.011980085633695126, 0.0047476580366492271, 0.0080288620665669441, 0.011727076023817062, 0.087940715253353119, 0.018234884366393089, 0.015104727819561958, 0.018555553629994392, 0.037184827029705048, 0.005481088999658823, 0.003323177108541131, 0.013067562133073807, 0.0083699356764554977, 0.010406646877527237, 0.012607983313500881, 0.0037015124689787626, 0.015050354413688183, 0.0081338426098227501, 0.013560077175498009, 0.019354270771145821, 0.0074826753698289394, 0.011702559888362885, 0.019410016015172005, 0.006136599462479353, 0.005860515870153904, 0.0070498045533895493, 0.0096694407984614372, 0.0061972173862159252, 0.016948718577623367, 0.13375310599803925, 0.01465623639523983, 0.0046844403259456158, 0.0082612968981266022, 0.0070812413468956947, 0.0047372151166200638, 0.011152359656989574, 0.010727150365710258, 0.020162720233201981, 0.0026079139206558466, 0.0036983219906687737, 0.0078906426206231117, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 1783, 3701, 15132, 2860, 2038, -1154, 3818, 13542, 1253, -284, 3383, -2669, 16507, -1128, 2135, 38634, -217, 2060, 22, 2886, 3374, 3649, 822, 18457, 4896, 2881, 12356, 2303, 6035, 5445, 459, 1374, 886, 1610, 136, 29, -3358, -616, 1955, 2160, 3971, 2815, 2791, 4832, 7692, 2671, 2456, 4286, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00029734900454059243, 0.00018700900545809418, 6.4055813709273934e-05, 0.00016952188161667436, 0.00024990641395561397, 0.00028699843096546829, 0.0001892094878712669, 7.2907329013105482e-05, 0.0002793284656945616, 0.00032283176551572978, 0.00027775167836807668, 0.00019843273912556469, 5.6934888561954722e-05, 0.00030181222246028483, 0.0002413092297501862, 3.0416504159802571e-05, 0.00038992534973658621, 0.000222795206354931, 0.00036219283356331289, 0.00022384227486327291, 0.00022926094243302941, 0.0002211964747402817, 0.00038268615026026964, 5.774552482762374e-05, 0.00016850422252900898, 0.00017169486091006547, 8.3571903815027326e-05, 0.00024387826852034777, 0.00013897423923481256, 0.00014316270244307816, 0.00050946674309670925, 0.00039457442471757531, 0.0002620659361127764, 0.00023693626280874014, 0.00030563597101718187, 0.00029852351872250438, 0.00018628561520017684, 0.00032816294697113335, 0.00028407300123944879, 0.00025412187096662819, 0.00019264280854258686, 0.00022797532437834889, 0.00025315734092146158, 0.00017286633374169469, 0.00011695372086251155, 0.0002548196935094893, 0.00033233943395316601, 0.00017010999727062881, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 70,127,-93,-81,1,90,-1,23, 
  /* [1][0][][] */ 45,-81,33,-127,-56,45,-77,-40, 
  /* [2][0][][] */ -41,113,110,33,127,-9,65,22, 
  /* [3][0][][] */ 80,25,-86,41,-6,-75,-127,-25, 
  /* [4][0][][] */ 2,50,30,-75,-61,127,105,52, 
  /* [5][0][][] */ 38,115,-126,-67,88,127,48,-13, 
  /* [6][0][][] */ -13,127,35,90,49,-1,21,-85, 
  /* [7][0][][] */ 122,-24,-30,24,20,33,127,-11, 
  /* [8][0][][] */ 87,127,37,75,64,72,49,-81, 
  /* [9][0][][] */ 73,127,-108,-75,22,99,0,88, 
  /* [10][0][][] */ -63,-36,17,-44,-15,-35,-57,127, 
  /* [11][0][][] */ 28,-119,-127,-7,0,-14,8,-19, 
  /* [12][0][][] */ -31,-98,-125,-34,-127,65,-86,56, 
  /* [13][0][][] */ -13,-4,-108,96,-127,-29,6,-4, 
  /* [14][0][][] */ -46,-42,-127,-17,26,-2,-9,-50, 
  /* [15][0][][] */ 14,-118,-127,24,-70,-39,-66,2, 
  /* [16][0][][] */ 127,-69,-14,66,-76,15,26,100, 
  /* [17][0][][] */ -6,113,127,-20,-54,-19,-34,-36, 
  /* [18][0][][] */ 9,-127,39,47,8,-59,37,-87, 
  /* [19][0][][] */ 118,-51,-50,34,-127,34,42,117, 
  /* [20][0][][] */ -28,-127,78,75,-15,-92,1,-77, 
  /* [21][0][][] */ -3,-36,-9,-36,127,-15,34,28, 
  /* [22][0][][] */ -127,41,-78,48,72,59,-111,-111, 
  /* [23][0][][] */ -90,-18,77,14,-127,106,95,-13, 
  /* [24][0][][] */ -39,36,-16,-48,-65,127,92,27, 
  /* [25][0][][] */ -47,-84,-127,-88,-54,0,-41,-13, 
  /* [26][0][][] */ 0,73,-13,127,-69,35,-72,-12, 
  /* [27][0][][] */ 9,-122,43,95,36,-69,7,-127, 
  /* [28][0][][] */ 39,108,31,47,127,-36,-14,-43, 
  /* [29][0][][] */ 127,21,-42,-32,120,-124,-88,19, 
  /* [30][0][][] */ 29,-10,38,-127,29,-6,26,-40, 
  /* [31][0][][] */ 41,-48,1,60,3,20,16,127, 
  /* [32][0][][] */ -125,-53,-12,-58,-40,108,57,127, 
  /* [33][0][][] */ -27,61,60,-25,37,127,-119,104, 
  /* [34][0][][] */ 52,127,-91,-52,28,61,-77,101, 
  /* [35][0][][] */ 25,-127,4,55,-44,-67,13,-100, 
  /* [36][0][][] */ -3,-52,-84,-6,-127,-66,-21,25, 
  /* [37][0][][] */ -58,-127,85,74,-45,-72,-38,-68, 
  /* [38][0][][] */ -78,26,69,-68,-127,-65,-61,78, 
  /* [39][0][][] */ 77,-127,118,67,-25,-67,-19,-77, 
  /* [40][0][][] */ -16,71,24,57,-127,0,-52,23, 
  /* [41][0][][] */ 127,127,-74,-94,58,-5,-10,10, 
  /* [42][0][][] */ -9,-43,-9,11,127,26,36,15, 
  /* [43][0][][] */ 127,37,92,41,-68,-26,65,106, 
  /* [44][0][][] */ 68,75,-26,54,39,-123,-127,24, 
  /* [45][0][][] */ 73,12,13,8,77,-127,-7,-62, 
  /* [46][0][][] */ 60,-45,-10,127,38,50,21,67, 
  /* [47][0][][] */ -84,-122,38,79,-76,40,127,-52, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0038705524057149887, 0.0024342711549252272, 0.00083380599971860647, 0.0022066435776650906, 0.0032529984600841999, 0.0037358200643211603, 0.0024629146791994572, 0.00094902497949078679, 0.0036359813529998064, 0.0042022578418254852, 0.0036154564004391432, 0.0025829724036157131, 0.00074111385038122535, 0.0039286492392420769, 0.003141090041026473, 0.00039592757821083069, 0.0050756060518324375, 0.0029000954236835241, 0.0047146156430244446, 0.0029137248639017344, 0.0029842590447515249, 0.0028792850207537413, 0.0049813743680715561, 0.00075166579335927963, 0.0021933969110250473, 0.0022349290084093809, 0.0010878442553803325, 0.0031745308078825474, 0.0018090090015903115, 0.0018635297892615199, 0.0066316602751612663, 0.0051361224614083767, 0.0034112771973013878, 0.003084167605265975, 0.0039784223772585392, 0.0038858407642692327, 0.0024248550180345774, 0.0042716530151665211, 0.0036977403797209263, 0.003307870589196682, 0.0025076055899262428, 0.002967524342238903, 0.0032953154295682907, 0.0022501780185848475, 0.001522370963357389, 0.0033169540110975504, 0.004326018039137125, 0.0022142990492284298, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 6419, 16983, -6069, 8794, -383, -295, -11467, -16399, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00021010692580603063, 0.00012072866229573265, 0.00014345408999361098, 0.00012062151654390618, 0.00016315342509187758, 0.00010670207848306745, 0.00018214633746538311, 0.00012634714948944747, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -45,-8,28,17,-34,-8,5,15,-45,-3,-60,-48,-26,-62,-15,-29,44,-36,39,37,-11,32,-32,12,7,-42,51,-11,-6,-26,16,12,83,26,35,-127,15,-3,-17,-33,-1,-13,47,47,30,3,26,3, 
  /* [1][0][][] */ 9,30,64,-26,-10,38,-50,-31,6,21,-24,-91,4,93,-22,62,-33,21,-20,-52,2,-87,-39,18,-69,-11,-13,-127,-20,-29,19,-62,42,82,-40,9,114,-31,-7,56,-43,37,-79,-20,118,-14,-39,-30, 
  /* [2][0][][] */ -5,-25,-52,11,1,47,19,3,-3,43,-5,28,66,-93,11,-52,34,-92,31,29,-38,51,2,30,-28,75,-15,-78,32,13,24,-68,-49,-93,19,-22,100,29,-10,-58,6,32,87,35,127,23,19,19, 
  /* [3][0][][] */ -10,32,-86,47,17,-36,-78,-111,18,-10,-40,0,3,28,33,83,-6,6,-50,27,-3,-117,21,-67,-66,-24,127,-17,-51,10,-66,7,-8,-85,13,-5,-31,-34,-20,103,-64,-37,-6,20,37,6,-40,46, 
  /* [4][0][][] */ -22,-57,-7,11,32,-31,-11,-8,30,-35,63,-82,1,28,8,23,-24,-30,12,-25,-9,-56,4,-17,12,-12,41,37,37,19,-14,19,-4,0,-7,5,-69,90,40,-32,23,-24,-16,-16,-80,14,127,14, 
  /* [5][0][][] */ 37,-24,7,27,28,-43,39,-124,31,-38,-8,127,-85,82,20,-72,-3,-94,18,9,-42,78,-24,-49,-65,87,-26,5,-18,53,-45,-35,29,56,57,-6,-38,-13,-51,-49,30,-34,-45,-1,-32,59,104,25, 
  /* [6][0][][] */ 56,-27,17,-8,-32,-24,-26,13,-39,2,-42,127,-43,-38,-8,57,7,45,15,34,25,-81,-25,20,19,42,-64,1,11,-33,13,36,0,6,-7,2,23,11,-6,-5,-13,-18,42,64,1,-33,72,-15, 
  /* [7][0][][] */ -18,1,-2,59,27,32,0,22,26,6,60,-11,116,101,56,49,35,43,-7,14,15,-19,-86,-34,16,6,-25,59,32,-28,-31,-9,13,-2,45,-87,-67,33,32,52,-26,29,80,127,-52,-17,-100,62, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0089295441284775734, 0.0051309680566191673, 0.0060967989265918732, 0.0051264143548905849, 0.0069340206682682037, 0.004534838255494833, 0.0077412193641066551, 0.0053697540424764156, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 12273, 5076, 4203, -378, -512, -284, -1345, 31440, -1259, 1215, 8663, 70627, -46, 3006, 1959, 10394, -2901, 14152, 2672, 9025, 9233, -961, 3531, -9161, 11053, 688, 1302, 14012, 315, -2977, -11970, 8953, 3326, 1936, -822, 2440, -10254, 6030, -597, 20163, -1055, -1926, 3807, 112, 2305, -2294, 4299, -1274, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.4457227785605937e-05, 0.00011372056906111538, 0.00016586060519330204, 0.00015112907567527145, 0.00078509625745937228, 0.00014290114631876349, 0.00010823791672009975, 8.6709791503380984e-05, 0.00013325356121640652, 8.4295614215079695e-05, 6.2771934608463198e-05, 4.8238467570627108e-05, 9.4195653218775988e-05, 5.8013749367091805e-05, 0.00020340066112112254, 0.0001796711003407836, 0.00012515345588326454, 0.0004647579335141927, 0.00012801220873370767, 0.00011880827514687553, 0.00013876539014745504, 0.00026504576089791954, 0.00011884812556672841, 0.0002442756958771497, 0.0001082842645701021, 0.00010573666804702953, 6.0002676036674529e-05, 8.5451654740609229e-05, 0.00023017880448605865, 0.00068036152515560389, 0.00026705095660872757, 9.059415606316179e-05, 0.00014836488116998225, 0.00015107147919479758, 0.00019637402147054672, 5.6417560699628666e-05, 6.9018060457892716e-05, 5.4973053920548409e-05, 0.00012240328942425549, 6.9319270551204681e-05, 0.00016363490431103855, 0.00014587397163268179, 7.0846719609107822e-05, 8.6921070760581642e-05, 6.6765380324795842e-05, 0.0003053882101085037, 6.2717328546568751e-05, 0.00013886246597394347, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -23,-95,-25,-32,127,-67,57,-58,-92,-76,-24,-80,97,55,41,-127,59,-29,-10,-47,-45,127,-32,38,-13,82,62,-49,68,-66,17,-43,-127,-74,40,79,31,105,122,-39,-115,-21,49,62,58,-112,105,75, -30,-110,-72,43,-105,116,49,-69,-66,21,75,-127,127,93,62,-99,-71,-87,13,-43,-56,81,-70,104,-95,89,76,-115,74,-45,28,-127,-24,-71,79,127,122,106,127,-51,-127,-62,73,76,85,124,105,85, -6,-65,-54,89,-37,-35,-5,-21,85,27,50,-118,27,55,-52,-17,-73,-14,14,-27,-4,16,-95,-26,-100,49,23,-119,21,62,89,-51,32,-13,-4,43,77,65,34,1,-27,89,82,33,47,21,19,-123, 
  /* [0][1][][] */ -93,-121,-16,-66,-86,-80,125,-106,-127,-127,115,-88,98,62,-118,-61,127,-127,-68,-73,-70,126,-17,29,-3,103,112,-65,-112,-76,19,-50,-85,-127,-127,75,48,123,2,-89,60,-10,93,127,80,127,127,-123, -127,-127,-127,-94,-23,127,127,-127,76,67,127,-109,106,127,31,-115,55,-94,-127,-127,-127,107,-127,127,-127,127,127,-127,-127,127,2,-115,-76,-78,50,127,127,127,-11,-127,105,-106,127,118,127,11,123,127, -93,-72,-116,127,88,-46,48,-31,74,30,10,-74,11,64,44,-52,-18,13,-13,-78,-71,26,-80,-26,-119,67,29,-102,-47,43,127,-54,3,-2,66,78,69,68,-38,-40,43,127,79,22,59,-53,29,23, 
  /* [0][2][][] */ -82,-63,10,2,-39,-47,43,-24,48,-40,21,-55,37,37,-60,15,-56,-20,83,-22,4,79,-93,4,-1,109,83,-27,45,66,9,-8,-11,-98,-50,47,16,43,-54,-54,20,8,59,62,48,57,20,-74, -86,-62,-45,-67,103,42,71,-47,120,41,-44,-85,6,70,-127,-63,33,7,49,-63,-35,57,-50,50,-38,108,53,-41,49,12,-21,-41,-53,-29,-65,66,49,39,-76,-78,31,-53,82,84,52,-99,24,7, -41,-42,-60,-24,-14,-3,25,-29,-36,28,-17,-62,-10,26,23,-15,36,36,6,-54,-9,32,-27,-31,-38,40,12,-34,30,-54,56,-24,-51,9,31,63,32,31,-47,-50,-1,74,16,38,34,-19,10,50, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0035894319880753756, 0.0048331241123378277, 0.0070490753278136253, 0.0064229853451251984, 0.033366590738296509, 0.0060732983984053135, 0.0046001113951206207, 0.0036851661279797554, 0.0056632761843502522, 0.0035825634840875864, 0.002667807275429368, 0.0020501348190009594, 0.004003315232694149, 0.0024655843153595924, 0.0086445277556777, 0.0076360218226909637, 0.0053190216422080994, 0.01975221186876297, 0.0054405187256634235, 0.0050493516027927399, 0.0058975289575755596, 0.011264444328844547, 0.0050510452128946781, 0.010381716303527355, 0.0046020811423659325, 0.0044938083738088608, 0.0025501137133687735, 0.003631695406511426, 0.0097825992852449417, 0.028915364295244217, 0.011349665932357311, 0.0038502514362335205, 0.0063055073842406273, 0.0064205378293991089, 0.0083458954468369484, 0.0023977463133633137, 0.0029332675039768219, 0.0023363546933978796, 0.0052021397277712822, 0.002946068998426199, 0.0069544832222163677, 0.0061996434815227985, 0.003010985441505909, 0.0036941454745829105, 0.0028375284746289253, 0.012978998944163322, 0.0026654864195734262, 0.0059016547165811062, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1351, -823, -395, 695, 19783, 2721, -198, 3014, 1514, 1017, 217, 3704, 1160, 748, -443, 171, 2680, 13631, 2673, -466, 1298, -674, -140, 1716, -319, -678, 1677, -9, 4986, 10448, 2269, -78, 491, -45, 2891, -1, 342, -190, 1168, 1259, 1282, 2464, 405, -326, 530, 2789, 1213, -46, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00042574660619720817, 0.00037391480873338878, 0.00033017751411534846, 0.00040083521162159741, 5.3455445595318452e-05, 0.00026566549786366522, 0.00067165953805670142, 0.00027553530526347458, 0.00032518192892894149, 0.0006593907019123435, 0.00037568522384390235, 0.00026087948936037719, 0.00025197837385348976, 0.00039306070539169014, 0.00038703417521901429, 0.00044134174822829664, 0.000273953250143677, 7.4819137807935476e-05, 0.00028078217292204499, 0.0003979151661042124, 0.00037216843338683248, 0.00023549147590529174, 0.000511116289999336, 0.00041874128510244191, 0.00048641997273080051, 0.00080501259071752429, 0.00032474851468577981, 0.0010386188514530659, 0.00018848250329028815, 9.1276007879059762e-05, 0.00035134126665070653, 0.00076678185723721981, 0.00041816971497610211, 0.0004785329510923475, 0.00027937334380112588, 0.00042735552415251732, 0.00056124309776350856, 0.0006348653114400804, 0.00039648616802878678, 0.00049813959049060941, 0.00044813417480327189, 0.00029264969634823501, 0.00033980020089074969, 0.00049884931650012732, 0.00051716016605496407, 0.00022265968436840922, 0.00030383499688468874, 0.00040901295142248273, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -48,19,2,-6,-97,-26,-127,40, 
  /* [1][0][][] */ 91,-83,-71,-68,127,-78,96,22, 
  /* [2][0][][] */ -123,127,-51,-108,43,-11,-16,53, 
  /* [3][0][][] */ 44,29,81,27,99,127,110,-4, 
  /* [4][0][][] */ -61,-127,67,26,-51,-107,18,-41, 
  /* [5][0][][] */ 127,-23,79,106,-117,-6,1,-20, 
  /* [6][0][][] */ 19,43,127,-35,40,-39,-37,21, 
  /* [7][0][][] */ 38,13,-127,-22,-42,107,94,-69, 
  /* [8][0][][] */ 0,103,-20,-2,95,127,26,51, 
  /* [9][0][][] */ 25,127,-22,96,19,-99,59,114, 
  /* [10][0][][] */ -20,-120,-5,-30,-62,-127,-39,-65, 
  /* [11][0][][] */ -127,-79,111,33,-3,-74,91,59, 
  /* [12][0][][] */ -33,59,-127,86,51,-65,-48,89, 
  /* [13][0][][] */ 89,-127,94,93,9,43,45,-52, 
  /* [14][0][][] */ -30,69,-29,-127,-44,-119,-52,-51, 
  /* [15][0][][] */ 44,76,23,-13,17,-68,71,-127, 
  /* [16][0][][] */ -117,-127,-46,86,-38,14,-23,88, 
  /* [17][0][][] */ -27,-126,-127,77,-79,50,-59,63, 
  /* [18][0][][] */ -125,-36,-34,97,-13,75,-3,127, 
  /* [19][0][][] */ 58,-122,108,-127,6,-77,45,-31, 
  /* [20][0][][] */ 2,97,46,5,60,127,77,-14, 
  /* [21][0][][] */ 27,121,55,-40,35,-77,94,-127, 
  /* [22][0][][] */ 18,13,91,26,-10,127,27,-30, 
  /* [23][0][][] */ -96,-59,21,-79,77,79,-50,-127, 
  /* [24][0][][] */ -104,-101,43,-92,97,111,-51,-127, 
  /* [25][0][][] */ 127,26,-57,-12,18,30,-53,-25, 
  /* [26][0][][] */ -127,-30,-120,-46,-45,-39,2,5, 
  /* [27][0][][] */ 82,45,-5,-64,-127,-29,83,90, 
  /* [28][0][][] */ -127,-100,0,96,-73,-98,27,14, 
  /* [29][0][][] */ 127,74,39,-104,6,7,-35,-108, 
  /* [30][0][][] */ -76,-63,34,-70,74,77,-44,-127, 
  /* [31][0][][] */ 48,40,4,127,3,-74,1,11, 
  /* [32][0][][] */ -39,127,-7,54,27,79,6,55, 
  /* [33][0][][] */ -46,127,-65,35,1,-26,-21,11, 
  /* [34][0][][] */ -127,-119,-26,100,-38,14,32,110, 
  /* [35][0][][] */ -50,127,-34,-2,70,111,62,68, 
  /* [36][0][][] */ 66,27,-3,-42,-127,-29,99,101, 
  /* [37][0][][] */ -64,127,30,27,-126,120,-4,-115, 
  /* [38][0][][] */ 39,52,35,34,127,81,106,49, 
  /* [39][0][][] */ -25,-80,37,-36,10,18,-117,127, 
  /* [40][0][][] */ -61,-28,-51,127,-37,-4,18,40, 
  /* [41][0][][] */ 127,7,32,122,-95,-13,12,-8, 
  /* [42][0][][] */ -45,4,-68,-127,47,-99,6,83, 
  /* [43][0][][] */ 28,0,87,3,38,127,100,5, 
  /* [44][0][][] */ -25,-25,-61,127,40,3,-50,-39, 
  /* [45][0][][] */ 95,123,117,-123,53,-45,28,-127, 
  /* [46][0][][] */ -24,-127,-40,36,-2,45,-73,123, 
  /* [47][0][][] */ 44,26,107,22,67,116,127,-14, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0037880172021687031, 0.0033268514089286327, 0.0029377052560448647, 0.0035663717426359653, 0.00047561188694089651, 0.0023637192789465189, 0.0059759910218417645, 0.0024515343829989433, 0.0028932578861713409, 0.0058668307028710842, 0.0033426033332943916, 0.0023211364168673754, 0.0022419400047510862, 0.0034971991553902626, 0.0034435789566487074, 0.0039267726242542267, 0.002437458373606205, 0.00066569214686751366, 0.0024982176255434752, 0.0035403911024332047, 0.0033113132230937481, 0.0020952504128217697, 0.0045475810766220093, 0.0037256884388625622, 0.0043278494849801064, 0.0071624796837568283, 0.0028894017450511456, 0.0092409569770097733, 0.0016769950743764639, 0.00081211468204855919, 0.0031260065734386444, 0.0068223276175558567, 0.0037206029519438744, 0.004257675725966692, 0.0024856827221810818, 0.0038023323286324739, 0.0049935770221054554, 0.0056486194953322411, 0.0035276766866445541, 0.0044321226887404919, 0.0039872070774435997, 0.0026038072537630796, 0.0030233217403292656, 0.0044384375214576721, 0.004601355642080307, 0.0019810814410448074, 0.0027033267542719841, 0.0036391320172697306, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -9012, -2807, 12524, -9439, 24422, 7094, -7557, 12406, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0001942921953741461, 0.000231641621212475, 0.00016344001051038504, 0.00026451938902027905, 0.00016988655261229724, 0.00016726831381674856, 0.00016164156841114163, 0.00021851056953892112, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 6,-12,-27,-59,-22,-26,9,-18,36,14,-27,-3,103,127,-19,-95, 
  /* [1][0][][] */ 127,-54,-47,23,-48,68,-75,-46,-35,81,-38,-52,-5,9,-55,-10, 
  /* [2][0][][] */ -47,-102,47,52,51,-61,-79,-23,31,-103,23,-127,52,-22,-75,35, 
  /* [3][0][][] */ 39,7,16,15,-8,75,-49,-22,127,47,6,10,6,-16,6,26, 
  /* [4][0][][] */ -102,-43,-27,-124,-14,40,61,-121,34,-29,-55,-47,-127,43,-40,-17, 
  /* [5][0][][] */ 96,45,64,-45,46,-36,-127,-123,-11,-68,52,53,-52,48,57,-43, 
  /* [6][0][][] */ 94,43,-127,-72,28,-67,6,-86,-32,19,-99,78,90,-83,13,55, 
  /* [7][0][][] */ -127,-8,112,-43,-70,5,0,-69,-59,68,91,-34,59,-31,24,30, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0082574179396033287, 0.0098447687923908234, 0.0069462000392377377, 0.011242073960602283, 0.0072201783768832684, 0.0071089030243456364, 0.0068697663955390453, 0.0092866988852620125, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 23773, -748, 36, 3559, -424, 26, 9437, 1571, -1031, 308, -2090, 3517, -353, -336, -471, -1613, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 9.59466487984173e-05, 0.00019399366283323616, 0.00017873839533422142, 0.00014520733384415507, 0.0011197456624358892, 0.00083065847866237164, 0.00017851074517238885, 0.00078712694812566042, 0.00031054855207912624, 0.001091633690521121, 0.00025053613353520632, 0.00018731009913608432, 9.9017503089271486e-05, 0.00036089305649511516, 0.00018205336527898908, 0.00035885241231881082, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 2,-1,16,5,-19,10,12,17,-9,-11,4,9,2,-6,16,-2, 5,-15,18,0,12,-2,11,-26,-6,9,-5,85,-2,18,3,1, 1,-1,8,-1,2,-14,0,10,0,2,0,-3,-5,-7,-4,-1, 
  /* [0][1][][] */ -2,-14,3,7,127,-23,-127,-20,127,127,-9,7,110,-24,-11,-18, -127,127,127,4,-92,-90,-14,-102,19,-105,127,127,127,127,127,127, 14,-14,-15,5,-12,127,10,-12,2,-13,-12,-4,11,-7,-18,-9, 
  /* [0][2][][] */ -4,3,-1,-29,-20,16,42,9,-4,-7,-5,7,1,0,-5,-12, 16,-18,-2,-127,5,-15,-10,127,-4,1,-7,-16,-2,-60,-13,-37, -1,-2,-2,-6,1,-3,1,-3,5,2,-4,-2,5,-8,-10,-12, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0040777325630187988, 0.008244730532169342, 0.0075963814742863178, 0.0061713117174804211, 0.047589190304279327, 0.035302985459566116, 0.0075867064297199249, 0.033452894538640976, 0.013198313303291798, 0.046394430100917816, 0.010647784918546677, 0.0079606790095567703, 0.0042082439176738262, 0.015337955206632614, 0.0077372677624225616, 0.015251227654516697, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1531, 239, -151, 946, 55261, 56032, 5272, 5298, 5288, 2867, 1180, -285, 5397, -9353, 20, 42522, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00021565376664511859, 0.0010160726960748434, 0.00026236398844048381, 0.00017283862689509988, 3.0091594453551807e-05, 3.0657469324069098e-05, 0.00012610213889274746, 2.6046018319902942e-05, 0.00015723044634796679, 3.8106267311377451e-05, 0.00045275923912413418, 0.00081139372196048498, 0.00033471314236521721, 1.782637627911754e-05, 0.00077930348925292492, 5.2990366384619847e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -31, 
  /* [0][1][][] */ 66, -37, 16, 
  /* [0][2][][] */ 32, 127, 18, 
  /* [1][0][][] */ 104, -94, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -1, -12, 
  /* [2][0][][] */ -23, -2, -47, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -95, -79, 
  /* [3][0][][] */ 118, 124, 57, 
  /* [3][1][][] */ 0, -22, -15, 
  /* [3][2][][] */ -102, -127, -44, 
  /* [4][0][][] */ 16, -48, 2, 
  /* [4][1][][] */ 12, -127, 0, 
  /* [4][2][][] */ 10, -70, -6, 
  /* [5][0][][] */ -71, 32, -5, 
  /* [5][1][][] */ -127, 34, -2, 
  /* [5][2][][] */ -92, 29, -1, 
  /* [6][0][][] */ -16, 79, 127, 
  /* [6][1][][] */ -50, 55, -16, 
  /* [6][2][][] */ -36, -52, -89, 
  /* [7][0][][] */ 32, 20, -22, 
  /* [7][1][][] */ 127, 87, 2, 
  /* [7][2][][] */ 39, 16, -13, 
  /* [8][0][][] */ -21, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -22, 62, -12, 
  /* [9][1][][] */ -14, 127, -21, 
  /* [9][2][][] */ -1, 98, -14, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 40, 17, 
  /* [11][0][][] */ 7, -18, 10, 
  /* [11][1][][] */ 64, -93, 35, 
  /* [11][2][][] */ -84, 127, -45, 
  /* [12][0][][] */ -41, 49, -9, 
  /* [12][1][][] */ -127, 113, 6, 
  /* [12][2][][] */ -78, 78, 5, 
  /* [13][0][][] */ 90, 36, 1, 
  /* [13][1][][] */ 93, 69, -26, 
  /* [13][2][][] */ 111, 127, 41, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -102, -29, 23, 
  /* [15][1][][] */ -127, -106, 22, 
  /* [15][2][][] */ -21, -62, 1, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.0549917072057724, 0.25909852981567383, 0.066902816295623779, 0.044073846191167831, 0.0076733562164008617, 0.0078176539391279221, 0.032156042754650116, 0.006641734391450882, 0.040093760937452316, 0.0097170975059270859, 0.11545360088348389, 0.20690537989139557, 0.085351847112178802, 0.0045457258820533752, 0.19872237741947174, 0.013512542471289635, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.11239299923181534, } };
const TfArray<1, int> quant46_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.076823405921459198, } };
const TfArray<1, int> quant50_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.063042029738426208, } };
const TfArray<1, int> quant53_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.1009276881814003, } };
const TfArray<1, int> quant54_zero = { 1, { -38 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.043925054371356964, } };
const TfArray<1, int> quant58_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.055357135832309723, } };
const TfArray<1, int> quant61_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.055468529462814331, } };
const TfArray<1, int> quant62_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023480447009205818, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.05461486428976059, } };
const TfArray<1, int> quant65_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.075234599411487579, } };
const TfArray<1, int> quant66_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.072762288153171539, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,11 } };
const TfArray<1, float> quant69_scale = { 1, { 0.17391136288642883, } };
const TfArray<1, int> quant69_zero = { 1, { 39 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,11 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 44, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 352, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1584), (TfLiteIntArray*)&g0::tensor_dimension69, 1584, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 1584, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
