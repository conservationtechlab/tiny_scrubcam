/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 22.08.2024 13:41:51

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242640;
#else
constexpr int kTensorArenaSize = 241616;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 15222, -27825, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00031351379584521055, 0.00016961319488473237, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 40,-25,-27,127,-30,-3,-21,51,83,-9,-13,-9,-19,42,-25,23,56,-64,-4,-60,60,38,50,-37,-40,-52,-19,43,5,-31,-7,53, 
  /* [1][0][][] */ 59,83,80,-105,-84,85,-10,12,-45,-35,38,112,127,46,34,-1,-46,1,-96,-99,-88,40,29,122,89,85,-52,-6,113,-118,-126,-26, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0059365914203226566, 0.003211738308891654, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -61, 86, 26, 1117, 11, 101, -335, 270, -22, 38, 34, -186, 105, 111, -566, -212, -206, -295, 611, -343, -112, 114, -135, 60, -77, 44, -224, -262, -358, -51, 568, 122, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.1388495446881279e-05, 4.3915184505749494e-05, 4.1124418203253299e-05, 5.2841911383438855e-05, 4.2720232158899307e-05, 4.6142849896568805e-05, 4.1574021452106535e-05, 4.6763369027758017e-05, 4.4559143134392798e-05, 5.0993134209420532e-05, 4.334611730882898e-05, 3.8554229831788689e-05, 4.5091557694831863e-05, 4.3526502849999815e-05, 4.3433159589767456e-05, 4.2098570702364668e-05, 4.0962637285701931e-05, 7.340245065279305e-05, 6.5537431510165334e-05, 4.1261657315772027e-05, 4.2212133848806843e-05, 4.328891373006627e-05, 4.3229669245192781e-05, 4.0377377445111051e-05, 4.0521408664062619e-05, 4.4206819438841194e-05, 3.8505251723108813e-05, 4.2058458348037675e-05, 4.1167138988384977e-05, 4.0045673813438043e-05, 4.6409277274506167e-05, 8.8760672952048481e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -41,-53,103,3,84,-13,-94,-113,61,-94,-116,0,33,8,-41,54,-58,-35,-77,-63,-75,-111,1,111,-123,5,78,-53,112,7,-24,-78,84,-68,-103,63,-116,-84,-102,26,77,-94,-105,103,50,-114,110,-23,15,-59,-39,101,-77,-51,-106,109,29,68,98,-114,-80,79,-56,45,-22,16,70,93,56,95,85,-127,98,-110,31,85,-110,11,-65,26,56,12,95,-7,-63,-44,-91,110,29,121,-14,-114,15,68,33,10, 
  /* [1][0][][] */ -53,26,-74,-4,-22,75,40,8,82,-124,-99,109,53,-20,26,69,111,-35,35,127,-38,-4,36,30,35,20,-35,106,19,14,100,-46,61,107,-13,17,50,65,-14,-58,-56,11,-17,-97,-33,40,-23,-49,-22,-80,110,68,15,93,-76,-41,31,101,40,85,-51,115,-61,-66,-47,42,76,45,113,36,21,16,-115,100,-65,45,93,-47,-37,54,-72,83,-40,-103,32,118,-64,-51,86,86,99,51,91,95,39,0, 
  /* [2][0][][] */ 50,32,-70,93,-15,-72,94,99,-103,65,-36,127,76,-11,87,-114,-57,-24,34,68,-93,-16,115,23,-32,85,113,10,-64,93,86,116,-70,-17,-105,-123,-93,103,109,-25,-117,-77,18,-10,-88,127,-20,-78,106,43,90,-81,-45,77,23,26,-70,103,-87,6,-13,63,-35,84,107,55,50,93,-90,77,10,-71,29,-74,12,27,-45,-30,7,-9,46,-105,0,-33,4,-99,-18,-21,103,125,-20,34,-39,-82,-36,-67, 
  /* [3][0][][] */ 41,47,80,-8,-68,86,-75,43,41,83,71,-9,74,82,87,9,106,87,-75,12,93,-46,-25,-63,28,-63,-62,101,19,-60,70,-1,-43,-27,15,19,-27,-7,46,36,-6,-63,-75,47,88,35,-42,-60,67,-107,35,-4,64,9,111,-85,-96,-103,-76,-32,-80,42,-15,46,68,-23,-25,-34,-64,-37,15,81,55,-68,92,-2,29,127,93,-3,-75,-84,25,58,38,52,-30,-106,-79,47,-3,-106,68,-76,-81,62, 
  /* [4][0][][] */ 60,101,1,62,-56,-8,33,12,65,95,-6,57,127,-35,-11,-64,-25,-4,-57,-5,107,-88,89,27,-31,-8,65,-58,-52,25,-67,-64,65,114,30,-102,-50,-7,-119,50,-49,-59,-68,-89,32,103,38,59,20,-55,-9,-83,-83,44,-89,15,36,-85,46,15,13,-76,-38,-76,-36,52,5,-33,16,-99,-85,-78,-46,4,113,56,47,-19,-6,-53,3,-41,-105,-26,-1,69,95,-7,-120,-79,46,33,26,87,-106,-17, 
  /* [5][0][][] */ 92,-89,69,74,49,-110,28,53,100,-127,1,-58,5,96,35,37,61,60,-69,98,36,49,17,-23,-96,-57,-11,-84,52,34,17,-77,-33,6,-69,9,-107,-29,43,25,-78,-45,42,89,-30,26,38,-45,-98,99,17,38,40,25,33,-15,103,49,-67,-34,33,-61,37,-56,-20,100,-24,29,77,8,99,-61,-49,78,-40,-68,19,-46,14,61,105,38,35,109,-72,79,-2,46,71,-86,115,106,-10,29,78,-73, 
  /* [6][0][][] */ 22,-47,113,78,-77,-68,-7,66,-16,-83,2,-91,122,54,115,-127,37,-2,0,119,-83,-127,108,56,-64,-88,-14,-62,-34,-114,45,-84,-95,-126,-52,-109,-15,37,-113,80,85,56,19,-20,-118,104,-96,-51,-89,19,-29,-75,57,-58,94,-25,8,-6,-55,111,-100,-2,67,-82,-52,63,99,-52,80,-11,-114,-6,55,-62,-91,-46,-91,-110,-62,-19,30,-28,43,-30,-78,-93,-46,-102,82,91,95,14,-56,-70,74,-32, 
  /* [7][0][][] */ 102,58,-30,-37,-65,108,-11,1,111,-8,-83,17,16,-77,48,78,57,22,7,91,53,39,1,86,-52,96,46,57,-60,95,-14,37,28,25,71,84,-90,83,-9,-18,93,-66,84,67,50,0,98,-95,53,-44,-127,-53,-12,79,21,21,114,-80,8,-45,1,3,74,-95,-66,-44,70,27,-93,26,71,81,83,15,45,60,-47,57,-84,30,91,-32,-15,-64,86,36,-95,92,80,13,89,63,-49,-32,3,-57, 
  /* [8][0][][] */ 10,43,-35,-89,32,32,-76,-20,1,56,41,84,-7,-50,-82,-76,-71,86,-75,8,20,-26,78,105,-113,86,39,71,-80,7,-91,101,87,-37,46,13,115,1,-19,63,74,95,-114,-106,-9,-28,-27,99,18,-106,-52,-11,-76,-17,-25,-110,40,86,-69,95,101,31,41,94,-43,-52,-22,89,-104,36,23,-11,81,55,23,25,-60,106,76,91,26,77,-127,-92,20,39,65,-52,23,-43,-94,79,-91,-108,-60,48, 
  /* [9][0][][] */ -3,10,97,49,57,-72,-41,-84,47,95,-12,46,6,-71,-79,-23,6,2,-58,0,2,86,-90,-89,101,11,-15,24,-10,-1,-62,76,58,22,31,11,-67,27,-5,-44,47,-58,47,-78,82,18,-75,51,48,13,-82,-23,73,-42,-55,106,82,-37,39,-3,-88,98,65,-77,-36,6,90,38,3,85,86,-76,-13,72,-57,-82,-57,-101,-33,127,35,0,99,29,-31,-98,34,-10,92,27,-31,73,94,49,61,-30, 
  /* [10][0][][] */ -58,74,84,-70,0,97,109,27,39,3,26,-62,82,87,-32,15,-31,84,-101,-47,-10,29,56,-67,30,56,-112,-113,-40,88,-90,-62,86,104,112,62,-44,12,-36,39,-30,118,-106,-42,-96,-53,4,-56,-1,5,35,22,65,33,-64,-25,-100,-11,9,-43,3,80,114,52,127,-67,-97,-19,33,-13,-93,-61,80,75,-101,104,-4,60,68,3,83,-2,68,114,-96,71,103,-11,45,16,2,-41,-43,-43,-32,-62, 
  /* [11][0][][] */ 116,9,-22,106,126,46,56,22,117,90,-93,125,-21,-98,27,-78,-64,-117,69,44,31,79,22,-127,-123,-111,-24,75,89,-11,25,-27,-102,-91,51,44,-72,81,-49,-71,-32,112,-87,-1,-48,-74,-108,-102,80,117,101,55,-109,-121,19,29,-79,-76,-48,-103,-96,100,92,10,7,94,-68,24,94,61,-101,-84,33,115,-119,51,-78,32,-54,82,-120,-32,-83,-60,48,-90,11,-34,-106,-10,10,-117,-100,-38,-94,-47, 
  /* [12][0][][] */ 16,60,-55,-1,97,4,-30,35,-70,37,-10,20,-57,18,49,-70,-90,-26,-45,-68,34,-7,18,96,-62,-44,101,-92,97,21,-31,127,-79,-61,-47,7,-2,-66,-16,46,115,42,-100,-39,-18,-74,-30,116,-39,-106,-78,110,40,13,-76,89,-14,-51,35,68,61,111,-1,63,116,40,-41,116,64,105,43,74,76,118,-31,-5,-22,33,-107,-104,-48,98,56,24,-29,35,55,122,-80,-95,95,66,105,-8,40,77, 
  /* [13][0][][] */ 110,-65,99,94,100,105,84,64,74,-127,15,-25,61,76,69,-42,-111,-64,-73,29,74,-24,118,-43,-61,41,11,20,-78,-86,84,51,43,107,-21,27,-83,-24,23,74,-57,80,-47,11,-41,32,4,-25,37,100,-46,-93,-93,37,101,-78,-41,31,-33,-69,-24,117,-73,25,-44,-55,-89,90,-30,-5,101,2,-92,39,-92,-41,-92,67,84,-77,58,-96,103,29,-77,-96,95,127,-3,-43,-67,73,118,-46,77,-2, 
  /* [14][0][][] */ -58,-111,74,58,67,-43,-28,-126,-88,-48,56,70,-29,-90,-102,-96,-64,-69,-2,19,-52,20,-15,47,-122,-79,-44,17,-121,-119,-89,30,92,-32,-42,-6,81,107,22,-120,-14,-123,29,74,57,-122,61,-93,101,34,76,46,81,-20,-28,5,-63,8,49,83,-19,-91,-36,62,-92,-26,64,-110,-90,-95,-100,90,-6,74,40,-86,41,-120,42,23,36,-29,-124,-45,-127,-102,-118,100,101,-4,76,-53,83,98,-21,61, 
  /* [15][0][][] */ 8,-30,-29,73,78,-86,59,-103,58,3,-76,8,95,-2,-95,-116,88,7,-96,5,43,17,73,108,79,65,37,92,17,49,63,-113,1,1,-63,-9,-68,110,107,-74,13,111,-53,-24,22,-84,-48,-85,-12,-85,-11,26,-106,-115,-53,-17,65,46,-32,109,-53,-68,-6,96,-41,95,-75,-3,-70,1,63,-80,22,-27,63,-110,-10,56,104,82,-88,59,-120,-72,-127,-41,-96,31,80,67,-120,-52,48,104,-116,110, 
  /* [16][0][][] */ -81,8,111,-66,28,124,-63,42,45,78,-118,65,-3,-59,-59,-70,107,76,67,47,105,79,-43,51,-35,53,-79,62,-117,-3,37,-6,-113,73,62,73,-35,51,-51,-81,17,-54,68,98,64,102,99,-19,-63,-127,5,105,-52,106,71,35,22,83,95,8,112,108,29,54,44,5,-42,88,31,92,-38,-19,38,83,84,91,-25,105,-120,6,5,-86,45,-2,6,99,100,-5,69,6,-28,88,61,-44,-102,21, 
  /* [17][0][][] */ 75,-42,-24,55,42,-56,-41,-23,40,-55,53,65,83,57,-54,20,17,29,48,125,-26,-19,-4,-30,4,29,-45,30,70,-2,-13,127,-39,6,-21,35,-60,79,-41,-12,-44,-5,12,-34,-5,25,63,-62,27,54,43,27,-4,107,37,17,-35,63,-117,-63,61,-49,75,60,2,-25,12,-51,-35,25,38,54,-38,12,-29,15,71,-68,26,-62,24,8,-8,-23,-57,60,47,15,35,38,-34,23,45,59,21,26, 
  /* [18][0][][] */ -53,108,96,-51,12,-30,-63,35,-12,127,-63,-25,-8,31,50,-36,30,-15,17,-20,74,-19,35,-37,55,-52,-15,79,17,24,8,40,42,-8,-58,-21,13,39,31,31,-15,5,-25,31,-61,27,41,3,23,-25,80,26,-76,-1,21,57,-14,42,12,-62,67,89,16,13,-19,-73,-11,41,39,-44,-21,72,-33,-16,9,-43,28,68,3,14,-38,11,-12,-47,76,-9,57,41,-72,-39,-53,74,64,-20,52,23, 
  /* [19][0][][] */ 16,26,75,37,60,-90,96,91,93,-66,26,-15,-95,30,-61,58,72,-112,112,54,-27,79,-61,10,78,-86,26,-72,-98,-127,-71,43,80,-90,33,-5,5,-76,-60,-108,42,-123,-89,6,-93,26,75,-100,-33,35,-42,42,-39,11,2,-14,21,97,64,-32,53,-60,100,62,-73,-7,-30,-5,-13,53,75,-56,-66,-126,-59,-86,-28,-120,11,109,56,-121,-35,76,-93,-12,5,-9,88,27,-7,62,-38,113,67,-52, 
  /* [20][0][][] */ -12,83,75,96,-101,96,17,62,13,28,-89,-1,-14,86,42,-77,-52,-40,-68,-42,19,-45,-75,-72,86,-73,-109,49,18,-3,-42,102,102,42,-11,75,45,-33,-15,-114,-86,-38,-92,-99,-24,-68,-73,107,64,-127,-109,32,44,105,54,-3,93,71,118,89,109,-49,-70,-45,-25,-72,-51,10,-89,-82,-72,75,-64,-83,57,22,100,82,109,125,83,7,80,-35,59,114,-17,65,15,94,23,51,19,22,-14,7, 
  /* [21][0][][] */ 91,62,69,-101,86,-78,76,18,-1,-89,-69,45,-19,39,-48,-86,-98,-28,27,-37,110,-46,71,-80,47,-83,-28,75,24,-8,-6,-31,5,19,-86,-127,109,97,-115,-27,-5,7,33,-19,-99,-84,-76,98,-22,-65,-27,92,43,67,-96,30,-52,54,-54,121,52,-73,6,-5,80,34,-33,-63,-100,2,64,78,33,-31,53,66,-103,-31,65,85,17,95,39,-70,27,-95,67,-80,-96,85,115,-125,-44,-65,76,-29, 
  /* [22][0][][] */ 26,-63,-75,-95,68,-73,108,52,-94,83,-76,-112,97,-117,-115,-87,34,82,-126,-57,81,-76,26,30,91,-5,-114,90,-62,-82,-71,-106,44,58,21,2,-2,-18,-62,-115,-1,-15,-4,89,55,-121,88,-25,-65,-83,-5,-16,-80,-95,-45,31,-19,-45,-22,-35,102,-86,-80,-127,-68,18,-115,-47,113,98,-36,-7,-76,9,52,-97,48,-57,63,81,105,-107,-86,-119,76,80,92,-33,-61,30,-69,60,15,20,-32,90, 
  /* [23][0][][] */ 62,-102,0,55,115,-127,6,-110,59,-113,91,85,5,-110,21,-41,98,-33,-115,115,107,-87,109,-36,-20,-14,91,24,83,54,76,-24,-40,46,14,26,102,-4,-119,8,-109,2,13,-121,-75,-95,124,32,83,-114,-107,-47,90,-57,-58,103,-90,-19,87,50,-117,-96,-56,-2,47,45,-125,-117,77,-10,120,-72,-16,-26,-55,-104,58,-26,101,103,-51,-60,35,-106,103,9,122,-12,-88,51,119,19,120,-51,-26,93, 
  /* [24][0][][] */ -94,-54,-110,-85,-97,-114,-75,-100,67,122,86,48,120,61,-42,-127,-88,43,28,-54,99,-87,-62,-40,50,-34,78,61,113,59,1,-67,-10,3,49,29,-57,-94,67,-24,-80,-107,106,4,23,-43,40,74,-96,-48,-29,18,74,54,79,-79,-6,75,13,-1,90,-10,42,99,-111,103,-51,-99,-108,52,-65,-30,-49,36,98,107,69,-82,-113,-96,-85,-110,-70,-125,1,68,-19,-104,27,-117,8,-84,-22,33,-102,27, 
  /* [25][0][][] */ -100,-60,-75,-12,79,-73,-100,54,46,-110,-43,21,68,-6,-105,-23,-70,59,40,-113,65,83,-11,-57,9,-60,-101,42,78,-88,39,108,102,-127,45,59,97,-77,-23,-21,-90,89,-107,1,92,32,41,38,-96,96,-83,-3,47,-39,-56,12,-19,50,-117,72,112,48,47,50,-21,70,-16,-10,-88,-19,-25,-115,31,-109,67,23,69,71,16,-6,50,45,-45,69,-73,-52,-102,-95,-17,-33,104,20,-117,-15,-30,-90, 
  /* [26][0][][] */ 60,-127,-21,-12,-117,-1,-15,-19,-120,-120,116,93,-63,-57,10,-20,123,30,-85,-79,9,79,110,13,56,69,10,51,7,4,-106,-17,-37,-72,-107,-113,-73,90,-61,118,-115,111,59,36,-83,76,-52,111,-27,33,6,101,9,-62,-6,-123,106,69,77,25,0,-107,70,-33,120,-28,-64,62,-103,82,95,104,94,-114,-81,9,42,-119,-110,30,-37,86,84,-92,85,-2,-53,5,-98,120,7,-1,-68,123,46,96, 
  /* [27][0][][] */ 8,6,-66,-106,-118,-70,-75,-22,42,100,33,-112,-15,53,79,-33,62,-20,61,-88,-100,7,-33,-28,-108,45,-114,-7,60,28,-36,-11,61,66,-96,-91,-94,-70,-118,86,-100,14,23,14,97,21,65,99,89,64,69,-80,-98,-91,-12,-39,100,-28,-111,-83,-62,-65,-39,55,34,-51,-118,102,45,5,-127,4,58,-55,-14,-92,45,-70,85,109,83,-32,112,-60,-79,-88,-37,29,-54,-8,-42,-51,54,13,84,54, 
  /* [28][0][][] */ 88,-8,81,37,-119,-68,-111,-85,-47,-112,52,70,-84,-98,-6,96,89,108,-75,77,-35,14,-122,-87,-127,76,-94,-68,-78,-80,-7,-20,-114,10,74,72,10,-119,-49,22,100,34,-106,44,-120,-16,6,40,15,-66,-83,-39,-91,18,50,37,57,-20,79,45,-11,-51,-101,4,55,69,-32,75,-83,23,-115,-51,62,37,-10,-113,-122,-76,-99,40,-83,-104,111,-33,56,-123,59,-89,-114,-79,-44,-69,-45,53,-103,-74, 
  /* [29][0][][] */ 49,67,67,-54,-95,21,-125,8,103,-2,-95,-104,118,-112,-49,-51,-105,109,16,-71,-81,-35,61,7,-34,10,-47,-29,-113,-14,109,-8,56,0,-80,-45,-7,108,-8,99,50,113,-47,93,0,110,-62,-29,18,-16,63,-106,72,-111,124,47,-101,59,-46,115,-127,104,-98,-57,-66,-71,58,93,94,-90,38,-79,123,82,84,31,119,-61,-32,53,-9,-86,-9,-89,67,124,46,78,-43,102,73,77,-114,16,-6,70, 
  /* [30][0][][] */ 50,-43,-39,57,-92,46,-46,3,121,74,19,-61,-108,25,70,22,-12,48,82,-75,32,-78,-98,29,-82,31,-57,107,-26,-100,-81,43,-68,-34,-80,-16,12,12,19,35,103,-60,-5,127,118,-24,127,61,-42,52,50,-67,89,-6,24,99,-43,-24,21,-44,-77,-26,-32,-34,-66,-63,-73,97,-62,102,32,-29,-46,115,109,-67,-45,-51,-58,-16,35,33,-109,-4,-89,37,-103,126,-37,-86,72,77,-31,-17,20,-66, 
  /* [31][0][][] */ 41,-31,31,54,24,32,-26,-44,-11,-5,-37,-37,65,-58,-20,56,-26,-42,70,18,32,23,-8,55,25,-53,19,39,-35,-40,26,51,15,11,-41,11,56,-15,-31,-54,30,-31,-10,21,5,-26,-19,14,40,15,49,-16,-46,-28,-39,11,-57,38,25,59,-18,13,41,-33,29,54,-16,-37,32,-54,-53,7,-40,-21,47,15,-32,-12,27,127,-36,-18,34,34,30,48,-41,6,9,-25,-31,-29,5,50,-5,15, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017590110655874014, 0.0018663952359929681, 0.0017477878136560321, 0.0022457812447100878, 0.0018156098667532206, 0.0019610710442066193, 0.0017668958753347397, 0.0019874430727213621, 0.0018937635468319058, 0.00216720812022686, 0.0018422099528834224, 0.00163855473510921, 0.0019163911929354072, 0.0018498763674870133, 0.0018459092825651169, 0.001789189176633954, 0.0017409120919182897, 0.0031196039635688066, 0.0027853408828377724, 0.0017536204541102052, 0.0017940156394615769, 0.0018397788517177105, 0.0018372609047219157, 0.0017160384450107813, 0.0017221597954630852, 0.00187878985889256, 0.0016364731127396226, 0.0017874843906611204, 0.001749603427015245, 0.0017019411316141486, 0.0019723942968994379, 0.003772328607738018, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1625, 3458, 7660, 2443, -2973, -2891, 20905, 2220, 2661, -1083, 8209, -185, -6497, 1832, 10385, 6310, 10990, 5450, -3868, -4671, 4464, 33539, 19207, 14504, 932, 745, 4473, 2927, 2020, -3585, 6540, -2131, -299, 3258, 34, 1114, 8233, 3475, -1798, 3712, 6652, 4980, 4834, 13487, 3682, 3362, 1420, 7061, 5584, -4387, -3827, 482, -179, -875, 2188, 26, 157, -775, -4413, 11829, -622, 1014, -1173, -1548, -2775, 5053, 22295, 1483, -2577, 819, 1224, 2258, 1424, -892, 520, 9859, -439, 12786, 17405, -917, 9759, 1574, -267, 1074, 13849, 7697, 4002, 942, 3526, 3485, -297, -6841, 822, -1859, -1454, -2040, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00038455691537819803, 0.00045611971290782094, 0.00031251145992428064, 0.00036307080881670117, 0.00035524155828170478, 0.00050708703929558396, 0.00015883454761933535, 0.00031682549160905182, 0.0002263200149172917, 0.0005554853705689311, 0.0002421258541289717, 0.00039225685759447515, 0.0003929280792362988, 0.0015510460361838341, 0.00029821763746440411, 0.00018421087588649243, 0.00016964667884167284, 0.00026529884780757129, 0.00050195911899209023, 0.0003595155430957675, 0.00014139844279270619, 8.0031633842736483e-05, 0.00015987000369932503, 0.00011268457456026226, 0.0002096283424180001, 0.00060846412088721991, 0.0006648067501373589, 0.00036993622779846191, 0.00026117131346836686, 0.00054679985623806715, 0.00022586795967072248, 0.00035877115442417562, 0.00020775175653398037, 0.00035514251794666052, 0.00033394203637726605, 0.00023045660054776818, 0.00023091489856597036, 0.00030810665339231491, 0.00034148528357036412, 0.00048061882262118161, 0.00019243759743403643, 0.00051880697719752789, 0.00030687008984386921, 0.00017189154459629208, 0.00052006571786478162, 0.00029860559152439237, 0.00035421378561295569, 0.00030623559723608196, 0.00024165627837646753, 0.00030622657504864037, 0.00041016118484549224, 0.00020167608454357833, 0.00064130511600524187, 0.00034974334994331002, 0.00035622369614429772, 0.00049332628259435296, 0.0005827851127833128, 0.00037863737088628113, 0.00035415493766777217, 0.00015571735275443643, 0.0012274384498596191, 0.00065251014893874526, 0.00024951287196017802, 0.00051141530275344849, 0.00066878704819828272, 0.00037928784149698913, 9.7176001872867346e-05, 0.00026110309408977628, 0.00043419640860520303, 0.00040664599509909749, 0.00033156375866383314, 0.00022972071019466966, 0.00095355877419933677, 0.00046263518743216991, 0.00037839097785763443, 0.00021832002676092088, 0.00032647271291352808, 0.00014880381058901548, 0.00010505366662982851, 0.00022906191588845104, 0.00014874740736559033, 0.00021169935644138604, 0.00025549589190632105, 0.0002439614909235388, 0.00013104121899232268, 0.00030975721892900765, 0.00058824813459068537, 0.00030189016251824796, 0.00018004621961154044, 0.00058540847385302186, 0.00029540868126787245, 0.00028977709007449448, 0.0002809764991980046, 0.00056523369858041406, 0.00041506541310809553, 0.00020415025937836617, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -29,99,-2,-127,-45,-25,-52,-78,-27,24,-25,57,22,-63,-9,45, 
  /* [1][0][][] */ -21,28,-45,3,-28,-23,25,-64,62,40,-41,25,-4,-5,16,-127, 
  /* [2][0][][] */ 9,-6,-45,52,20,38,-29,-41,127,-18,15,34,-3,66,-74,1, 
  /* [3][0][][] */ 59,-51,25,-123,11,-57,-9,2,98,-8,54,22,-21,60,55,127, 
  /* [4][0][][] */ -59,40,28,28,0,-23,-12,20,2,6,7,-35,-127,-4,-14,31, 
  /* [5][0][][] */ -1,51,111,9,20,84,-79,91,-51,43,-15,-13,27,-51,-127,24, 
  /* [6][0][][] */ 29,-28,124,-127,35,-15,-33,80,-99,-75,20,-66,11,86,5,57, 
  /* [7][0][][] */ 39,127,-44,-55,86,22,-14,-59,123,96,-45,10,28,-36,49,30, 
  /* [8][0][][] */ 14,-85,16,-83,22,-57,19,-67,21,56,78,-13,9,127,76,51, 
  /* [9][0][][] */ 27,-26,0,127,39,-15,31,-62,-66,92,38,-12,-34,-66,-12,3, 
  /* [10][0][][] */ -20,8,-37,-127,24,-8,-10,27,26,-38,2,-35,-21,-33,1,36, 
  /* [11][0][][] */ 5,20,30,-24,78,-38,77,-61,-88,33,-12,20,-6,127,-62,-30, 
  /* [12][0][][] */ 74,-6,-97,-33,24,-87,26,29,40,54,-56,-37,-50,127,-23,41, 
  /* [13][0][][] */ -22,7,-21,9,8,-127,1,15,0,-9,2,-6,13,-15,15,10, 
  /* [14][0][][] */ 23,-12,113,-42,66,-7,-127,-93,-32,-46,5,-5,7,-64,-9,-35, 
  /* [15][0][][] */ -123,23,-20,-71,1,9,127,68,-43,39,79,-56,0,105,66,39, 
  /* [16][0][][] */ -9,56,127,106,16,11,116,75,-97,7,-72,-12,-9,0,1,-78, 
  /* [17][0][][] */ -45,-127,-21,36,-83,-17,-65,10,-124,-33,27,-37,-3,39,56,-43, 
  /* [18][0][][] */ 17,50,16,65,24,-2,21,3,68,37,-26,-39,11,127,75,35, 
  /* [19][0][][] */ 4,-20,69,-13,79,6,-98,-81,-102,-63,-49,-127,-61,-34,-2,-27, 
  /* [20][0][][] */ 127,-55,-60,-17,32,-109,23,46,-64,58,-127,-16,26,-1,-9,-7, 
  /* [21][0][][] */ 52,-19,46,6,-27,19,-22,101,-2,-90,96,47,-4,127,65,101, 
  /* [22][0][][] */ -22,69,-31,127,-62,-7,104,79,-25,47,-45,14,1,14,41,-6, 
  /* [23][0][][] */ 48,-2,69,-114,33,-8,-32,33,-8,45,-4,-54,2,-14,-127,39, 
  /* [24][0][][] */ -127,29,12,-16,7,117,32,-16,1,19,121,0,-76,18,66,-28, 
  /* [25][0][][] */ 28,25,6,22,9,15,64,-56,-2,-127,-20,-17,-3,-33,3,25, 
  /* [26][0][][] */ -28,4,-1,-7,-41,-19,-30,-25,-127,-32,-11,-47,18,118,-18,48, 
  /* [27][0][][] */ -9,23,1,79,49,-21,-19,-36,69,10,-20,6,15,127,-21,8, 
  /* [28][0][][] */ 17,61,74,59,127,-25,38,30,-108,-28,-60,-48,14,103,65,-37, 
  /* [29][0][][] */ -4,-19,3,4,11,-7,10,21,-22,15,-13,-127,4,-24,-19,6, 
  /* [30][0][][] */ -18,89,-44,71,-39,-24,42,-127,-50,55,-29,-16,57,38,80,86, 
  /* [31][0][][] */ -42,-20,-12,-66,-16,2,-53,-120,30,91,-6,-127,-33,-56,-7,17, 
  /* [32][0][][] */ -127,-83,-13,66,57,40,-7,7,5,-45,-99,53,73,-2,59,69, 
  /* [33][0][][] */ -8,-31,-31,-11,-88,-15,-70,12,44,18,-5,-65,28,-116,127,31, 
  /* [34][0][][] */ 36,-16,52,27,48,27,-48,74,-75,-44,74,34,11,-11,-20,127, 
  /* [35][0][][] */ -46,46,-66,11,-3,-18,21,-127,77,96,-85,-5,4,0,80,-108, 
  /* [36][0][][] */ -14,37,1,127,43,40,88,17,9,25,-15,9,-7,17,-58,-55, 
  /* [37][0][][] */ 22,-11,3,-55,-14,0,-35,-48,-69,-7,-2,1,9,-127,45,-46, 
  /* [38][0][][] */ 53,92,-18,-58,127,-3,37,-48,115,79,-24,-9,15,-37,48,17, 
  /* [39][0][][] */ -21,49,-17,-127,-27,3,-44,27,51,-69,-30,-14,15,58,11,25, 
  /* [40][0][][] */ -13,-48,4,-92,-27,1,-14,-48,-116,1,24,-5,-2,-127,90,-66, 
  /* [41][0][][] */ -5,-12,-49,-12,-8,-33,10,-12,-26,14,-48,-6,-127,8,17,17, 
  /* [42][0][][] */ 127,86,-40,-26,-81,-51,-26,-56,2,28,93,-43,-55,55,127,-99, 
  /* [43][0][][] */ -25,87,-98,26,47,13,99,-30,78,68,0,32,11,-127,-111,-38, 
  /* [44][0][][] */ -15,-49,-8,-35,52,16,-94,-127,-4,-5,53,32,1,-47,61,-63, 
  /* [45][0][][] */ 6,31,-127,-26,15,-53,24,-69,16,30,26,-47,19,-31,31,-24, 
  /* [46][0][][] */ 5,-5,-13,-92,-8,10,25,-31,-124,-21,-1,6,-10,-127,72,-31, 
  /* [47][0][][] */ 24,42,20,-13,127,-10,-30,14,-47,43,9,31,6,0,113,-26, 
  /* [48][0][][] */ -127,-78,-21,50,73,19,22,-32,7,-16,-116,45,80,1,73,35, 
  /* [49][0][][] */ 14,22,83,99,127,-6,39,30,-123,-53,-56,-74,44,118,24,-60, 
  /* [50][0][][] */ 22,-20,-68,1,34,-127,-40,-24,-17,-28,2,-50,20,-4,-22,18, 
  /* [51][0][][] */ 2,44,38,-2,23,-3,5,20,-127,66,24,-126,8,-117,-18,95, 
  /* [52][0][][] */ 15,54,21,35,42,-20,26,46,45,69,-37,-72,16,127,71,27, 
  /* [53][0][][] */ -7,-33,-25,-21,-74,0,-73,-2,38,27,3,-62,39,-127,100,20, 
  /* [54][0][][] */ 46,-29,-58,21,118,93,-127,-40,-69,-3,-12,-62,-10,-51,-43,-48, 
  /* [55][0][][] */ 59,4,19,-2,51,-52,-75,-127,-47,-71,-83,-4,-8,-20,31,-7, 
  /* [56][0][][] */ -21,9,20,-16,-8,-21,-91,70,-4,127,5,-3,24,4,-1,5, 
  /* [57][0][][] */ -4,19,-57,-10,-47,-27,127,75,-10,44,-10,7,40,7,97,-28, 
  /* [58][0][][] */ 45,5,-127,42,94,123,-29,36,-90,-25,-22,14,-10,8,-1,-45, 
  /* [59][0][][] */ -89,73,107,24,-80,-62,124,127,23,7,30,-15,13,12,77,-6, 
  /* [60][0][][] */ -4,-10,-71,5,20,-127,-26,-12,-1,-12,13,-4,32,-25,3,4, 
  /* [61][0][][] */ 31,2,33,127,78,19,29,14,-107,-7,11,38,-12,25,38,-57, 
  /* [62][0][][] */ -48,127,11,-36,-19,-5,-50,70,-21,-58,-64,-46,-8,-82,-55,-36, 
  /* [63][0][][] */ -46,17,-42,127,-72,25,-73,-49,-50,-21,-29,-41,26,52,32,29, 
  /* [64][0][][] */ 26,-2,-3,32,-4,11,-24,68,12,0,-19,-52,-15,-127,66,6, 
  /* [65][0][][] */ -9,-27,15,-127,51,-41,51,-27,-22,46,-8,-127,-11,9,25,-48, 
  /* [66][0][][] */ 36,-32,46,-18,-14,19,-14,107,21,-62,54,56,9,127,4,93, 
  /* [67][0][][] */ -1,49,-19,-127,-29,-8,-62,24,70,-81,-19,-16,26,62,55,33, 
  /* [68][0][][] */ -18,27,127,-3,13,-9,-8,9,-51,-27,-19,-50,-5,-11,76,-20, 
  /* [69][0][][] */ 127,90,-6,-10,-66,-46,-24,-33,-11,13,75,-84,-59,59,72,-89, 
  /* [70][0][][] */ 52,9,-50,-12,-19,23,56,127,-44,91,-50,-8,18,65,-20,22, 
  /* [71][0][][] */ 5,-9,-11,15,-1,-71,6,26,-26,16,-57,19,-127,-5,38,48, 
  /* [72][0][][] */ 2,10,-127,20,0,29,12,74,-28,-26,14,3,15,7,-17,-2, 
  /* [73][0][][] */ -54,31,47,1,42,-37,-78,-127,19,-67,24,-30,9,-42,29,-18, 
  /* [74][0][][] */ -10,36,38,127,16,-14,-69,66,-57,21,-44,41,6,-121,11,-102, 
  /* [75][0][][] */ -7,16,-67,16,2,15,11,-18,127,27,6,18,19,116,-55,-1, 
  /* [76][0][][] */ 4,-19,-8,25,8,-10,-19,66,23,-40,-23,-127,-9,-14,-1,3, 
  /* [77][0][][] */ -21,3,-30,127,-52,59,72,83,34,20,38,63,-22,-42,-46,-10, 
  /* [78][0][][] */ 17,7,69,-101,75,-25,-25,47,32,-69,0,-43,21,127,25,7, 
  /* [79][0][][] */ -23,-81,-78,-40,-68,7,23,-88,127,25,13,52,25,34,35,-66, 
  /* [80][0][][] */ -49,-9,119,-127,13,-5,14,-119,-76,97,-41,-115,64,112,121,-29, 
  /* [81][0][][] */ -44,53,-118,21,66,-127,-14,54,-12,-40,53,-10,28,10,20,-1, 
  /* [82][0][][] */ 127,-5,5,18,21,-108,-21,25,-28,-7,-96,-20,101,13,10,25, 
  /* [83][0][][] */ -38,72,-103,-90,-30,-14,38,-98,56,44,-27,-127,8,50,56,112, 
  /* [84][0][][] */ -35,18,59,-14,-3,-23,80,-127,-21,49,-3,-34,41,45,63,-21, 
  /* [85][0][][] */ -88,127,22,-116,-78,-23,-31,-9,-46,-2,-66,32,3,-17,-112,-37, 
  /* [86][0][][] */ 8,23,-25,0,-20,-40,127,29,-14,-30,-23,-7,5,33,86,-23, 
  /* [87][0][][] */ -21,-38,4,-112,2,-31,44,-12,4,21,-9,-127,-16,-2,8,-39, 
  /* [88][0][][] */ 73,-22,13,-3,41,-47,-3,1,-52,61,-127,-62,59,16,85,-7, 
  /* [89][0][][] */ 25,-28,-43,-37,23,-4,-22,-13,-35,16,35,-54,127,-14,22,-51, 
  /* [90][0][][] */ -2,-45,52,-68,68,-16,-60,91,52,-92,-49,-39,-29,123,28,-127, 
  /* [91][0][][] */ -67,-11,-24,-48,1,-19,-54,-111,14,75,-2,-127,-38,-20,-15,13, 
  /* [92][0][][] */ -22,23,46,14,7,-127,11,2,-3,-25,-3,-23,0,-22,19,7, 
  /* [93][0][][] */ 42,-18,127,-7,-54,57,36,-25,-19,30,-73,-13,-24,-2,36,0, 
  /* [94][0][][] */ 44,12,-15,-37,17,-15,-19,5,-45,-18,11,-68,127,-20,31,-21, 
  /* [95][0][][] */ 127,82,-15,57,-119,-4,-74,-30,-8,-6,98,-31,-66,20,66,-112, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00092039565788581967, 0.0010916735045611858, 0.00074796256376430392, 0.00086897093569859862, 0.00085023249266669154, 0.0012136583682149649, 0.00038015341851860285, 0.00075828778790310025, 0.00054167263442650437, 0.0013294945238158107, 0.00057950220070779324, 0.00093882461078464985, 0.00094043114222586155, 0.0037122620269656181, 0.00071375188417732716, 0.00044088892173022032, 0.00040603108936920762, 0.0006349642644636333, 0.0012013851664960384, 0.00086046179058030248, 0.00033842198899947107, 0.00019154710753355175, 0.00038263166788965464, 0.00026969841565005481, 0.00050172291230410337, 0.0014562935102730989, 0.0015911435475572944, 0.00088540260912850499, 0.00062508543487638235, 0.0013087067054584622, 0.00054059067042544484, 0.00085868022870272398, 0.0004972314927726984, 0.0008499954710714519, 0.00079925433965399861, 0.00055157311726361513, 0.00055266998242586851, 0.00073742016684263945, 0.00081730831880122423, 0.0011503094574436545, 0.00046057871077209711, 0.0012417087564244866, 0.0007344605983234942, 0.00041140394750982523, 0.0012447213521227241, 0.00071468041278421879, 0.00084777263691648841, 0.00073294196045026183, 0.00057837832719087601, 0.00073292036540806293, 0.00098167674150317907, 0.00048269002581946552, 0.0015348948072642088, 0.00083707313751801848, 0.00085258315084502101, 0.0011807234259322286, 0.0013948335545137525, 0.00090622785501182079, 0.00084763177437707782, 0.00037269273889251053, 0.002937742043286562, 0.0015617129392921925, 0.00059718225384131074, 0.0012240175856277347, 0.0016006699297577143, 0.00090778467711061239, 0.00023258032160811126, 0.00062492222059518099, 0.0010392024414613843, 0.00097326346440240741, 0.00079356221249327064, 0.00054981181165203452, 0.0022822404280304909, 0.0011072675697505474, 0.00090563815319910645, 0.00052252551540732384, 0.00078137737000361085, 0.00035614593070931733, 0.00025143465609289706, 0.00054823508253321052, 0.00035601091803982854, 0.00050667964387685061, 0.00061150197871029377, 0.00058389559853821993, 0.00031363306334242225, 0.00074137060437351465, 0.0014079086249694228, 0.00072254164842888713, 0.00043092126725241542, 0.0014011122984811664, 0.00070702895754948258, 0.00069355033338069916, 0.00067248701816424727, 0.0013528261333703995, 0.0009934144327417016, 0.00048861169489100575, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -9055, 19807, -6745, -4163, -638, 9181, 29221, -42512, -5109, 15015, 18526, 8920, -13838, 10136, -1284, 9160, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00079353450564667583, 0.00044866206008009613, 0.00021779761300422251, 0.00035030857543461025, 0.00043601394281722605, 0.00042176953866146505, 0.00040965178050100803, 0.00034296937519684434, 0.00031689100433140993, 0.00026395436725579202, 0.000744672492146492, 0.00063027581200003624, 0.00031532879802398384, 0.00023778661852702498, 0.00050034670857712626, 0.00059780292212963104, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -8,-14,-21,-35,31,-8,-46,13,13,11,-18,0,-22,-10,-29,5,-1,0,-2,5,5,-37,4,1,2,11,3,127,28,-41,41,-16,-4,23,2,-10,-9,12,-45,-10,-29,7,-2,32,4,-3,13,-9,21,-3,-7,4,22,-1,-1,87,0,10,-18,-32,-3,31,2,-24,-42,-60,-19,38,10,6,17,-22,-7,-34,4,-25,-20,16,-9,3,-8,-33,27,21,-13,-8,-6,-97,-2,-13,10,-4,36,-44,-23,-18, 
  /* [1][0][][] */ 72,-61,-99,-40,127,7,59,66,-11,-88,-53,-30,-27,-6,-41,21,-80,4,33,21,16,7,-29,-58,14,-6,-34,-57,32,-27,-56,38,-24,5,0,-12,11,-12,-15,31,-37,53,-50,-33,-34,31,16,-11,15,-75,12,-55,-28,35,66,34,-45,-17,-27,-29,18,-23,8,-68,-92,93,-15,-16,0,-51,-30,-20,48,-110,-8,-7,58,-66,15,12,-16,-31,22,-2,-65,34,-1,11,26,-68,6,18,14,-44,37,105, 
  /* [2][0][][] */ 28,40,-111,1,95,94,17,89,10,-127,-13,-27,-37,-17,50,7,5,-13,-46,58,21,-34,96,18,44,30,-6,-44,36,-17,40,-60,22,16,-27,28,-123,-91,12,22,-8,-22,9,-28,27,-100,9,46,-34,9,-26,-21,93,-14,15,86,38,13,21,13,5,20,33,-39,25,-30,-15,-5,-51,-15,-23,-44,-44,-59,11,64,95,31,6,0,8,-62,2,-13,-53,46,17,32,-31,6,-5,-27,-12,-97,-65,18, 
  /* [3][0][][] */ 31,10,127,-3,16,-38,28,-33,-17,-47,14,-25,36,27,27,95,12,-1,31,16,119,7,41,21,37,-17,-8,2,7,9,-16,61,-79,30,19,4,-16,-15,16,13,-59,-33,65,29,2,86,-40,-43,-58,-23,-28,51,-11,-115,-26,5,-82,62,34,25,5,70,-11,-38,24,59,-11,-37,12,-11,16,-41,41,-38,24,-8,-6,12,84,44,-11,-47,12,-3,-21,2,11,49,19,9,14,21,57,119,27,-29, 
  /* [4][0][][] */ 23,-1,2,7,127,18,-11,-46,-27,-60,-27,-36,-54,22,3,52,43,-67,-49,45,4,6,43,-25,-7,-11,34,-55,23,-19,65,-46,88,1,-38,-18,40,11,24,3,-29,-3,-41,-33,-7,-73,6,-18,38,24,-30,10,-5,-54,13,-8,5,-8,-44,29,-8,64,65,17,59,45,-15,0,-48,0,48,66,23,-83,-30,-29,37,36,69,-32,-42,-46,-5,1,-72,5,58,55,-66,39,-7,-61,15,-7,20,-16, 
  /* [5][0][][] */ -8,-10,23,0,1,-29,40,-23,-31,-35,-8,4,27,29,-3,20,-5,-3,12,12,33,31,-38,64,12,-10,6,-97,1,23,16,35,-7,17,7,-42,22,29,-11,11,3,-20,27,-4,-9,30,-2,0,-19,-17,8,-7,-9,-35,-24,-60,-4,12,-26,18,61,5,-9,38,-1,52,2,77,-7,91,16,32,19,0,-12,72,-44,-4,34,8,1,0,-5,20,-7,16,-8,127,3,43,-7,-11,5,42,-63,8, 
  /* [6][0][][] */ 42,-63,-21,-33,-18,21,32,42,7,-4,-23,-75,-57,6,-21,32,7,-12,-3,-18,-32,28,5,5,-25,1,-36,-9,3,19,33,-11,50,10,49,-12,-8,-15,7,-83,-48,88,-11,-35,7,-70,-14,-12,-16,34,-15,57,-12,-50,1,18,3,-59,4,-2,-20,58,47,-88,27,-53,6,-17,2,-18,127,-21,-44,-5,-20,10,-69,-12,-3,-2,-6,28,24,-2,-32,0,40,8,-1,2,32,-37,-18,-35,-46,-11, 
  /* [7][0][][] */ 5,127,9,15,87,42,36,-11,-20,-33,22,-9,-41,23,23,29,5,-30,-3,14,48,-61,28,-4,-12,12,4,13,14,-17,11,5,31,-1,-53,15,25,6,-5,63,-75,33,10,40,-8,-45,20,-43,-28,-30,14,6,7,-42,-10,63,44,2,-8,-3,-21,-27,9,-16,-36,56,-18,-78,-2,-36,-7,52,-17,-36,8,5,58,47,10,-17,-58,-44,11,-14,-19,55,10,-15,-25,18,-34,-40,-52,-24,12,14, 
  /* [8][0][][] */ -12,1,93,18,-127,-30,55,-34,30,91,57,13,3,23,14,28,-56,7,11,2,-35,17,-117,70,15,-38,66,-17,2,-1,-10,56,78,-15,10,-4,-35,-22,12,34,33,-43,63,6,-42,43,40,30,-111,6,15,17,-60,-39,-43,17,-4,-56,-86,-17,17,-26,-35,-5,-17,100,-11,-48,24,5,-33,-16,46,52,55,-15,-30,-49,25,21,-59,26,-23,11,16,27,62,62,19,-13,63,51,25,36,39,3, 
  /* [9][0][][] */ -3,-102,1,10,84,67,-20,-33,21,-32,78,96,2,18,63,-79,33,-34,-4,6,-43,-40,27,-19,-20,1,8,29,-21,7,7,-6,21,36,-96,30,0,18,-2,58,32,-79,-8,72,4,41,-60,-21,29,31,-14,-74,46,33,-26,-62,-22,71,-15,-4,15,-36,-35,127,-81,-3,-15,-16,-14,45,-44,-57,54,0,0,33,47,-50,28,5,18,-11,15,29,-2,-59,14,4,4,-13,-52,31,-53,30,-1,-53, 
  /* [10][0][][] */ -52,-20,-15,-41,-22,0,63,-26,33,23,24,32,31,-8,-8,-3,-9,25,-22,3,2,30,13,23,-11,-9,19,-127,17,-43,49,-33,-2,37,5,1,-2,35,-6,-10,14,-33,26,-33,5,25,22,39,-6,35,-23,-13,-31,-18,-9,-59,20,17,-9,-34,30,11,-2,14,-35,90,-13,-27,20,-24,3,-8,-29,-13,8,51,-9,36,-1,15,-6,2,3,25,10,-10,-7,112,-2,7,17,6,32,-16,36,-42, 
  /* [11][0][][] */ -102,20,33,-3,17,-68,-4,-14,-60,-5,-3,31,62,28,-38,9,53,5,-60,-34,25,14,-7,12,66,6,72,-8,-33,18,-50,20,-5,37,-4,0,-6,8,42,2,-20,-26,20,16,77,73,73,42,53,36,0,50,14,-65,14,-28,-83,-14,-31,-46,-3,-9,-1,36,-15,-12,22,6,20,25,12,43,-15,5,11,1,-34,97,-85,72,-18,11,-79,-66,127,25,41,12,8,73,-34,-69,-16,97,-25,-22, 
  /* [12][0][][] */ -10,-7,-30,-14,68,10,10,-13,-19,16,27,2,14,-15,17,-3,-41,-8,7,-12,-31,-7,-46,56,-16,27,-15,113,-20,43,-27,8,-6,33,5,30,-7,-6,22,13,0,-29,0,-1,-11,31,23,8,0,3,4,-18,-31,29,-25,-23,-29,-29,11,16,-14,-20,-16,63,60,-81,6,60,-29,-127,-29,53,15,8,10,93,-1,-6,-7,8,9,32,-23,-6,21,-25,-15,-46,4,5,21,4,-42,65,6,27, 
  /* [13][0][][] */ -51,77,-42,0,-44,5,-21,35,-31,-32,36,11,55,2,-15,-2,-22,21,-35,-5,16,-26,54,-51,57,33,-3,-4,24,-25,-33,-103,-93,-30,-6,-2,-7,23,34,-12,-58,93,-12,6,39,-50,-9,-30,54,-20,37,62,73,-55,94,14,-12,40,44,5,12,36,-5,6,4,-40,5,6,21,2,21,-127,7,-27,-69,4,70,32,-59,-45,59,-41,6,-32,21,-20,95,-10,-39,-13,-29,20,30,-72,-25,12, 
  /* [14][0][][] */ -20,28,-43,-47,34,10,-22,39,-68,-14,25,0,-47,-72,-67,-41,-83,-4,62,-9,33,-10,24,-104,-44,16,-52,-16,22,-16,-15,-42,-77,-37,19,7,-22,-4,-4,-1,9,91,-86,-28,-49,-36,18,-14,127,-20,16,-15,32,54,-93,45,-23,29,-108,10,-2,27,40,11,19,7,3,3,-41,13,53,12,23,-4,-20,19,68,-86,-48,-97,-5,-45,13,43,27,-76,-48,-6,-39,3,35,50,7,-17,19,2, 
  /* [15][0][][] */ -29,-74,-20,-28,14,28,-19,-43,-11,20,-15,-29,9,-15,36,-25,-86,-9,-18,33,-33,-27,-73,-47,-11,10,-2,16,-14,-20,59,-86,-13,22,30,11,-8,23,-91,3,18,-40,-9,22,-24,-44,43,46,37,7,-5,-127,3,50,7,33,53,-11,-11,37,12,1,41,-3,-7,-1,-8,-4,-14,9,-13,30,-50,4,-2,-30,-15,-10,-3,-1,2,23,1,61,-7,-24,-37,-42,-33,41,33,74,-27,-8,5,-11, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.03372521698474884, 0.019068136811256409, 0.0092563983052968979, 0.014888114295899868, 0.018530592322349548, 0.017925204709172249, 0.017410200089216232, 0.014576197601854801, 0.013467867858707905, 0.011218059808015823, 0.031648579984903336, 0.026786722242832184, 0.013401473872363567, 0.01010593120008707, 0.021264733746647835, 0.025406623259186745, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 13702, 63154, -21, -443, 15912, -4787, 1045, -182, 6696, 13279, -2886, -859, 395, 8633, 5450, -9465, -4321, 452, -1749, 11688, -11290, 17123, -4580, 9614, 25236, -40, -4907, 19314, 15058, -19905, 1432, 22914, 24401, -11504, 1721, -468, -774, -123, 2146, -9190, -4531, 180, -9484, 234, 32330, -2135, 12558, 171, -14233, 107, -64, -847, -2732, 15238, -3977, 14167, 18032, 371, 35272, -1054, -9552, -1147, 1498, 76, -1023, 12893, -1323, -5712, -2318, 4386, 1201, -3449, 1733, -15, -2732, -5166, -741, -2200, 44650, -8982, -6315, -11231, 22, -202, 50873, -14424, -10107, -27715, -8975, 8204, -2003, 33370, -234, -2080, -2100, 893, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00016888983373064548, 8.9499131718184799e-05, 0.00015338054799940437, 0.00021454622037708759, 0.00022325867030303925, 0.00016668178432155401, 4.9320413381792605e-05, 8.4635626990348101e-05, 0.00023525120923295617, 0.00018444561283104122, 0.00031791307264938951, 0.00011470344179542735, 0.00033422274282202125, 0.00021612236741930246, 0.00039347208803519607, 0.0001521853992016986, 0.00022446060029324144, 0.00016962691734079272, 0.00019877975864801556, 9.8985488875769079e-05, 7.793599070282653e-05, 5.2019640861544758e-05, 0.0001490312279202044, 7.9391895269509405e-05, 6.7102177126798779e-05, 0.00014138706319499761, 0.00020569359185174108, 0.00015598561731167138, 8.1685720942914486e-05, 0.00045152450911700726, 0.00039699923945590854, 0.00024182877677958459, 0.00011438529327278957, 0.00013449796824716032, 0.00024447499890811741, 0.00042749143904075027, 0.00039755427860654891, 0.00030886486638337374, 0.00023566251911688596, 8.6840234871488065e-05, 0.00023165118182078004, 0.00020019197836518288, 0.00036835757782682776, 8.7784981587901711e-05, 0.00038766139186918736, 0.00010594225022941828, 0.0001115273917093873, 0.00028050303808413446, 0.0006980908801779151, 0.00013625419524032623, 0.0004504391981754452, 0.00013770379882771522, 0.0001814264542190358, 0.00018620894115883857, 0.00021971444948576391, 0.0001167873851954937, 0.00015303904365282506, 0.00048384629189968109, 4.1479092033114284e-05, 0.00019583693938329816, 0.00029119083774276078, 0.00033565706689842045, 0.00015299615915864706, 0.00015560585597995669, 0.00012643029913306236, 0.00015053559036459774, 0.00024208360991906375, 0.00040019361767917871, 0.00020488754671532661, 0.00011533014912856743, 0.00025534929591231048, 9.5096722361631691e-05, 0.00023043966211844236, 0.00013546652917284518, 0.00026744083152152598, 0.00037045616772957146, 0.00013955387112218887, 8.2346552517265081e-05, 5.9856261941604316e-05, 0.00013252980716060847, 0.00026599649572744966, 0.00022372815874405205, 0.00017667270731180906, 0.00032347597880288959, 7.0649679400958121e-05, 0.00010304912575520575, 8.0527424870524555e-05, 0.00048831565072759986, 0.00023664828040637076, 0.00012516950664576143, 0.00039850233588367701, 3.4625365515239537e-05, 0.00014930994075257331, 0.00013059261254966259, 0.00037158987834118307, 0.00029949354939162731, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -44,-71,-13,127,22,73,78,-59,-17,-21,-15,3,-28,-3,36,2,-7,-46,27,21,21,-127,127,10,-86,8,49,-30,-127,-127,39,24,10,33,60,-21,-30,-8,31,0,-14,29,-104,69,25,-69,37,44,-18,52,-25,21,3,-7,14,49,-90,-49,-58,-17,-10,1,11,40,66,-25,73,14,-8,18,20,127,22,25,25,-5,-12,21,127,-6,-14,15,-29,20,127,20,-75,-17,3,-34,-14,-36,1,-29,-16,27, 127,-126,74,106,-43,127,36,-118,70,5,-17,127,127,-101,-13,18,11,127,127,-116,127,-79,82,72,-127,-116,-63,-35,-57,45,-59,-19,-88,56,-127,-87,-45,-12,-51,65,-2,127,127,82,-52,-113,-106,-50,-15,-127,43,86,68,-31,42,81,-48,41,-75,-111,-43,-42,-61,65,71,-61,25,31,-82,35,-18,86,115,127,13,17,5,63,-37,54,65,127,127,-25,-9,77,-108,127,-117,-99,5,-127,-90,-127,-39,104, -73,-13,29,-81,14,-20,68,-5,78,-37,-27,23,-16,-7,-9,-10,-9,-18,8,-6,-17,-104,33,2,-125,100,8,-58,109,48,-14,11,0,12,14,-32,-8,37,19,20,22,12,-110,64,18,-25,36,13,-15,11,-18,5,-9,1,-2,24,-66,5,-31,51,0,41,36,0,-8,-39,-33,24,7,3,-3,38,8,-25,-6,3,-10,-5,-89,3,-22,-23,-20,3,-114,9,-33,-22,-48,28,-25,-32,29,-29,-15,1, 
  /* [0][1][][] */ -64,-74,69,-35,-48,99,16,127,-53,-24,-1,-114,25,-113,78,31,0,-63,-15,90,53,-65,48,54,-103,-9,127,-23,-25,63,121,-107,-127,93,-84,-59,-35,32,-25,98,-50,-27,-7,46,-51,127,-25,64,14,95,18,-2,15,-55,27,31,127,121,-74,-81,127,-31,-34,127,69,-38,-16,-1,127,37,127,99,-41,103,-3,12,15,15,-34,8,-43,119,-82,111,3,32,-56,29,84,-127,-30,-5,127,-70,-23,0, 66,127,54,-113,127,92,87,38,-127,127,127,-38,-64,-127,-127,127,127,-66,-122,-53,98,91,-121,127,-101,-86,-40,127,-122,109,-127,-127,-85,127,107,127,127,-127,-101,127,-67,-101,110,-127,-127,-35,-127,-127,127,-111,85,43,127,127,127,-127,100,-127,-127,127,20,-80,-127,-101,-127,127,-127,127,-125,-127,-111,-84,-127,-81,127,127,-127,127,-82,127,127,33,-42,-127,60,127,92,47,127,10,127,1,-67,35,127,-127, -52,-13,-49,38,-57,-90,32,-22,17,-35,-29,93,4,88,13,9,-4,62,-5,127,3,-76,-38,7,-79,111,-68,-22,-73,-17,18,-64,-70,40,6,-20,-28,46,-65,47,127,-7,-35,29,-42,-62,14,43,8,118,-12,7,-39,-71,5,22,95,0,3,24,-38,127,98,-51,-43,11,35,-10,-80,119,-19,-83,-2,-55,-13,-18,28,17,77,-37,-71,-40,52,16,-50,-16,68,23,16,60,-41,19,-41,93,-28,-4, 
  /* [0][2][][] */ -66,0,-7,-20,11,-41,65,26,53,-27,-37,-6,15,14,-27,1,-7,67,9,2,-54,-67,5,-8,-37,-52,34,-70,86,39,25,25,15,-13,-10,-48,-4,34,0,3,-16,-8,-67,99,2,35,9,34,-15,-28,9,-19,23,-3,8,17,-69,25,-16,15,18,2,-20,-6,-1,-47,-45,16,-31,13,24,29,13,-22,26,5,19,6,-82,-12,-8,-12,18,16,-124,7,13,-44,-55,-44,-27,-46,10,59,-19,-7, 121,33,-127,-36,-73,-22,32,33,-66,-31,-18,-109,-79,100,-13,34,2,-53,-9,-127,87,-37,-35,-2,-115,127,-50,19,-37,-19,-9,-5,-60,12,27,5,-22,-29,127,51,9,-17,68,-36,-42,81,-65,-44,-32,-4,-127,-127,-48,-27,0,41,-64,-6,9,39,-6,-18,10,-49,-54,32,63,-22,116,109,-26,-72,12,-59,2,4,102,6,50,25,13,-94,-49,4,3,11,127,41,-55,39,-18,-109,41,81,-10,26, -52,11,-20,25,13,-66,-127,6,-13,-6,-16,2,12,-28,18,0,-8,-17,5,18,-50,-57,17,-3,6,-94,20,0,-52,-38,-6,15,41,-19,-5,-26,-33,4,43,-42,23,-5,-44,-34,0,66,23,14,-9,-1,9,-8,16,2,-4,-1,-60,-14,6,-39,-11,11,88,-13,35,-4,-3,29,0,4,-5,20,-17,13,0,17,41,3,76,-11,3,-13,-7,-16,73,3,45,-38,60,40,-17,-52,-5,2,-16,-14, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0071778181008994579, 0.0038037130143493414, 0.0065186731517314911, 0.0091182142496109009, 0.0094884932041168213, 0.0070839757099747658, 0.0020961174741387367, 0.0035970141179859638, 0.009998176246881485, 0.0078389383852481842, 0.013511305674910545, 0.0048748962581157684, 0.014204465784132481, 0.0091852005571126938, 0.016722563654184341, 0.0064678792841732502, 0.0095395753160119057, 0.0072091436013579369, 0.0084481397643685341, 0.004206883255392313, 0.0033122794702649117, 0.0022108347620815039, 0.0063338270410895348, 0.0033741553779691458, 0.0028518424369394779, 0.0060089500620961189, 0.0087419776245951653, 0.0066293887794017792, 0.0034716431982815266, 0.01918979175388813, 0.0168724674731493, 0.010277722962200642, 0.0048613748513162136, 0.0057161636650562286, 0.010390187613666058, 0.018168386071920395, 0.01689605601131916, 0.013126756064593792, 0.010015657171607018, 0.003690709825605154, 0.0098451748490333557, 0.0085081588476896286, 0.015655197203159332, 0.0037308617029339075, 0.016475608572363853, 0.0045025455765426159, 0.0047399140894412994, 0.011921378783881664, 0.029668862000107765, 0.0057908031158149242, 0.019143665209412575, 0.0058524110354483128, 0.0077106240205466747, 0.0079138800501823425, 0.0093378638848662376, 0.0049634636379778385, 0.0065041589550673962, 0.020563466474413872, 0.0017628613859415054, 0.0083230696618556976, 0.012375610880553722, 0.014265424571931362, 0.006502336822450161, 0.0066132484935224056, 0.0053732874803245068, 0.0063977623358368874, 0.010288553312420845, 0.017008228227496147, 0.0087077207863330841, 0.0049015311524271965, 0.010852345265448093, 0.0040416107513010502, 0.0097936857491731644, 0.0057573271915316582, 0.011366235092282295, 0.015744386240839958, 0.0059310393407940865, 0.0034997283946722746, 0.0025438910815864801, 0.0056325169280171394, 0.011304850690066814, 0.0095084467902779579, 0.0075085898861289024, 0.013747729361057281, 0.0030026114545762539, 0.0043795877136290073, 0.0034224155824631453, 0.020753415301442146, 0.01005755178630352, 0.0053197038359940052, 0.016936348751187325, 0.0014715780271217227, 0.0063456720672547817, 0.0055501856841146946, 0.015792569145560265, 0.012728475965559483, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1927, 8132, 15139, 26716, 13783, -3766, -1517, 5441, 27298, -4288, 10191, 3485, 9383, 11966, 32400, 1503, 2479, 7546, 14704, 6844, -395, 482, 12928, -1287, 3638, -77, 10469, 5612, 5297, 58751, 58674, 20911, 8187, -833, 9072, 2029, 1728, 6909, 17470, -689, 16226, 7606, 55335, -3313, 30051, 7669, 5741, 14791, 58914, 12703, -435, 6910, -2992, -67, -2394, 5698, -921, 12873, 5619, 7261, 4021, 12553, 8636, 6251, 9772, 6376, 5096, -5997, 7553, -2692, 3748, 8360, 18843, 4212, -3750, -3511, 6188, 291, 2959, -1208, 20809, 17851, 4276, 22237, 3814, 322, 14250, 70109, 8492, 14050, 7254, -257, 5124, 12292, 5458, 15176, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00023401874932460487, 0.00017764777294360101, 0.00011714921856764704, 8.6835316324140877e-05, 0.00021795951761305332, 0.0002861076791305095, 0.00050246628234162927, 0.00029463280225172639, 8.8110013166442513e-05, 0.00030169964884407818, 0.00026761289336718619, 0.0002486289304215461, 0.00012739378144033253, 0.00019149472063872963, 7.5145617302041501e-05, 0.00038711144588887691, 0.00019054609583690763, 0.0001617404050193727, 0.00015390240878332406, 0.00017518925596959889, 0.00020378835324663669, 0.00053156010108068585, 0.00015743268886581063, 0.00052593194413930178, 0.00070478726411238313, 0.00025697165983729064, 0.00021003012079745531, 0.00024939572904258966, 0.00029778649332001805, 6.0202626627869904e-05, 4.8176640120800585e-05, 0.00012061305460520089, 0.00020719568419735879, 0.00030898913973942399, 0.0002182893076678738, 0.00028469599783420563, 0.00028422105242498219, 0.00020569266052916646, 0.00015311854076571763, 0.00075025390833616257, 0.00011377325427019969, 0.00020654943364206702, 4.884366353508085e-05, 0.00031514145666733384, 0.00011029071902157739, 0.00018682323570828885, 0.00030020394478924572, 0.00018007666221819818, 6.9931629695929587e-05, 0.00016668351599946618, 0.00022678173263557255, 0.00024794167256914079, 0.00036200392059981823, 0.00022936952882446349, 0.00044478022027760744, 0.00018557297880761325, 0.00019622454419732094, 0.00014905109128449112, 0.00036685695522464812, 0.00019728335610125214, 0.00040241464739665389, 0.0001117003193940036, 0.00017039077647496015, 0.00016422406770288944, 0.00025546140386722982, 0.000295892299618572, 0.00025241740513592958, 0.00021989500964991748, 0.00022762306616641581, 0.00026481467648409307, 0.00029806033126078546, 0.00018789026944432408, 0.00011030672612832859, 0.0002477722882758826, 0.00040678572258912027, 0.0003892748209182173, 0.00027024731389246881, 0.00028349112835712731, 0.00027406885055825114, 0.00032769347308203578, 9.9574113846756518e-05, 9.2217698693275452e-05, 0.00020006336853839457, 8.695414726389572e-05, 0.00030655402224510908, 0.00034760870039463043, 0.00016241648700088263, 5.4551335779251531e-05, 0.00016542436787858605, 0.00015942234313115478, 0.00017158105038106441, 0.0003473537799436599, 0.00027661837521009147, 0.00012617316679097712, 0.00021515153639484197, 0.00011342966899974272, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -2,49,-1,25,-9,-15,17,5,3,26,-37,57,7,-103,68,-127, 
  /* [1][0][][] */ 42,34,-27,-15,17,-12,127,-114,19,111,11,-14,20,-52,34,2, 
  /* [2][0][][] */ -82,36,8,-67,74,-45,30,87,-35,16,127,-38,-107,70,49,29, 
  /* [3][0][][] */ -73,25,35,40,-46,57,42,91,16,66,-127,-6,36,-88,-74,-73, 
  /* [4][0][][] */ -5,-2,-6,90,-31,76,-9,32,23,-4,22,17,22,-21,-127,-20, 
  /* [5][0][][] */ 2,-16,63,-21,2,-8,-52,11,-45,119,-27,-127,-8,30,-84,-40, 
  /* [6][0][][] */ 26,-20,43,-25,35,37,-57,-32,-10,-20,51,-5,127,-29,4,-43, 
  /* [7][0][][] */ 48,-12,127,-47,-44,-55,17,-1,-53,49,-88,-79,27,-7,32,-1, 
  /* [8][0][][] */ 39,22,54,33,-40,83,18,23,52,18,3,-115,-49,-27,-127,-85, 
  /* [9][0][][] */ 27,-78,127,23,-7,-82,21,76,54,-42,24,-19,-40,75,-103,-10, 
  /* [10][0][][] */ -35,-106,-52,-49,-127,22,-59,93,108,125,78,-35,-75,51,69,23, 
  /* [11][0][][] */ 61,-39,-2,-82,19,-44,-68,-127,-13,47,-42,-47,42,-41,49,-87, 
  /* [12][0][][] */ -22,-14,33,-69,13,-46,-73,15,-61,-62,-30,6,-21,127,99,76, 
  /* [13][0][][] */ -38,-84,-71,30,-5,-42,-25,-20,51,36,-51,10,53,7,127,-2, 
  /* [14][0][][] */ 13,-55,47,23,30,41,-22,107,17,53,46,-58,5,31,-58,127, 
  /* [15][0][][] */ 20,-16,-3,57,7,-13,111,-17,-1,-127,-1,-36,-15,-46,-21,-38, 
  /* [16][0][][] */ 54,-66,-34,3,11,14,40,-57,125,76,85,0,-6,120,77,127, 
  /* [17][0][][] */ -68,-61,33,127,85,51,2,-16,95,-62,6,2,5,48,-122,18, 
  /* [18][0][][] */ -34,15,29,12,-113,-23,-40,30,-62,-31,10,-54,14,-127,82,13, 
  /* [19][0][][] */ 30,-28,69,-65,100,13,-111,63,96,-127,89,46,7,96,34,109, 
  /* [20][0][][] */ 17,-4,85,-87,13,17,-44,21,-40,-61,79,-22,-2,13,-43,127, 
  /* [21][0][][] */ -84,-10,22,-36,37,21,-81,-102,-44,72,5,8,-127,-39,23,-28, 
  /* [22][0][][] */ 7,7,34,-29,21,-75,12,-6,-127,13,-27,-37,-31,-1,60,1, 
  /* [23][0][][] */ 17,-5,20,-5,0,6,-1,2,-1,-7,49,-6,127,-16,9,-45, 
  /* [24][0][][] */ -9,-16,19,-65,-18,-15,30,3,-46,-9,-14,-127,-7,-79,18,29, 
  /* [25][0][][] */ -127,22,-10,21,1,-37,-43,-114,-7,19,-13,-97,-69,-89,41,-72, 
  /* [26][0][][] */ 72,-11,-4,-77,97,19,-9,7,127,-64,69,-39,-8,56,-16,61, 
  /* [27][0][][] */ 94,-27,9,-31,-29,-36,-4,-19,-16,19,-127,14,15,-35,-18,37, 
  /* [28][0][][] */ -86,-18,-127,-62,27,-4,56,-51,7,48,-42,30,66,-22,-41,27, 
  /* [29][0][][] */ -65,-36,2,127,-14,19,3,-52,8,-7,-98,39,26,-66,25,-41, 
  /* [30][0][][] */ 94,-4,127,-24,64,42,-53,55,-25,-87,64,-16,-31,32,-63,83, 
  /* [31][0][][] */ 0,-117,-36,-54,18,-33,11,-85,-8,81,93,8,-5,82,89,127, 
  /* [32][0][][] */ -16,64,-41,30,-127,19,-64,-40,-60,-20,3,42,6,52,41,61, 
  /* [33][0][][] */ 13,-14,49,97,-10,-29,33,-79,-127,57,60,-31,-7,-2,23,100, 
  /* [34][0][][] */ 32,-15,25,-9,89,-47,-127,-28,-41,82,-56,-4,-34,-18,6,16, 
  /* [35][0][][] */ 92,3,-31,11,29,-127,-8,9,-27,16,-100,-4,82,-6,8,25, 
  /* [36][0][][] */ 12,-8,-127,5,33,10,-38,5,-36,-11,2,-40,-5,13,-34,10, 
  /* [37][0][][] */ 11,1,127,33,-67,94,21,-106,9,61,-82,37,50,-40,-4,-32, 
  /* [38][0][][] */ -127,40,9,33,18,97,3,-17,-1,-41,127,-10,-51,31,-6,-14, 
  /* [39][0][][] */ -6,-5,19,39,37,-6,-127,35,19,18,8,-29,-2,-18,0,-15, 
  /* [40][0][][] */ 55,109,-68,105,67,60,127,97,-34,-2,-70,79,23,10,-93,-10, 
  /* [41][0][][] */ 2,49,-14,-10,-29,-5,127,117,-37,72,-61,-12,8,72,44,-34, 
  /* [42][0][][] */ -2,-109,95,19,90,17,-54,60,98,-48,127,26,36,95,-91,9, 
  /* [43][0][][] */ -90,25,11,-27,36,19,-66,-99,-35,59,-33,-21,-127,-34,51,-46, 
  /* [44][0][][] */ 0,-11,-45,-30,-8,-2,-25,-82,127,19,19,13,10,81,5,45, 
  /* [45][0][][] */ -48,-31,41,-31,32,-35,-9,55,-20,-64,31,23,2,91,26,127, 
  /* [46][0][][] */ -47,6,-19,94,-76,-45,9,-62,-127,28,-26,-5,-16,30,10,-34, 
  /* [47][0][][] */ -29,-28,-90,127,11,42,-5,-18,16,29,56,81,-20,-21,40,-13, 
  /* [48][0][][] */ -13,-21,-9,-110,67,21,-56,-44,-14,5,34,-41,18,49,127,51, 
  /* [49][0][][] */ -5,21,31,127,8,92,-126,-23,32,-60,-122,-14,4,-92,-48,-110, 
  /* [50][0][][] */ 16,55,10,-99,62,14,6,56,127,-12,-61,27,2,-59,4,-59, 
  /* [51][0][][] */ 25,-53,22,-5,43,-12,-54,-127,33,-55,-7,11,-4,-5,12,-4, 
  /* [52][0][][] */ 23,59,-4,4,41,-18,-91,93,-122,127,-61,-83,106,115,1,-73, 
  /* [53][0][][] */ 29,95,35,-84,-10,10,16,-2,-69,-30,-57,62,11,-127,-106,-21, 
  /* [54][0][][] */ 0,1,9,38,55,-20,19,-39,2,27,-16,-19,-7,127,-34,-20, 
  /* [55][0][][] */ -121,127,91,-12,60,-8,2,6,-60,20,78,-43,-19,-14,95,-5, 
  /* [56][0][][] */ 98,-28,47,-78,52,-16,18,39,51,-62,40,127,1,20,76,33, 
  /* [57][0][][] */ -21,12,14,58,-20,22,44,127,-1,22,-3,-12,0,61,-18,26, 
  /* [58][0][][] */ 20,127,16,-119,-10,13,-14,30,79,-15,10,66,-5,-60,27,70, 
  /* [59][0][][] */ 32,35,38,-84,-23,16,24,-10,6,37,0,-63,-17,-127,-63,14, 
  /* [60][0][][] */ 30,-16,127,-38,-56,102,33,-12,-39,25,-47,-18,19,-3,39,-3, 
  /* [61][0][][] */ -8,49,-48,-46,-64,-10,80,127,-30,50,7,1,29,82,36,-32, 
  /* [62][0][][] */ -57,3,2,-19,-112,55,-88,-6,-44,-49,59,-125,15,-127,76,27, 
  /* [63][0][][] */ 42,-81,12,-59,66,6,-127,-119,-27,94,-4,10,70,-13,35,-50, 
  /* [64][0][][] */ -29,4,52,18,66,-13,-45,-127,23,-127,33,-40,-22,-33,0,13, 
  /* [65][0][][] */ -127,25,40,-59,9,54,35,-54,-83,25,32,-10,-9,34,-10,-7, 
  /* [66][0][][] */ 80,11,110,41,-41,37,-39,16,-31,-4,60,-100,4,31,-127,-48, 
  /* [67][0][][] */ 37,-55,-50,97,96,-36,-88,-116,77,-127,-81,-44,-91,8,-109,10, 
  /* [68][0][][] */ -5,4,-69,68,-69,-86,12,-65,-13,-7,25,-37,-46,40,127,-47, 
  /* [69][0][][] */ -5,15,-81,70,-9,-89,34,72,73,18,61,1,127,6,-25,13, 
  /* [70][0][][] */ 4,-6,-21,-29,-29,-13,127,92,-20,36,-29,-5,21,52,1,10, 
  /* [71][0][][] */ 43,-41,-11,-33,34,25,2,56,1,-37,-9,-7,18,-127,61,-21, 
  /* [72][0][][] */ 25,36,-2,16,35,-52,-47,-127,21,63,-46,13,37,55,61,54, 
  /* [73][0][][] */ -38,-127,-40,-65,-60,-8,50,-36,-3,14,-44,-24,29,-53,65,-33, 
  /* [74][0][][] */ -23,25,75,101,-28,12,-127,116,32,-34,-40,-30,-14,-7,-30,-6, 
  /* [75][0][][] */ -65,46,-57,6,8,127,78,120,16,51,-21,-11,-120,66,13,29, 
  /* [76][0][][] */ 24,-32,-3,-74,85,-73,-127,-96,-40,-53,-7,-61,26,21,54,-23, 
  /* [77][0][][] */ -24,5,-12,-39,-63,-19,6,-25,127,3,-57,11,2,58,59,-76, 
  /* [78][0][][] */ -110,-127,-7,88,92,54,-10,38,-28,-97,-126,55,40,-20,83,63, 
  /* [79][0][][] */ 43,1,30,-56,127,3,47,25,58,13,-1,12,8,-28,14,-28, 
  /* [80][0][][] */ 8,-52,39,-127,-3,-31,10,15,-104,-23,11,-72,6,68,-17,24, 
  /* [81][0][][] */ 56,-26,99,20,25,62,-63,-21,-13,-74,82,-52,-10,88,-127,63, 
  /* [82][0][][] */ -40,16,25,-55,-14,-12,-27,-54,-16,-3,19,-106,-3,-127,-110,23, 
  /* [83][0][][] */ -17,29,-42,-95,-116,8,-14,54,-105,-70,-2,-39,20,-127,17,97, 
  /* [84][0][][] */ 127,29,61,44,-60,-28,-68,6,-32,-37,97,-36,-80,33,82,-66, 
  /* [85][0][][] */ -27,-14,12,-35,43,4,-44,85,-75,-106,-68,-32,-16,73,52,-127, 
  /* [86][0][][] */ 2,-7,60,4,-81,70,-60,58,-95,-94,90,-41,-18,-127,-12,43, 
  /* [87][0][][] */ 127,-64,111,20,-29,-68,-22,16,3,55,-109,-1,87,34,13,54, 
  /* [88][0][][] */ 35,69,-31,-33,23,-37,-12,-20,115,-10,60,-14,-22,-8,127,-120, 
  /* [89][0][][] */ 58,127,-118,-27,-42,-25,29,-88,43,55,10,-58,-67,-28,-96,-100, 
  /* [90][0][][] */ -73,-15,62,-111,-95,17,113,-112,97,-127,8,-110,29,-11,-98,-35, 
  /* [91][0][][] */ 25,36,4,-92,-48,-20,36,-17,-46,-5,49,75,-14,-17,12,127, 
  /* [92][0][][] */ 20,25,-8,-6,47,-28,-70,-127,36,-91,-16,-57,-41,-19,-6,-5, 
  /* [93][0][][] */ 51,30,41,-104,13,-32,-12,67,43,-59,127,17,-26,126,21,88, 
  /* [94][0][][] */ -127,46,-117,-4,86,-124,-9,-3,-10,-56,87,-46,-26,5,-31,13, 
  /* [95][0][][] */ -10,55,62,-127,40,-33,-13,12,29,-19,-62,-95,2,39,-120,-17, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00073244492523372173, 0.00055601191706955433, 0.00036666015512309968, 0.00027178201708011329, 0.00068218185333535075, 0.00089547573588788509, 0.0015726468991488218, 0.00092215812765061855, 0.00027577162836678326, 0.00094427639851346612, 0.00083758978871628642, 0.00077817268902435899, 0.00039872413617558777, 0.00059935083845630288, 0.00023519493697676808, 0.0012116029392927885, 0.00059638178208842874, 0.00050622411072254181, 0.00048169231740757823, 0.00054831709712743759, 0.00063782813958823681, 0.0016637064982205629, 0.00049274158664047718, 0.0016460911137983203, 0.0022058824542909861, 0.00080428423825651407, 0.00065736396936699748, 0.00078057264909148216, 0.0009320287499576807, 0.00018842553254216909, 0.00015078592696227133, 0.00037750144838355482, 0.00064849259797483683, 0.00096709141507744789, 0.00068321404978632927, 0.00089105736697092652, 0.00088957091793417931, 0.00064378837123513222, 0.00047923895181156695, 0.0023481864482164383, 0.00035609386395663023, 0.00064646993996575475, 0.00015287361748050898, 0.0009863473242148757, 0.00034519404289312661, 0.00058472977252677083, 0.00093959498917683959, 0.000563613954000175, 0.0002188759099226445, 0.00052169535774737597, 0.00070979411248117685, 0.0007760216249153018, 0.0011330200359225273, 0.0007178935338743031, 0.0013920979108661413, 0.00058081664610654116, 0.00061415450181812048, 0.00046650841250084341, 0.0011482093250378966, 0.00061746843857690692, 0.0012594998115673661, 0.00034960589255206287, 0.00053329853108152747, 0.00051399762742221355, 0.00079955731052905321, 0.00092610018327832222, 0.00079003005521371961, 0.00068823964102193713, 0.00071242736885324121, 0.00082883168943226337, 0.0009328857995569706, 0.00058806943707168102, 0.00034524413058534265, 0.00077549146953970194, 0.001273180590942502, 0.0012183740036562085, 0.00084583513671532273, 0.00088728632545098662, 0.00085779593791812658, 0.0010256333043798804, 0.00031165260588750243, 0.00028862809995189309, 0.00062616949435323477, 0.00027215393492951989, 0.0009594698203727603, 0.0010879650944843888, 0.00050834019202739, 0.00017073781054932624, 0.00051775440806522965, 0.00049896893324330449, 0.00053702393779531121, 0.001087167183868587, 0.00086577562615275383, 0.00039490382187068462, 0.00067339325323700905, 0.00035501850652508438, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -593, 1732, -1702, 27533, 28632, -2071, -5909, -824, 9360, -12883, 27989, 18779, -17916, 17407, 40267, -15671, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00041652406798675656, 0.0003200025821570307, 0.00026996951783075929, 0.00018311353051103652, 0.00031024639611132443, 0.00028556113829836249, 0.00030108110513538122, 0.00042290941928513348, 0.00022092102153692394, 0.0002131284709321335, 0.00036244769580662251, 0.0007334626279771328, 0.00033507362240925431, 0.00053912895964458585, 0.00049469969235360622, 0.00037025121855549514, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -3,0,12,23,34,50,-9,-7,42,9,5,2,-6,1,31,86,4,-6,-2,-9,102,-33,22,-22,-31,-40,-47,-109,-5,5,45,35,106,-1,-15,-4,7,-23,-4,12,-38,11,20,-43,-12,-33,-14,31,-6,6,-4,11,-44,-18,6,-9,53,38,-7,-43,-75,13,-24,2,19,4,58,-4,14,9,-4,-20,-69,-4,-19,-17,10,-88,13,-27,31,-36,-40,-41,39,-12,10,15,-11,5,23,-49,35,11,-29,127, 
  /* [1][0][][] */ 46,-68,27,67,-18,-42,-23,-74,-11,-77,-8,50,11,-59,-39,-49,-103,-10,20,20,-32,-127,-51,9,119,-48,-67,2,-18,69,-6,49,-12,20,-54,-7,-36,-36,50,-24,35,-68,51,-24,-43,-1,53,-10,27,18,-19,-46,90,-55,21,-2,3,11,-31,-87,33,-42,22,-71,7,-76,16,30,18,49,-50,-9,-76,27,13,65,16,64,26,-16,17,31,-78,29,-88,65,-8,61,-25,11,38,13,-18,-23,33,-2, 
  /* [2][0][][] */ 20,11,13,-36,-2,-13,-24,20,63,-11,11,73,18,4,39,15,-15,-17,23,0,-16,-64,20,-83,-17,-23,-27,25,7,15,127,-65,1,-58,-33,30,10,110,-39,-51,-4,-19,-18,37,-38,-43,-57,4,20,21,-50,-15,32,-12,-20,-17,-29,12,9,23,-16,1,74,72,20,-74,6,-68,-23,-7,-35,1,-8,-1,-23,11,25,45,14,9,0,102,22,-23,-25,18,12,16,39,19,0,-54,-56,0,-8,56, 
  /* [3][0][][] */ -37,-34,-76,58,45,12,11,-13,-4,36,14,14,-4,-32,64,-3,47,-44,20,2,-17,-24,8,36,-6,43,28,-4,27,-32,74,-37,38,-37,-16,51,-3,7,4,38,18,-71,38,-50,-24,-39,36,6,-127,33,5,41,-127,-24,-25,-52,27,19,-26,48,0,25,2,34,-30,-96,-50,16,62,20,25,37,-41,24,0,-36,-66,-65,23,-54,34,-48,39,82,45,65,41,8,22,-40,-13,20,-16,18,-22,-45, 
  /* [4][0][][] */ -13,-17,14,-66,-8,-26,-45,17,-18,-26,-17,-16,13,65,6,28,41,-9,6,0,5,20,50,2,-18,-5,9,16,25,-13,-1,-16,-39,5,-18,10,26,-22,8,8,-12,20,-94,-21,24,-1,-9,-24,4,65,-10,-22,-20,-3,12,-5,3,-25,27,42,-1,13,-14,-5,38,-127,35,-20,-46,20,-22,4,-6,14,-24,39,-11,55,66,4,13,0,122,-34,42,-38,-18,14,65,11,-15,17,-44,17,5,-43, 
  /* [5][0][][] */ -10,8,-11,3,-2,17,9,116,58,-16,-22,-34,-26,32,43,37,0,0,-2,-44,-53,-8,-13,-40,25,13,40,71,60,4,65,54,-25,5,21,13,-39,-44,-25,0,-37,-22,5,-4,53,14,21,22,11,11,-11,0,-25,-8,10,-16,-30,-26,-15,24,-36,24,-24,-20,-3,14,-15,12,3,11,28,19,27,17,8,-5,-15,32,-8,127,14,-53,25,41,14,-5,37,-38,-13,-36,6,-124,-32,-21,-5,-122, 
  /* [6][0][][] */ -36,2,10,-56,-14,-29,-5,-20,-7,21,-25,21,25,-43,5,-22,-14,-61,33,7,-9,-11,-33,46,97,3,-13,-23,-2,-4,8,0,-33,7,-37,4,14,-1,11,37,10,-35,-38,-20,8,-19,39,-127,18,39,0,-5,37,-5,-6,-48,38,-2,-4,11,25,24,14,11,36,79,26,-35,-13,-22,9,-34,12,-9,67,-17,-49,20,20,7,-21,-12,59,-29,-9,63,4,-23,24,-13,-34,7,-43,21,-1,11, 
  /* [7][0][][] */ 21,15,38,-35,-4,2,-4,-49,-12,-14,-15,3,-4,-81,25,0,5,-31,-8,2,0,-23,-36,-7,-19,0,-11,-19,-2,5,12,-4,-8,5,-14,-10,-3,-17,-25,9,5,-24,-22,33,0,18,6,65,-8,24,-18,-25,-17,-7,-18,-56,22,0,-9,-2,-11,6,-4,-10,-12,40,4,-32,-6,-18,4,51,-12,8,0,-6,24,4,-10,-21,-6,-40,32,-9,-29,127,13,4,-18,-29,-6,32,-44,5,-2,6, 
  /* [8][0][][] */ -52,20,-41,4,46,14,3,35,-8,85,-23,-7,-3,46,61,-18,9,31,-70,-4,16,43,-43,2,-33,-4,25,-3,19,-71,-3,15,31,-3,20,30,-8,41,-50,35,18,18,2,-127,-36,-1,41,-3,-41,20,-1,72,-111,54,29,-33,9,-10,-33,-23,-5,-33,-8,44,-29,38,44,-25,6,-7,34,94,-7,25,25,9,-14,-69,1,-31,-9,-12,24,19,-24,8,30,-53,-29,28,-30,-2,56,-25,-13,-7, 
  /* [9][0][][] */ 29,-65,-35,-31,23,48,3,48,12,-45,3,15,-53,-24,9,11,3,6,26,-13,-29,35,-42,-16,79,12,15,-28,-34,-58,-31,3,12,-1,50,36,-1,54,-34,76,28,13,-1,-104,18,-13,18,-114,-37,3,6,23,-41,24,4,9,-50,27,-6,26,23,26,44,49,7,127,46,51,17,-16,43,-23,-9,-4,-30,27,59,13,1,15,3,-13,21,-31,18,15,0,-9,-58,6,-14,31,22,18,17,-3, 
  /* [10][0][][] */ 36,70,-32,35,94,-112,-35,-30,19,61,40,-2,-18,21,10,-86,27,27,-28,43,-59,-34,-9,-28,-70,-6,-44,62,-4,20,10,30,-2,-29,38,-1,98,-22,-36,-36,-22,78,32,1,-53,-12,-31,0,-15,-7,-33,-15,9,-13,5,-8,-4,23,-40,5,10,16,-36,22,18,38,47,29,22,-2,43,33,-59,-6,-49,-5,-13,19,-22,16,50,4,-65,-46,64,-42,101,1,-9,10,-3,-5,76,48,-21,-127, 
  /* [11][0][][] */ 54,32,-17,20,1,19,55,5,-8,-16,-16,-26,-12,12,37,0,4,-4,-97,-8,1,23,-4,13,-55,-10,-8,-5,-10,21,-9,-6,9,-2,10,37,15,17,-7,28,-9,27,48,-111,22,-36,26,4,-127,16,24,-44,41,8,-11,6,-8,-10,0,7,10,-24,-24,26,-55,44,-16,12,26,-22,34,23,-44,-26,22,11,-4,-30,-42,12,18,-20,83,47,16,-7,-2,-20,-5,5,-16,-7,5,14,-22,15, 
  /* [12][0][][] */ -46,-11,24,-7,-30,31,34,29,127,-2,-22,-14,0,5,-30,-41,40,35,0,78,62,72,-16,-7,16,-5,26,-36,-118,7,24,-45,24,3,3,-26,16,4,51,24,-48,-30,4,4,-1,25,7,19,14,-1,-29,10,-17,3,23,-13,97,-10,37,8,23,-20,14,-7,-13,37,-38,8,6,14,0,-13,24,-1,-93,-9,40,6,7,-71,-19,-14,49,59,-6,-35,-25,-40,-4,21,7,61,-1,-22,15,16, 
  /* [13][0][][] */ 23,4,-7,16,25,-20,-4,-7,-13,8,11,7,16,-3,0,-15,20,-68,-26,18,-7,-22,8,2,-3,16,-16,0,-11,-34,-9,14,-8,17,1,24,23,-6,-1,7,-11,7,11,46,27,22,-16,-127,18,-2,-2,2,-7,-8,4,13,-10,21,20,18,7,24,-2,-2,10,-17,-22,-54,9,7,-18,-39,-9,31,-6,10,-25,-1,26,-1,23,-3,-21,11,9,36,5,18,8,3,11,-10,-9,14,-7,-11, 
  /* [14][0][][] */ -123,-49,17,27,27,-32,-50,13,-23,9,4,24,69,-8,-127,-2,68,-24,-16,33,0,-13,38,5,-120,14,6,-5,-34,-75,-29,-5,-37,12,4,-68,35,46,-14,24,10,34,-39,-22,25,119,37,41,-97,45,4,36,-56,6,3,3,9,24,74,68,32,64,13,21,-6,-15,-58,37,-13,74,-97,-107,-59,-5,0,55,-3,37,82,-3,40,34,-1,1,38,24,44,41,51,57,58,-20,-6,25,25,-24, 
  /* [15][0][][] */ 75,10,51,0,0,31,14,-24,-8,54,12,6,-56,-21,-3,5,18,4,29,-15,36,10,-64,38,-2,-2,32,7,4,38,-50,-68,-7,-33,34,-6,34,-32,-57,-127,-6,30,3,58,17,44,-32,-35,78,-29,-56,4,52,-120,51,-84,-10,-43,8,25,-103,-25,10,18,70,-16,-49,37,-7,65,-16,-9,43,2,6,-21,18,-49,57,-2,-23,17,33,51,-9,7,-1,-33,23,16,61,-14,-79,43,6,-12, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.017702272161841393, 0.013600110076367855, 0.011473704129457474, 0.0077823246829211712, 0.013185471296310425, 0.012136348523199558, 0.012795946560800076, 0.017973650246858597, 0.0093891434371471405, 0.0090579595416784286, 0.015404026955366135, 0.031172160059213638, 0.014240628108382225, 0.022912980988621712, 0.021024735644459724, 0.015735676512122154, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 8560, -10872, 2486, 64332, -1500, -3955, -8338, 749, -3250, 832, 3214, -2080, 305, -7861, 5588, -5871, -1033, 17168, 26235, 2540, 3014, -2116, 248, 1044, 15391, -1519, -984, -3721, -5979, -8827, 6781, -9225, -1254, -2207, -33, 21691, 1510, -4989, 19535, 964, -16, 2108, -9831, -7540, -8055, 63742, 289, 13772, 25113, -13355, 534, 8571, 6023, 75, -5296, 3077, -14131, 932, 2677, -5039, -1652, -984, -12911, -1363, 1274, 16684, 32312, 42183, -12425, 651, -8992, -1161, 55337, 8757, 252, 959, 19403, 32991, -697, -9669, -2124, -4954, 292, -3328, 131, -1314, 1004, -1388, 1793, -3132, -29, 633, 303, -363, 946, 52576, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00021153132547624409, 0.00010036503954324871, 0.00022076154709793627, 3.2990305044222623e-05, 0.00017496978398412466, 0.00014170538634061813, 0.00038481858791783452, 8.4599749243352562e-05, 0.0001384380302624777, 0.0005130413337610662, 0.00016274338122457266, 0.0003000646538566798, 8.9036380813922733e-05, 0.00037273336783982813, 0.00016569216677453369, 0.00014671847748104483, 0.00011051640467485413, 0.0002787521225400269, 5.8814028307097033e-05, 0.00021807849407196045, 4.8874942876864225e-05, 0.0001822744234232232, 0.00011295978765701875, 0.00041335751302540302, 0.00024484441382810473, 0.0002310614800080657, 0.00013915308227296919, 0.00019219663226976991, 0.00010373879922553897, 9.4900009571574628e-05, 0.00012142257764935493, 0.0001548699801787734, 0.0001124494374380447, 0.00011557243124116212, 0.00022508318943437189, 0.00011088648898294196, 0.00058463303139433265, 0.00010360298620071262, 4.1758234146982431e-05, 0.00016632139158900827, 0.00018407950119581074, 0.00032450008438900113, 0.00036114026443101466, 0.00016465746739413589, 0.00017219917208421975, 6.421080615837127e-05, 0.0001987992727663368, 0.00025718787219375372, 0.00010102408123202622, 0.00016842145123519003, 0.00016183141269721091, 0.00014558147813659161, 0.00028470298275351524, 0.00032772697159089148, 0.00033337820786982775, 0.00038972884067334235, 0.00026993334176950157, 0.00021447690960485488, 0.0001160901811090298, 8.6545383965130895e-05, 0.00026850434369407594, 0.00014268282393459231, 0.00025955805904231966, 0.00014585423923563212, 0.000201703718630597, 0.00017274807032663375, 8.953306678449735e-05, 4.4293276005191728e-05, 0.00034726582816801965, 0.00026375282322987914, 0.00023535297077614814, 0.00010598578228382394, 0.00010506912076380104, 0.00013787542411591858, 0.00016992287419270724, 0.00025787335471250117, 0.00051360426004976034, 4.7377718146890402e-05, 0.0002814653271343559, 0.00019830200471915305, 0.00017204796313308179, 0.00041883386438712478, 0.0001239774574059993, 0.00012498931027948856, 0.00014697852020617574, 0.00010874370491364971, 0.00013945046521257609, 0.0002050473412964493, 0.00022335414541885257, 0.00012629105185624212, 0.00022791272203903645, 0.00011158604320371523, 0.00014127182657830417, 0.00047525079571641982, 0.0012979587772861123, 7.3435665399301797e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -16,7,-21,107,-18,22,-62,-55,20,-8,98,-6,6,-7,-3,52,6,14,-33,2,76,-1,32,-34,2,16,41,46,21,14,25,48,-6,28,11,-13,5,49,-58,-27,21,9,28,20,-85,-50,25,-5,-11,-18,-7,-6,50,6,-9,1,-1,-33,30,-33,28,-2,127,28,-13,-10,5,-47,66,35,5,-6,78,-32,70,5,15,-127,28,62,2,15,127,-13,36,28,-25,-17,36,-3,-14,83,2,20,-2,13, -46,14,-8,13,53,-11,-9,-127,40,10,-127,-2,-16,-11,6,88,18,-32,-9,-15,78,-95,127,26,-61,-31,-105,-16,28,39,-49,18,122,12,-12,0,-24,127,-59,-127,10,-19,-29,17,47,-127,127,-44,-77,53,49,8,40,-63,30,56,41,43,-101,83,127,33,5,-19,43,-37,-97,4,36,-30,-11,47,-50,-49,105,-3,-32,-60,-34,62,-64,60,-16,8,-12,43,59,-38,-26,56,-13,72,-127,-30,24,-127, 1,-3,-22,-70,7,19,35,20,0,-1,3,65,3,-12,-10,1,-12,15,-14,17,9,23,22,-32,0,-31,9,13,-7,4,47,-77,46,17,9,-21,12,6,-29,-23,8,2,-18,11,22,-27,20,1,6,-7,5,-5,5,8,-4,8,-6,47,7,-4,13,-17,6,-16,-26,-17,21,-44,-107,-8,50,-18,-127,-24,-13,18,10,-13,7,11,-13,26,-41,-5,-40,20,27,39,-24,-13,23,-10,18,7,-2,-48, 
  /* [0][1][][] */ -40,58,-17,40,-87,-16,-12,-42,26,97,-45,-21,-31,-25,-6,63,127,-24,-92,-14,59,-127,-31,16,-36,-45,-127,-6,37,38,-51,26,-124,-75,-55,5,64,-2,-58,46,-20,85,3,-2,35,-45,-12,-32,127,45,-4,18,44,9,-37,-19,30,11,-126,127,-37,-87,21,127,-59,-36,-83,126,-37,127,-20,62,-35,-57,36,7,-37,-70,127,48,127,34,9,2,127,26,-99,49,-38,-35,-101,40,99,104,29,-61, 127,127,127,127,-45,-127,127,27,127,-127,17,-127,-110,127,127,127,-15,-127,-64,-127,127,26,-70,127,127,127,-55,-127,127,127,-127,127,-7,-127,-122,127,-127,-45,100,108,-127,-127,127,127,127,-119,-108,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-42,41,-108,-26,-67,-66,127,127,-71,127,127,-106,-126,127,-45,127,-127,-127,-127,126,-77,127,-39,127,85,127,-37,-127,-25,-105,-127,-127,-21,-127,-21,-127,-127,123, -24,66,-37,4,127,71,-23,51,7,26,-15,-6,-26,-31,-13,-4,-102,-21,-127,39,34,78,-16,-116,-35,-41,123,72,11,35,75,8,127,-47,127,-2,56,6,-103,11,35,23,-24,4,-24,-52,-13,-42,81,15,-11,38,-4,-3,-75,-15,27,22,127,-88,1,127,3,-35,-109,-29,-79,104,14,-17,127,28,-18,-58,11,46,-29,-6,-41,-3,-45,13,47,24,-88,31,127,-45,32,-22,127,-11,-115,36,34,18, 
  /* [0][2][][] */ -5,-38,-21,-58,-5,15,38,32,0,10,-22,53,26,-35,-6,10,41,1,14,21,-9,26,-20,-25,1,-24,10,4,-9,-4,50,-74,-39,68,-29,-27,32,-34,-64,18,8,10,-32,18,14,-76,-12,-2,-9,6,18,-7,8,-1,-22,5,-1,45,-54,35,-4,-9,6,17,-6,-11,23,-51,-56,9,-22,-7,-118,-36,-1,15,14,-10,57,18,20,23,-41,19,14,24,-21,12,7,24,22,-6,18,41,-6,-31, -29,-8,-27,24,-44,76,-26,67,5,-5,52,-12,127,-7,-17,-13,-3,-41,-64,21,-25,77,-46,-110,-48,-46,101,71,14,45,56,-1,-122,63,-15,-25,-27,-27,-127,-4,44,-14,-14,34,-27,-45,-19,-49,-59,27,70,25,-9,-83,32,50,20,26,72,-57,21,-54,-7,1,17,-27,-127,-53,-7,-29,-65,29,36,-49,-30,-10,-47,23,-56,2,47,36,22,13,5,58,-96,127,16,125,-31,-19,111,-22,47,85, -12,-32,-26,31,13,65,-47,13,4,-3,-1,12,14,-51,-9,-10,-43,-7,19,20,-28,4,-24,3,-6,19,3,50,-1,-1,36,29,21,42,19,-25,-4,-25,-40,4,10,-12,20,6,-74,-32,-15,3,0,-15,-1,-3,-5,7,-17,-8,-1,-47,12,-29,-21,50,11,-28,-12,-3,28,-49,47,4,57,-18,30,-58,-20,20,10,12,-3,22,-32,32,89,-12,-16,51,39,-6,110,11,0,-20,7,-22,-6,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0089900810271501541, 0.0042655142024159431, 0.0093823652714490891, 0.0014020879752933979, 0.0074362154118716717, 0.0060224789194762707, 0.016354789957404137, 0.0035954893101006746, 0.005883615929633379, 0.021804256364703178, 0.0069165932945907116, 0.012752747163176537, 0.0037840460427105427, 0.015841167420148849, 0.0070419167168438435, 0.0062355352565646172, 0.004696947056800127, 0.011846965178847313, 0.0024995962157845497, 0.0092683359980583191, 0.002077185083180666, 0.0077466629445552826, 0.0048007909208536148, 0.017567694187164307, 0.010405886918306351, 0.0098201129585504532, 0.0059140059165656567, 0.0081683564931154251, 0.004408898763358593, 0.004033250268548727, 0.0051604593172669411, 0.0065819742158055305, 0.0047791008837521076, 0.0049118283204734325, 0.009566035121679306, 0.0047126756981015205, 0.02484690397977829, 0.0044031268917024136, 0.0017747249221429229, 0.0070686587132513523, 0.0078233787789940834, 0.013791253790259361, 0.015348461456596851, 0.0069979424588382244, 0.0073184645734727383, 0.0027289590798318386, 0.0084489686414599419, 0.010930484160780907, 0.0042935232631862164, 0.0071579115465283394, 0.0068778349086642265, 0.0061872126534581184, 0.012099876999855042, 0.013928396627306938, 0.014168573543429375, 0.016563475131988525, 0.011472166515886784, 0.0091152684763073921, 0.0049338326789438725, 0.0036781786475330591, 0.011411434039473534, 0.0060640196315944195, 0.011031217873096466, 0.0061988048255443573, 0.0085724079981446266, 0.0073417928069829941, 0.0038051554001867771, 0.0018824641592800617, 0.014758797362446785, 0.011209494434297085, 0.010002501308917999, 0.0045043956488370895, 0.0044654374942183495, 0.0058597051538527012, 0.0072217220440506935, 0.010959617793560028, 0.021828180178999901, 0.0020135529339313507, 0.011962275952100754, 0.0084278350695967674, 0.0073120384477078915, 0.017800439149141312, 0.0052690417505800724, 0.0053120455704629421, 0.0062465867958962917, 0.0046216072514653206, 0.0059266448952257633, 0.0087145119905471802, 0.0094925509765744209, 0.0053673693910241127, 0.0096862902864813805, 0.0047424067743122578, 0.0060040522366762161, 0.020198158919811249, 0.055163245648145676, 0.0031210158485919237, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 17414, 2000, 4916, -791, 4439, 4766, 12661, 6299, -1083, 15716, 6397, 1826, 6188, 29234, -204, -2133, 6504, 7904, 1846, -132, -610, 12219, 3964, 3698, 9821, 5656, 4274, 4201, 115, 11, 5871, 9743, 11760, 2280, 7454, -340, 14521, 9336, 561, 5411, 691, 11957, 12680, 4704, 5438, 10854, 16216, 10291, 5806, 3778, 259, -636, 12769, 7177, 8341, 14462, -190, 7449, 2767, 3575, 9809, 5006, 2728, 6791, 6840, 5308, 6007, -709, 17061, 8779, 8256, -1513, -1201, 3375, 1715, 2808, 22059, 11695, 15038, -2976, 5972, -6965, -2383, 640, 8058, 5009, 4699, 7341, 16945, 4705, 8436, 2898, 12988, 17429, -7996, 10507, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00015151927073020488, 0.00016447414236608893, 0.00025890619144774973, 0.00068248348543420434, 0.00035827010287903249, 0.00020035945635754615, 0.00024703380768187344, 0.00056150677846744657, 0.00041116628563031554, 0.00011485308641567826, 0.00022973564045969397, 0.00044633389916270971, 0.0004545203410089016, 0.00016475291340611875, 0.00033847911981865764, 0.00031753131770528853, 0.00033089728094637394, 0.00029193947557359934, 0.00022008274390827864, 0.00065970426658168435, 0.00054112792713567615, 0.00020324884098954499, 0.00036832044133916497, 0.00021009273768868297, 0.00017638225108385086, 0.00036863581044599414, 0.0003350787446834147, 0.00022087222896516323, 0.00068646692670881748, 0.00042402942199259996, 0.00024554756237193942, 0.00019374597468413413, 0.00017115019727498293, 0.00047110393643379211, 0.00022032984998077154, 0.00065757700940594077, 0.00015728453581687063, 0.00028281947015784681, 0.00073506758781149983, 0.00016296264948323369, 0.00071633135667070746, 0.00015838854596950114, 0.00016990114818327129, 0.00014956512313801795, 0.00021198164904490113, 0.00029501249082386494, 0.00017507406300865114, 0.0001443691726308316, 0.00027919883723370731, 0.00024616761947982013, 0.00043679255759343505, 0.0010181742254644632, 0.00020807419787161052, 0.00022458776948042214, 0.00028059404576197267, 0.00013133228640072048, 0.00046851160004734993, 0.00023126408632379025, 0.00028301661950536072, 0.0004574131453409791, 0.00017159829440061003, 0.00026411068392917514, 0.00037961045745760202, 0.00040513323619961739, 0.00015125861682463437, 0.00022313160297926515, 0.00033929559867829084, 0.00050374731654301286, 0.00015796857769601047, 0.00012693169992417097, 0.00023135633091442287, 0.00034984559169970453, 0.00029357915627770126, 0.00038592348573729396, 0.00026403967058286071, 0.00045697583118453622, 0.00010776056296890602, 0.00037987751420587301, 0.0001084170799003914, 0.00041576183866709471, 0.00018389549222774804, 0.00030418302048929036, 0.00017938070232048631, 0.00043591653229668736, 0.00019713556685019284, 0.00030779873486608267, 0.00034052971750497818, 0.0001848296815296635, 0.00010116831253981218, 0.00033915793756023049, 0.00016258649702649564, 0.00058340298710390925, 0.00016235030489042401, 0.00015883971354924142, 0.00036704528611153364, 0.00031242929981090128, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 24,-33,72,127,52,-16,18,-23,85,4,-57,-48,63,30,-15,-74, 
  /* [1][0][][] */ 35,101,10,19,92,-9,36,22,70,107,-40,127,18,-26,105,-109, 
  /* [2][0][][] */ 24,-24,-35,10,-20,55,-37,30,-38,-53,14,40,16,-127,16,-95, 
  /* [3][0][][] */ 123,126,0,20,-127,-19,-58,-36,-2,20,87,-107,-60,100,-19,-33, 
  /* [4][0][][] */ 9,-17,24,13,-30,19,-16,38,-59,-26,-14,-5,9,-127,22,2, 
  /* [5][0][][] */ 127,-38,-28,-11,-3,-92,7,12,-7,23,-115,-9,46,-36,-8,29, 
  /* [6][0][][] */ -77,-42,-7,70,-77,-30,-40,40,-127,-38,-91,-26,36,58,0,68, 
  /* [7][0][][] */ -3,27,-69,44,29,-127,-24,47,-5,-52,11,-14,-6,23,-41,28, 
  /* [8][0][][] */ 26,-42,0,-3,7,24,-63,-55,-10,4,-58,5,-127,10,10,11, 
  /* [9][0][][] */ 38,-89,37,100,24,4,5,-57,127,-81,51,-43,-7,65,-75,43, 
  /* [10][0][][] */ -127,-78,60,-70,77,9,17,45,72,-119,-54,-22,39,-58,-102,82, 
  /* [11][0][][] */ 37,-9,-127,25,31,17,-41,32,-23,-41,-14,-9,-3,31,-38,15, 
  /* [12][0][][] */ 95,-63,39,-35,-14,-91,-44,-42,-5,-5,-127,-45,-58,-3,1,99, 
  /* [13][0][][] */ 30,-59,10,-57,106,38,-55,-127,49,-31,43,5,28,-28,42,14, 
  /* [14][0][][] */ -48,19,-58,-50,51,-127,52,-51,27,27,4,-98,33,124,21,34, 
  /* [15][0][][] */ 47,-2,100,61,52,-61,-67,-6,21,-100,-106,29,-127,-90,-38,51, 
  /* [16][0][][] */ -119,54,-26,-4,62,105,90,75,-27,20,127,-13,13,-44,3,-33, 
  /* [17][0][][] */ -20,-10,-32,-25,-40,3,34,55,-21,127,-19,-12,1,62,64,4, 
  /* [18][0][][] */ 4,127,0,-8,3,-15,73,-73,44,74,-65,66,13,-17,35,-89, 
  /* [19][0][][] */ 2,-15,30,5,-5,33,-17,20,0,-5,-27,-14,-127,13,-4,29, 
  /* [20][0][][] */ 64,-56,6,-76,-7,33,16,-95,-58,30,-127,-36,30,-8,55,-20, 
  /* [21][0][][] */ 62,17,127,49,-43,66,-8,-27,-17,22,-22,-26,-51,94,-14,-1, 
  /* [22][0][][] */ 27,22,19,-1,-27,5,32,127,35,-8,15,43,10,19,76,13, 
  /* [23][0][][] */ -4,24,-94,17,7,-127,1,51,-3,-22,-21,-3,-78,8,-17,23, 
  /* [24][0][][] */ 37,-42,15,-70,21,-31,-48,-10,13,38,69,75,-34,85,127,43, 
  /* [25][0][][] */ -127,-92,-26,5,18,14,2,-58,-59,5,-53,-3,28,28,42,41, 
  /* [26][0][][] */ 13,0,12,19,4,36,-29,51,-58,-35,-16,6,22,-127,12,-23, 
  /* [27][0][][] */ -108,24,-8,19,13,-16,-7,19,16,-44,127,4,-25,1,-16,-21, 
  /* [28][0][][] */ -7,-10,18,37,2,5,3,84,16,11,-39,-4,-127,-8,-20,33, 
  /* [29][0][][] */ -20,46,37,-34,27,-17,17,-23,-127,30,-24,4,-4,25,-77,8, 
  /* [30][0][][] */ -2,-6,-127,-36,24,-59,8,25,-12,-18,-22,-22,-47,-33,28,6, 
  /* [31][0][][] */ 127,-43,-74,11,39,-34,-70,59,-13,-34,-81,-42,2,14,-73,31, 
  /* [32][0][][] */ -98,34,46,43,-8,81,37,53,29,17,127,16,-27,36,22,-13, 
  /* [33][0][][] */ 23,-21,127,-26,-69,6,6,-35,-9,3,-25,17,-10,23,43,12, 
  /* [34][0][][] */ -52,-23,-98,-127,56,58,-6,-46,-34,-58,-27,-106,-6,-4,6,47, 
  /* [35][0][][] */ -4,-33,52,39,47,-16,-13,-16,-122,14,-7,15,-23,127,-45,-36, 
  /* [36][0][][] */ -101,34,-15,-3,-1,22,29,101,5,29,127,-21,-9,63,8,-19, 
  /* [37][0][][] */ -21,26,127,-21,-97,-56,39,-25,29,26,-8,11,15,-74,94,6, 
  /* [38][0][][] */ 13,-18,-28,22,40,-44,-64,-5,-18,-13,75,-26,127,16,2,21, 
  /* [39][0][][] */ -29,-22,1,-52,1,-96,43,90,-7,-76,-20,-61,22,127,32,112, 
  /* [40][0][][] */ 55,-1,-18,-5,-29,76,-26,10,-8,-27,12,-8,127,21,-51,-20, 
  /* [41][0][][] */ -2,-22,-50,-127,56,-10,-50,-87,3,-55,27,-52,2,-7,1,22, 
  /* [42][0][][] */ 35,33,21,103,-82,-20,-84,-2,-59,-69,31,-72,-6,127,-27,5, 
  /* [43][0][][] */ -7,127,-64,101,39,50,0,-65,-56,81,-1,21,-3,-71,36,44, 
  /* [44][0][][] */ 16,-23,-127,36,72,96,-52,112,6,-34,39,-4,5,-19,-86,-7, 
  /* [45][0][][] */ 39,11,-43,-127,-2,24,79,0,7,56,-52,11,15,-105,37,-43, 
  /* [46][0][][] */ 2,10,67,-29,22,8,-64,41,5,-59,-12,14,-16,127,46,14, 
  /* [47][0][][] */ 11,-40,63,-60,-70,1,-82,79,-27,-76,42,15,2,-127,67,26, 
  /* [48][0][][] */ 2,-9,13,-127,-17,-10,-22,1,28,-34,6,-8,16,44,5,58, 
  /* [49][0][][] */ 44,-41,5,127,110,16,0,49,-61,11,53,36,-8,41,125,-10, 
  /* [50][0][][] */ -9,-17,82,-7,14,127,-13,-66,33,-7,78,69,89,-13,-4,-46, 
  /* [51][0][][] */ 18,53,17,10,8,-2,-34,39,35,5,-6,127,13,21,37,-61, 
  /* [52][0][][] */ -12,87,67,8,-16,-30,22,-42,-46,-5,-21,26,-15,91,-127,6, 
  /* [53][0][][] */ -4,-13,-28,-127,-46,-14,21,-13,-34,0,34,-12,16,-1,35,39, 
  /* [54][0][][] */ 2,47,-31,-79,-2,20,-9,36,69,-38,-11,-45,-3,127,10,15, 
  /* [55][0][][] */ -20,-8,-36,-39,16,-22,-44,-127,12,-90,-8,25,-25,-66,13,-9, 
  /* [56][0][][] */ 32,56,35,60,10,-18,11,127,25,-30,1,-43,76,-20,-56,25, 
  /* [57][0][][] */ 97,20,127,-22,-108,-45,0,-21,9,9,-104,11,21,-25,71,5, 
  /* [58][0][][] */ 58,81,4,127,-120,-52,-22,34,-36,15,120,-20,-51,-37,-11,-72, 
  /* [59][0][][] */ 127,-30,-30,-16,-10,-10,1,3,-36,5,-118,-27,-6,-30,0,55, 
  /* [60][0][][] */ -127,61,-13,30,6,10,43,30,-4,33,105,19,-6,-13,27,-28, 
  /* [61][0][][] */ -83,127,0,17,-23,-47,-103,-31,117,-83,85,-41,44,-64,-97,-97, 
  /* [62][0][][] */ -5,-21,-127,36,36,67,7,81,-16,-22,15,4,-43,-31,-120,22, 
  /* [63][0][][] */ -34,17,127,-35,-34,-48,56,-26,15,26,-24,19,0,-73,42,10, 
  /* [64][0][][] */ 35,29,-1,70,61,10,83,-84,19,127,-4,21,12,-71,7,-7, 
  /* [65][0][][] */ -15,25,31,-29,47,-9,-32,-127,-41,-105,-32,-65,-17,-25,69,45, 
  /* [66][0][][] */ -127,-16,-16,15,-31,27,21,-37,-63,-15,-75,43,72,11,51,63, 
  /* [67][0][][] */ -21,-89,50,127,-46,-42,-18,76,42,25,29,-23,-35,-21,-101,-45, 
  /* [68][0][][] */ -13,2,24,127,-67,-50,10,-22,-74,12,-20,-59,-41,-81,-17,-23, 
  /* [69][0][][] */ 70,46,-22,127,63,2,58,-98,19,111,26,82,-7,-11,45,-8, 
  /* [70][0][][] */ -42,-77,-58,-67,74,25,56,11,81,-4,67,-37,32,87,33,127, 
  /* [71][0][][] */ 14,35,0,112,81,-127,-45,117,42,-123,11,22,22,-69,-96,25, 
  /* [72][0][][] */ -127,-51,-21,35,6,30,-41,1,-56,-36,-74,12,28,13,-8,93, 
  /* [73][0][][] */ -17,-12,10,63,26,-23,22,-39,75,34,-12,6,0,127,-71,-50, 
  /* [74][0][][] */ 55,-48,44,-10,-63,2,31,-9,-27,-16,-115,9,-127,25,39,60, 
  /* [75][0][][] */ -36,-4,-29,127,-72,-24,-12,-7,-82,-2,-3,-27,-8,-33,-8,-34, 
  /* [76][0][][] */ -7,-18,-7,31,36,13,-11,-127,8,-112,13,20,-20,-22,57,-43, 
  /* [77][0][][] */ 127,-53,47,23,3,1,-55,-24,79,-1,-13,60,39,22,-25,35, 
  /* [78][0][][] */ -34,-27,11,-39,81,32,-99,31,88,-41,-93,-38,13,127,69,-14, 
  /* [79][0][][] */ 14,20,43,21,47,67,-56,-69,16,-48,65,-24,127,-31,-36,-50, 
  /* [80][0][][] */ -127,-82,-73,91,-2,8,20,-14,-108,60,-96,-19,35,-80,14,43, 
  /* [81][0][][] */ 67,14,-91,31,124,81,-25,-17,-15,-53,-30,-127,-17,-26,-118,25, 
  /* [82][0][][] */ 124,124,-11,76,-114,-4,-52,-39,-57,22,127,-37,-48,108,2,-69, 
  /* [83][0][][] */ 127,29,17,-25,10,-12,0,19,50,18,85,-34,-43,-18,-10,-77, 
  /* [84][0][][] */ 30,-72,-94,-18,109,34,-11,-127,-17,-53,4,-11,-21,-33,-6,-22, 
  /* [85][0][][] */ -63,-7,-29,-67,-58,-25,71,98,-15,99,-27,-85,10,124,127,-30, 
  /* [86][0][][] */ 98,-62,2,-8,-20,-36,-18,-12,-24,-21,-127,-8,22,23,-27,61, 
  /* [87][0][][] */ -38,21,65,-91,-52,64,-61,48,-27,-62,45,-26,-8,-127,22,36, 
  /* [88][0][][] */ -1,-56,-83,-99,65,-71,-127,-120,-36,-70,12,-66,-67,11,39,-7, 
  /* [89][0][][] */ 9,-5,36,-127,12,-25,-26,88,44,-32,49,3,-19,37,45,51, 
  /* [90][0][][] */ -14,31,-52,66,-19,-60,79,-56,44,127,-48,41,27,53,21,-2, 
  /* [91][0][][] */ 46,-31,-61,-7,-3,-127,-12,9,-13,-4,-52,3,40,-10,11,23, 
  /* [92][0][][] */ -17,27,127,74,56,24,-68,4,-54,6,-77,36,3,127,-17,37, 
  /* [93][0][][] */ 127,-20,-25,-20,-34,-43,-5,41,-17,19,-99,-31,-3,47,-7,47, 
  /* [94][0][][] */ -1,-19,52,85,121,-29,-9,46,9,-24,8,38,2,127,-38,-83, 
  /* [95][0][][] */ -116,22,32,49,13,40,33,6,4,-3,127,-25,-35,33,-21,-25, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0004849011602345854, 0.00052636011969298124, 0.00082856731023639441, 0.0021841251291334629, 0.0011465577408671379, 0.00064120249589905143, 0.00079057255061343312, 0.0017969680484384298, 0.0013158392393961549, 0.00036755981273017824, 0.00073521392187103629, 0.0014283847995102406, 0.0014545836020261049, 0.00052725226851180196, 0.0010832214029505849, 0.0010161829413846135, 0.001058957539498806, 0.00093428243417292833, 0.00070432212669402361, 0.0021112256217747927, 0.0017317503225058317, 0.00065044924849644303, 0.0011787214316427708, 0.00067235151072964072, 0.00056446919916197658, 0.0011797306360676885, 0.0010723393643274903, 0.00070684868842363358, 0.0021968730725347996, 0.0013570046285167336, 0.00078581616980955005, 0.00062003760831430554, 0.00054772524163126945, 0.0015076553681865335, 0.00070511293597519398, 0.0021044178865849972, 0.00050335150444880128, 0.00090509600704535842, 0.0023524079006165266, 0.00052152294665575027, 0.0022924470249563456, 0.00050688465125858784, 0.00054372794693335891, 0.00047864738735370338, 0.00067839655093848705, 0.00094411690952256322, 0.00056028261315077543, 0.00046201900113373995, 0.00089350907364860177, 0.00078780052717775106, 0.0013978499919176102, 0.0032584227155894041, 0.00066589168272912502, 0.00071873940760269761, 0.00089797406690195203, 0.00042029752512462437, 0.0014993592631071806, 0.00074010534444823861, 0.00090572691988199949, 0.0014638412976637483, 0.00054915924556553364, 0.00084522302495315671, 0.0012148524401709437, 0.0012965319911018014, 0.00048406701534986496, 0.00071407930226996541, 0.0010858343448489904, 0.0016121226362884045, 0.00050554063636809587, 0.00040621453081257641, 0.00074040057370439172, 0.0011195971164852381, 0.00093952979659661651, 0.0012350557371973991, 0.00084499572403728962, 0.0014624417526647449, 0.00034486188087612391, 0.0012157070450484753, 0.00034696291550062597, 0.0013305462198331952, 0.00058851350331678987, 0.00097346492111682892, 0.00057406502310186625, 0.0013950464781373739, 0.00063088518800213933, 0.00098503613844513893, 0.001089783851057291, 0.00059150316519662738, 0.00032376497983932495, 0.0010853938292711973, 0.00052031915402039886, 0.0018670415738597512, 0.00051956326933577657, 0.0005083284922875464, 0.0011746406089514494, 0.0009998552268370986, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -36027, 5354, 6088, -10132, -3175, -6437, -10339, -43944, 704, 22803, 33687, -11639, -3703, -19563, 45806, -33948, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.0006608398980461061, 0.00079911394277587533, 0.0011599307181313634, 0.00089948828099295497, 0.00078861537622287869, 0.00086857716087251902, 0.0010488934349268675, 0.00045468835742212832, 0.00053372199181467295, 0.0006262616952881217, 0.00075615040259435773, 0.00073629297548905015, 0.00096126797143369913, 0.0013181290123611689, 0.00053915131138637662, 0.00061739154625684023, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -18,-9,-31,7,27,2,3,111,-49,18,35,-7,23,-14,-14,17,16,-17,-8,-11,69,-14,20,126,-10,91,-8,-12,28,-25,24,-29,-23,55,20,-58,14,40,16,-10,-110,-25,13,44,27,22,-127,-55, 
  /* [1][0][][] */ -40,-15,20,17,-31,10,-10,59,-51,-42,6,-46,-23,-27,6,2,-27,114,-13,12,0,15,-30,-13,29,-45,17,13,-25,-87,-35,12,-21,-8,35,-3,-3,-43,1,17,-12,-29,127,18,9,2,18,-8, 
  /* [2][0][][] */ -20,-9,-8,-33,-2,-68,5,-25,3,7,13,30,17,11,-22,11,-2,-21,-24,-10,-5,-4,-5,-127,-12,70,-14,-1,3,-21,-6,2,-15,54,11,0,20,13,22,-12,-37,1,-21,-2,0,-7,16,7, 
  /* [3][0][][] */ -4,35,11,-27,-3,-3,0,-6,-17,-6,-2,37,-127,4,-3,-2,5,4,-12,2,-28,12,5,20,-7,-12,3,20,-3,19,2,10,6,1,21,19,-8,27,39,7,13,10,27,-28,6,-7,5,19, 
  /* [4][0][][] */ 33,-30,1,14,25,26,23,-20,-33,6,-16,-18,2,6,2,20,23,-7,-79,-6,-8,13,11,79,5,-29,7,43,9,-72,19,3,18,-39,35,-127,17,34,-3,18,-12,27,11,-21,-17,-16,10,10, 
  /* [5][0][][] */ 35,6,-21,55,-7,-4,5,25,-2,-1,39,8,2,51,9,-1,-20,21,23,-2,9,4,2,-23,-2,-50,6,-17,2,-5,3,6,69,-127,4,26,-19,-8,14,8,-85,54,25,-4,-1,-4,-105,-1, 
  /* [6][0][][] */ 30,0,-1,2,-12,2,-3,-16,-6,1,2,5,-23,6,7,5,1,-13,127,9,7,10,11,-41,7,3,30,-9,-12,-3,-8,5,-1,-13,31,-38,-6,-40,75,7,-4,-6,-4,4,-2,4,4,-8, 
  /* [7][0][][] */ -49,-24,-14,35,-10,89,-10,50,-8,39,-9,127,92,-2,-17,12,-1,-26,-15,-15,-48,-10,-19,70,-6,-39,-60,-34,-10,-24,-28,-19,-6,-1,-32,13,14,-68,113,-12,27,26,-87,-65,21,-2,1,1, 
  /* [8][0][][] */ -43,-42,-1,-2,4,7,-3,35,-8,-60,4,35,51,16,8,11,-15,58,-22,4,-37,13,-6,-14,-5,8,4,50,-18,104,-14,27,-5,5,-22,-127,-106,63,34,25,12,1,97,-28,8,31,16,34, 
  /* [9][0][][] */ -31,14,-4,24,17,-24,-4,5,54,-49,19,65,-63,17,23,2,-2,23,-38,-14,54,5,-14,-27,-3,13,52,-18,12,18,13,-10,-7,27,75,-112,-15,-127,-89,12,-38,24,67,1,14,0,-18,-41, 
  /* [10][0][][] */ -19,-15,-32,-127,48,83,16,-18,7,50,24,19,57,-53,-38,19,42,-35,70,-28,47,-17,51,61,-53,-110,-3,-27,54,33,55,-49,-34,-68,17,4,16,-49,3,-39,-35,-76,-14,9,9,22,20,-44, 
  /* [11][0][][] */ -1,51,5,59,34,-55,-69,-10,1,71,-13,0,-6,71,2,-70,29,44,13,-11,-50,-99,26,-8,19,-31,16,-11,46,-43,27,-93,30,-7,-42,-94,84,21,20,-127,-11,54,91,-80,-14,-41,39,32, 
  /* [12][0][][] */ 124,5,-21,15,1,31,18,101,21,-23,-54,-29,-3,13,-10,-4,-5,-1,4,0,2,6,6,15,7,8,3,0,-8,20,-1,-1,19,-74,-2,-4,-25,-10,-23,5,-16,-71,9,-127,-50,-6,85,-1, 
  /* [13][0][][] */ 13,2,1,5,9,-12,-1,-4,1,5,7,22,-4,5,7,0,7,6,11,1,12,-11,8,-5,4,1,17,127,12,-5,10,-4,2,1,-42,26,8,-3,1,-14,-16,-6,4,7,1,-1,-8,-12, 
  /* [14][0][][] */ 61,-23,37,-71,56,24,49,-103,-54,-61,3,114,-64,-11,60,9,49,27,-52,60,16,3,65,-22,28,53,-32,-115,28,-39,69,70,-5,69,-127,-49,-46,45,86,-2,-39,1,54,2,7,4,23,-28, 
  /* [15][0][][] */ 1,-54,-69,-30,59,21,63,-56,-5,19,-16,-20,83,25,-90,51,43,56,70,-76,-81,-31,54,-12,-86,44,23,50,48,42,52,-29,29,45,81,127,-22,-102,-27,-33,85,53,101,-40,-13,-24,-16,50, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.028085695579648018, 0.033962342888116837, 0.04929705336689949, 0.038228251039981842, 0.033516153693199158, 0.036914527416229248, 0.04457797110080719, 0.019324254244565964, 0.022683184593915939, 0.02661612257361412, 0.032136391848325729, 0.031292449682950974, 0.040853887796401978, 0.056020483374595642, 0.02291392907500267, 0.026239139959216118, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 2744, 42699, -1573, 56543, 3778, 125831, -1768, 43444, 3130, 35037, 22615, 1374, 3234, 31053, -1481, -1498, -931, 465, 1255, -2208, 277, -5107, 1825, -18807, -4696, 44015, 126083, 101764, 2639, 9744, -1461, 353, 25426, -49, 47503, 155, 70307, 4038, 45719, 3737, 1411, 55886, -928, 3135, 47822, -581, 1210, 48729, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.8961980761960149e-05, 3.093596751568839e-05, 0.00014299542817752808, 4.236439781379886e-05, 0.00017781934002414346, 6.9729212555103004e-05, 0.0001974610349861905, 0.00013706530444324017, 7.2944108978845179e-05, 4.3181324144825339e-05, 4.5589262299472466e-05, 9.2046262579970062e-05, 3.7946610973449424e-05, 3.5283363104099408e-05, 0.00015209405682981014, 0.00020780535123776644, 0.00017277365259360522, 6.5260101109743118e-05, 0.00012464940664358437, 0.00010384523920947686, 8.3821076259482652e-05, 0.00017805307288654149, 0.00011133579391753301, 0.00012742890976369381, 9.7225783974863589e-05, 0.0001017417962430045, 1.9431437976891175e-05, 6.9570975028909743e-05, 0.00013273463991936296, 7.6740187068935484e-05, 0.00010926185495918617, 0.00014650743105448782, 4.5806944399373606e-05, 0.00011656790593406186, 2.6577243261272088e-05, 5.0683192966971546e-05, 8.3092221757397056e-05, 7.772864046273753e-05, 0.00012763337872456759, 9.9816679721698165e-05, 0.00010006820230046287, 0.00010387594375060871, 9.2381087597459555e-05, 8.6241278040688485e-05, 2.7509313440532424e-05, 0.00014495076902676374, 9.7831987659446895e-05, 2.7858368412125856e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 73,-95,100,67,54,-33,103,-64,63,-89,-78,48,51,-43,-73,-92,99,79,51,77,64,-71,-81,50,-34,-42,-63,-67,-67,60,-64,-113,-12,40,71,65,-66,53,-52,-24,52,-76,61,63,-91,11,77,-32, 83,-98,127,84,-78,-69,-57,-84,98,-104,-63,75,79,-111,-96,90,-40,93,81,127,83,-111,51,70,-53,-82,-67,-82,56,79,-32,-127,-88,81,82,87,-82,82,-86,-18,76,-97,85,89,-72,-127,94,-104, 36,-47,72,34,18,-42,-49,-40,42,-32,6,34,30,-83,-55,-3,-53,32,35,70,35,-52,30,25,-30,-47,-46,-25,31,30,89,-89,-88,46,36,37,-30,39,-40,-11,40,-42,36,44,-5,-8,38,-74, 
  /* [0][1][][] */ 95,-119,-40,93,55,-82,127,-90,87,-113,-70,83,85,-109,-12,-127,127,109,74,-38,85,107,-127,72,73,-78,-92,-101,-127,86,-70,-8,-88,71,107,97,-84,80,-82,89,83,-103,86,90,-87,108,93,-94, 127,-127,-65,127,-127,-127,-90,-127,127,-127,-127,127,127,-127,-21,100,-65,127,127,-52,127,127,66,127,127,-127,-127,-127,53,127,-30,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 61,-80,-34,66,39,-64,-49,-62,57,-43,-58,58,49,-54,-14,14,-64,48,58,-29,57,66,49,63,63,-69,-64,-46,37,53,127,16,-63,71,48,51,-49,60,-60,56,61,-60,54,62,-61,-67,60,-55, 
  /* [0][2][][] */ 45,-56,-45,51,28,-54,65,-43,41,-69,-4,41,59,-73,84,-78,73,51,34,-30,27,-8,-76,29,-24,-45,-50,-49,-75,31,-43,92,-73,36,52,46,-27,38,-43,-90,48,-52,38,46,-23,15,40,-77, 72,-81,-48,81,-57,-65,-70,-69,54,-76,-66,62,76,-49,127,34,-48,60,63,-42,54,-15,41,66,-48,-67,-82,-61,32,62,-25,121,-55,64,60,62,-50,61,-67,-108,68,-68,58,64,-84,50,62,-55, 40,-43,-29,46,30,-20,-16,-35,16,-25,-52,28,32,5,68,27,-37,22,28,-32,30,2,39,41,-28,-28,-53,-25,35,36,64,70,-2,33,17,25,-24,28,-29,-60,29,-35,25,30,-62,8,32,-3, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0033558839932084084, 0.0013147785793989897, 0.0060773054137825966, 0.0018004868179559708, 0.0075573218055069447, 0.0029634914826601744, 0.0083920937031507492, 0.0058252755552530289, 0.003100124653428793, 0.0018352061742916703, 0.0019375436240807176, 0.0039119659923017025, 0.0016127309063449502, 0.0014995429664850235, 0.0064639975316822529, 0.0088317273184657097, 0.0073428801260888577, 0.0027735542971640825, 0.0052975998260080814, 0.0044134226627647877, 0.0035623956937342882, 0.0075672557577490807, 0.004731771070510149, 0.0054157283157110214, 0.0041320957243442535, 0.0043240264058113098, 0.00082583609037101269, 0.002956766402348876, 0.0056412220001220703, 0.003261457895860076, 0.0046436288394033909, 0.0062265656888484955, 0.0019467950332909822, 0.0049541359767317772, 0.0011295328149572015, 0.0021540357265621424, 0.0035314194392412901, 0.0033034670632332563, 0.0054244184866547585, 0.0042422087863087654, 0.0042528985068202019, 0.004414727445691824, 0.0039261961355805397, 0.0036652542185038328, 0.0011691458057612181, 0.006160407792776823, 0.0041578593663871288, 0.0011839806102216244, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 622, 927, 1655, 463, 9330, 14116, 2484, -138, -691, -530, 837, 1060, 3363, 986, 26305, 2818, 1644, -1233, -472, 3352, -1589, 11181, 10028, 8790, 5786, 225, 4106, 4305, 7664, -631, 8250, 6640, 410, -36, 5214, 3523, -1738, 177, -878, 5128, 1041, -590, -1126, -41, 1060, 3380, 695, 949, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00039491488132625818, 0.00076039659325033426, 0.00033767562126740813, 0.00029802840435877442, 0.0002374026516918093, 0.00028947836835868657, 0.00044962894753552973, 0.00021429867774713784, 0.00041477446211501956, 0.00077570183202624321, 0.0012233827728778124, 0.00029715074924752116, 0.00038137933006510139, 0.00078062701504677534, 0.0001361276808893308, 0.00041857585893012583, 0.00031527518876828253, 0.00032644777093082666, 0.00019956896721851081, 0.00027200905606150627, 0.00037236744537949562, 0.00022939058544579893, 0.00036968156928196549, 0.00017623898747842759, 0.00027734844479709864, 0.00033306499244645238, 0.0017027843277901411, 0.0004331632808316499, 0.00022936829191166908, 0.00040707713924348354, 0.00031055544968694448, 0.00018346846627537161, 0.00091241666814312339, 0.00029113222262822092, 0.00071403273614123464, 0.00053614022908732295, 0.00079561799066141248, 0.00030642686760984361, 0.00023044006957206875, 0.00036159931914880872, 0.00017077267693821341, 0.00030195977888070047, 0.0003027571365237236, 0.00024990810197778046, 0.0018430481432005763, 0.00041394704021513462, 0.000393450609408319, 0.0011929165339097381, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,-3,6,62,-28,41,19,-30, 
  /* [1][0][][] */ 18,87,54,11,30,-50,125,127, 
  /* [2][0][][] */ -53,-10,7,-9,-127,-1,1,-11, 
  /* [3][0][][] */ 85,-8,8,-109,-127,18,38,-20, 
  /* [4][0][][] */ -127,51,9,-10,57,-4,47,14, 
  /* [5][0][][] */ -119,-36,28,-20,-127,13,0,85, 
  /* [6][0][][] */ -4,-127,19,-12,14,-15,-8,38, 
  /* [7][0][][] */ -70,3,-3,104,127,-43,-34,4, 
  /* [8][0][][] */ 72,7,2,-127,0,-21,-53,-41, 
  /* [9][0][][] */ 9,-127,3,-5,8,91,-38,69, 
  /* [10][0][][] */ -67,-7,-11,18,-127,56,61,-11, 
  /* [11][0][][] */ 121,26,31,22,-55,-67,-35,-127, 
  /* [12][0][][] */ -1,23,35,-4,12,-85,127,68, 
  /* [13][0][][] */ 75,-17,-37,-24,120,127,121,-42, 
  /* [14][0][][] */ 127,90,-3,35,-107,-16,-18,-19, 
  /* [15][0][][] */ -20,-127,4,-12,26,1,0,40, 
  /* [16][0][][] */ -81,-29,3,-9,-127,-9,9,2, 
  /* [17][0][][] */ -26,95,-112,2,9,-127,108,-74, 
  /* [18][0][][] */ 127,-27,-51,23,-56,26,6,91, 
  /* [19][0][][] */ 127,-92,-34,-13,77,5,23,17, 
  /* [20][0][][] */ 127,19,-5,116,-3,35,-11,-64, 
  /* [21][0][][] */ 17,44,-61,17,-31,106,-127,-94, 
  /* [22][0][][] */ -127,26,29,-15,-40,6,-46,-18, 
  /* [23][0][][] */ -36,-49,6,25,-127,56,77,-12, 
  /* [24][0][][] */ 127,-11,-22,-18,-67,-13,4,24, 
  /* [25][0][][] */ 25,-3,1,-24,127,50,49,-36, 
  /* [26][0][][] */ 15,-86,-3,-32,0,-127,85,-46, 
  /* [27][0][][] */ -14,-127,31,-15,-8,-54,32,-9, 
  /* [28][0][][] */ -91,72,-32,19,-15,-19,127,76, 
  /* [29][0][][] */ -12,45,11,10,-5,41,-105,-127, 
  /* [30][0][][] */ 127,-30,-6,6,-63,19,-47,-33, 
  /* [31][0][][] */ -45,-22,66,-17,44,-126,127,98, 
  /* [32][0][][] */ -66,27,-2,6,-127,-99,-93,40, 
  /* [33][0][][] */ -23,18,-6,20,-127,-66,-54,19, 
  /* [34][0][][] */ 15,-127,54,-13,-14,95,-69,50, 
  /* [35][0][][] */ -30,-49,-127,-11,2,-65,44,-54, 
  /* [36][0][][] */ 5,127,58,11,-10,13,-20,-31, 
  /* [37][0][][] */ -127,26,41,-19,66,-17,1,-90, 
  /* [38][0][][] */ -127,-15,-45,-18,41,23,38,122, 
  /* [39][0][][] */ -17,-14,79,3,24,-98,127,80, 
  /* [40][0][][] */ -27,-19,-23,-40,-127,103,111,-32, 
  /* [41][0][][] */ -127,46,10,-66,-93,-97,-96,57, 
  /* [42][0][][] */ -51,-127,-82,-14,7,80,-121,-87, 
  /* [43][0][][] */ -76,15,-34,-127,99,60,75,13, 
  /* [44][0][][] */ 121,-16,12,-127,46,-23,-17,48, 
  /* [45][0][][] */ -12,-127,6,23,-24,-71,72,-9, 
  /* [46][0][][] */ 116,-7,-7,-24,127,-38,-28,6, 
  /* [47][0][][] */ 127,0,-16,127,-6,20,22,-41, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00070572225376963615, 0.0013588466681540012, 0.00060343433870002627, 0.00053258379921317101, 0.00042424415005370975, 0.00051730469567701221, 0.00080349756171926856, 0.00038295681588351727, 0.0007412117556668818, 0.001386197516694665, 0.0021862138528376818, 0.00053101539378985763, 0.00068153388565406203, 0.0013949989806860685, 0.00024326337734237313, 0.00074800493894144893, 0.00056340423179790378, 0.00058336986694484949, 0.00035663446760736406, 0.00048608661745674908, 0.00066542945569381118, 0.00040992640424519777, 0.00066062971018254757, 0.00031494323047809303, 0.00049562822096049786, 0.00059519504429772496, 0.0030429158359766006, 0.00077407300705090165, 0.0004098865611013025, 0.00072745647048577666, 0.00055496994173154235, 0.00032786247902549803, 0.0016305102035403252, 0.00052026018965989351, 0.0012759934179484844, 0.00095809524646028876, 0.0014217881252989173, 0.00054759206250309944, 0.00041180185507982969, 0.00064618652686476707, 0.00030517482082359493, 0.00053960928926244378, 0.00054103415459394455, 0.000446591671789065, 0.0032935705967247486, 0.0007397331646643579, 0.00070310552837327123, 0.0021317701321095228, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -41681, 26600, -17507, -14071, 19925, -5291, 30689, 44908, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00045487238094210625, 0.00072246958734467626, 0.0014520240947604179, 0.0016592813190072775, 0.00073986744973808527, 0.00066008360590785742, 0.00069614569656550884, 0.0010302672162652016, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -48,-14,-24,30,5,-33,11,4,-114,118,-38,109,127,18,80,-19,-2,-46,8,-8,-17,1,-8,-41,28,-90,14,57,-19,6,24,-36,3,-95,100,16,-16,3,-12,-6,125,5,56,-30,-35,41,-12,-6, 
  /* [1][0][][] */ -6,35,127,4,-1,-29,8,-76,28,-3,26,-2,-21,6,-11,-121,12,-63,18,0,-22,35,22,-29,-18,-8,26,-4,12,-18,17,1,0,8,12,0,-12,-31,72,-54,18,45,-6,25,-11,11,22,-10, 
  /* [2][0][][] */ 11,-48,11,-41,31,28,-4,-27,3,4,-6,29,-9,61,13,0,-49,127,-28,-14,-21,29,-41,-9,121,-10,3,-5,-26,-4,3,-38,-4,5,3,8,-8,-8,-16,6,11,-20,-16,-3,9,17,-27,-41, 
  /* [3][0][][] */ -2,-77,3,3,5,-10,-9,4,-9,-13,13,19,16,-10,43,0,-17,-18,7,22,0,17,-26,3,6,49,11,4,-5,4,127,-1,11,2,-9,4,-21,-8,-12,11,-10,11,1,21,-6,2,-2,25, 
  /* [4][0][][] */ -96,7,6,3,-1,-47,-2,14,46,-44,16,-18,-38,9,-9,-6,5,-3,3,20,12,-16,17,7,1,48,-7,109,-3,-4,-1,-27,-10,-127,-30,18,6,-4,-1,-3,-50,-7,-8,12,-55,13,10,5, 
  /* [5][0][][] */ -11,22,11,9,-42,16,-5,34,-1,21,11,14,2,-39,12,29,0,-84,17,6,27,-38,1,41,9,-2,-71,-50,-42,-28,15,-4,-10,-55,21,-52,66,2,-35,22,14,-30,12,5,127,-21,-42,-12, 
  /* [6][0][][] */ -28,-23,-15,-1,32,-25,-3,-28,-10,-3,38,-17,-28,38,3,-59,2,3,-8,-25,-46,53,-2,-83,0,-14,-60,-63,22,59,-18,9,-10,-46,-24,76,-72,-52,0,-60,-6,15,15,42,127,-36,40,24, 
  /* [7][0][][] */ 9,36,-73,37,-27,16,5,68,8,-6,65,-28,12,-34,-14,4,-15,-127,38,-53,62,40,20,-64,16,-17,22,-1,-9,34,-16,3,0,24,3,-31,-13,-57,-38,-69,-12,-27,36,60,-32,-24,-13,11, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019332075491547585, 0.030704956501722336, 0.06171102449297905, 0.070519454777240753, 0.03144436702132225, 0.028053553774952888, 0.029586192220449448, 0.04378635436296463, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52104, -574, 9844, -1091, 6744, -5181, 1801, 32147, 1835, 36440, -2752, 22694, -6731, -1202, 28979, 13825, 48, 15816, 32504, 10960, 66, -47, -122, 14671, -8257, 26973, 44925, 35697, 3548, 1266, -2345, 930, 1079, 17184, -6996, 17230, -11719, 16619, -22075, 115172, 19660, 20214, 11362, -1652, 14488, 4527, 1519, -28, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031592047889716923, 0.00025709101464599371, 0.00016670675540808588, 0.00028704330907203257, 0.00011728136450983584, 9.3014903541188687e-05, 0.00069379864726215601, 0.00010773426765808836, 0.00011174551036674529, 0.00013652056804858148, 7.8353405115194619e-05, 0.00019135558977723122, 0.00024167766969185323, 0.00016772920207586139, 8.773763693170622e-05, 0.00011648215149762109, 0.00023583507572766393, 0.00025682832347229123, 7.2135677328333259e-05, 0.00015469192294403911, 0.00016576913185417652, 0.00021045116591267288, 0.00017672697140369564, 0.00013610094902105629, 0.00015794564387761056, 0.00014152671792544425, 0.0005787067930214107, 9.3277347332332283e-05, 0.00016634305939078331, 0.00072460301453247666, 0.00011939344403799623, 0.00018507411004975438, 0.00075362512143328786, 0.00017314187425654382, 0.00016403387417085469, 0.00014071354235056788, 0.00032870826544240117, 0.00015033758245408535, 0.00028894798015244305, 2.1158664821996354e-05, 0.00016596425848547369, 5.5113174312282354e-05, 0.00013928173575550318, 0.00015920422447379678, 0.00016535674512851983, 0.00010747586202342063, 0.00016802035679575056, 9.7778560302685946e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-1,20,112,3,82,-1,27,15,8,9,7,-9,-9,-45,8,0,8,-25,-112,-7,-22,127,-8,-4,3,-4,9,-4,3,16,100,21,27,36,-27,2,34,-1,3,17,-68,-7,-9,16,2,-6,-10, 127,10,15,-127,27,88,10,10,123,127,6,43,-51,-24,5,8,127,-56,-60,-56,-101,24,-109,15,16,67,-31,-86,23,19,10,-123,6,-63,127,10,-40,-47,-4,117,-79,-96,-28,3,-35,-9,-127,23, -33,-3,7,15,-1,66,4,17,27,8,-14,30,-14,-2,16,3,-102,28,-2,78,-32,-12,-18,-5,-5,-60,-2,29,-17,3,5,-21,9,-25,15,-17,-1,48,41,-11,50,36,-14,12,-43,2,0,-6, 
  /* [0][1][][] */ 124,9,1,-98,13,-27,35,-17,8,8,-12,54,-6,0,17,-33,2,-49,-61,-84,10,-75,-123,-16,5,93,-14,-127,-7,31,14,-106,18,-53,-4,127,-2,58,-40,42,-62,-127,39,-89,-45,-15,-11,-5, 26,-127,-127,116,-127,-127,-127,-127,-127,-97,127,-127,127,127,34,-127,-82,127,127,-106,127,127,111,127,127,-127,-127,28,-127,-127,95,127,-127,127,-29,-40,127,-127,127,127,127,-79,127,127,127,-123,103,105, 52,4,48,-13,5,-61,43,17,-25,14,-105,-8,1,-39,127,3,62,-65,-71,84,15,-46,11,-32,2,5,-38,69,20,38,1,4,33,-45,8,68,-5,65,67,-9,-81,7,-84,-31,28,-18,-9,5, 
  /* [0][2][][] */ -52,-5,26,-15,6,34,-37,21,6,-24,12,33,8,-5,-38,18,6,22,-14,106,5,-33,-15,-11,-4,20,0,53,-9,1,48,-31,-18,-44,-34,-38,0,30,9,-20,10,-6,42,-38,-38,17,-10,18, 68,126,75,22,15,-20,122,34,16,-4,44,26,-4,-1,-89,25,-57,-56,-37,122,-38,48,12,20,33,-63,-40,30,77,-1,127,21,85,-27,6,-34,-24,-18,-12,121,-26,-14,-39,45,20,-33,9,-127, -42,-5,6,-3,4,-5,-62,6,-20,-11,-41,-39,21,-9,-7,11,33,24,-10,-127,23,-10,5,-8,-6,9,-10,-54,-16,6,5,7,-21,86,-38,-21,-4,36,24,-59,5,6,-38,6,-42,127,-3,-3, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013426619581878185, 0.010926367715001106, 0.0070850369520485401, 0.012199340388178825, 0.0049844579771161079, 0.0039531332440674305, 0.029486441984772682, 0.0045787063427269459, 0.0047491840086877346, 0.0058021238073706627, 0.0033300197683274746, 0.008132612332701683, 0.010271300561726093, 0.0071284910663962364, 0.0037288493476808071, 0.0049504912458360195, 0.01002299040555954, 0.010915203019976616, 0.0030657663010060787, 0.0065744062885642052, 0.0070451879873871803, 0.0089441742748022079, 0.0075108963064849377, 0.0057842903770506382, 0.0067126895301043987, 0.0060148853808641434, 0.024595038965344429, 0.0039642872288823128, 0.007069579791277647, 0.0307956263422966, 0.0050742211751639843, 0.0078656496480107307, 0.032029066234827042, 0.0073585296049714088, 0.0069714398123323917, 0.0059803253971040249, 0.013970101252198219, 0.0063893473707139492, 0.012280289083719254, 0.00089924322674050927, 0.0070534809492528439, 0.0023423098027706146, 0.0059194737114012241, 0.0067661791108548641, 0.0070276614278554916, 0.0045677241869270802, 0.007140865083783865, 0.0041555888019502163, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 56056, 7006, 7581, 8225, 1555, 8078, -1903, -306, 1134, 2849, 2963, 409, 1751, -790, 694, -2121, 5197, 11893, -232, 19734, 4825, 2124, 9118, -633, 3319, 5978, 22758, 6646, -38, -2691, 77, 1604, -2201, 8397, 3777, 6675, 7407, 5045, 19211, 2007, -928, 2726, 1021, 5179, 4483, 2164, -1316, 2904, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.7548720582854003e-05, 0.00032116621150635183, 0.00020560642587952316, 0.00039136403938755393, 0.0014564960729330778, 0.00061727844877168536, 0.0010363184846937656, 0.0010871145641431212, 0.00050564465345814824, 0.00051001308020204306, 0.00077676074579358101, 0.00040958152385428548, 0.0005242455517873168, 0.00062793039251118898, 0.00064033351372927427, 0.0017146060708910227, 0.00030832042102701962, 0.00036255546729080379, 0.002144084544852376, 0.00013689628394786268, 0.00024612029665149748, 0.00046799422125332057, 0.00043102313065901399, 0.00081483047688379884, 0.00036870743497274816, 0.00019152487220708281, 0.0001766579516697675, 0.00054506130982190371, 0.0010542437667027116, 0.00096335407579317689, 0.00054715242004022002, 0.00051079248078167439, 0.00092335609951987863, 0.00026775422156788409, 0.00028332741931080818, 0.00027272684383206069, 0.00049376586684957147, 0.00026612862711772323, 0.00012072897516191006, 0.0022566979750990868, 0.00067547435173764825, 0.001010403037071228, 0.00046820272109471262, 0.00029044708935543895, 0.00027670359122566879, 0.00049328507157042623, 0.0008731991401873529, 0.0009207536350004375, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 59,27,4,-8,127,32,-44,-24, 
  /* [1][0][][] */ -15,-6,-2,127,15,-9,-3,9, 
  /* [2][0][][] */ 35,-127,-14,57,-1,-96,92,14, 
  /* [3][0][][] */ 127,-49,-2,16,-8,-20,18,-10, 
  /* [4][0][][] */ 6,-59,127,-26,-1,-50,21,-88, 
  /* [5][0][][] */ 49,-6,5,-15,127,15,-2,7, 
  /* [6][0][][] */ -22,93,-3,127,24,47,-72,-36, 
  /* [7][0][][] */ -2,127,-2,0,0,-4,3,-7, 
  /* [8][0][][] */ 127,83,-11,-17,-52,-35,21,-37, 
  /* [9][0][][] */ -127,27,0,29,34,11,-19,-8, 
  /* [10][0][][] */ -56,-12,-1,127,33,13,-13,0, 
  /* [11][0][][] */ -127,2,12,-61,26,11,-19,-39, 
  /* [12][0][][] */ 127,24,-1,17,-32,-32,16,-32, 
  /* [13][0][][] */ -25,90,-127,-13,11,98,-59,81, 
  /* [14][0][][] */ -32,-11,-15,127,10,-3,-6,-36, 
  /* [15][0][][] */ -4,127,0,-5,2,-16,8,-52, 
  /* [16][0][][] */ -25,-107,-16,12,-13,-127,117,8, 
  /* [17][0][][] */ 25,127,10,-7,0,76,-85,-18, 
  /* [18][0][][] */ -14,51,-127,-1,19,64,-41,60, 
  /* [19][0][][] */ -94,29,-19,-14,-127,-10,31,23, 
  /* [20][0][][] */ -127,-39,-4,-5,96,-25,43,1, 
  /* [21][0][][] */ -48,-7,-7,-9,-127,-3,5,-1, 
  /* [22][0][][] */ -127,3,4,-3,86,-10,45,37, 
  /* [23][0][][] */ -26,-25,-2,-11,7,94,-127,-100, 
  /* [24][0][][] */ -10,45,-127,4,15,45,-19,73, 
  /* [25][0][][] */ 109,-54,-11,127,-73,-12,5,-63, 
  /* [26][0][][] */ -2,-21,1,2,-2,127,123,-29, 
  /* [27][0][][] */ 53,-12,7,14,127,24,41,-4, 
  /* [28][0][][] */ 0,127,-55,19,17,77,-25,113, 
  /* [29][0][][] */ -4,16,-7,-8,-9,80,-127,-88, 
  /* [30][0][][] */ 2,-2,1,-127,-6,-4,-8,-17, 
  /* [31][0][][] */ -68,12,8,20,-127,11,1,-7, 
  /* [32][0][][] */ 16,37,4,-127,-5,15,-76,-109, 
  /* [33][0][][] */ -59,-10,-6,3,-127,35,42,7, 
  /* [34][0][][] */ -127,102,10,48,30,-29,18,-11, 
  /* [35][0][][] */ -10,127,-15,-7,-4,-86,53,-27, 
  /* [36][0][][] */ 3,55,9,-27,-1,90,-127,-30, 
  /* [37][0][][] */ 64,-107,-16,35,25,-118,127,-30, 
  /* [38][0][][] */ -6,-127,-8,0,0,58,-20,37, 
  /* [39][0][][] */ 5,-127,-12,-7,1,-3,-53,-103, 
  /* [40][0][][] */ 88,42,9,-14,-36,86,-127,-113, 
  /* [41][0][][] */ 6,-127,15,0,1,83,-42,114, 
  /* [42][0][][] */ 40,-27,9,-127,-60,-1,-20,-45, 
  /* [43][0][][] */ -107,-36,31,-127,76,10,-22,-12, 
  /* [44][0][][] */ -13,-16,-2,14,-25,74,127,-5, 
  /* [45][0][][] */ -127,-15,8,5,7,16,27,-20, 
  /* [46][0][][] */ -6,58,127,2,3,3,17,39, 
  /* [47][0][][] */ 13,19,9,127,-4,26,5,-30, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00019179965602234006, 0.00079433381324633956, 0.0005085221491754055, 0.00096795265562832355, 0.0036023219581693411, 0.0015267021954059601, 0.0025631051976233721, 0.0026887382846325636, 0.0012506005587056279, 0.0012614049483090639, 0.0019211465260013938, 0.0010130095761269331, 0.0012966057984158397, 0.0015530473319813609, 0.0015837238170206547, 0.0042407000437378883, 0.0007625625585205853, 0.00089670100715011358, 0.0053029204718768597, 0.00033858278766274452, 0.00060872430913150311, 0.0011574805248528719, 0.001066040713340044, 0.0020153035875409842, 0.00091191654792055488, 0.00047369455569423735, 0.00043692448525689542, 0.0013480889610946178, 0.00260743941180408, 0.0023826439864933491, 0.0013532609445974231, 0.0012633325532078743, 0.0022837177384644747, 0.00066223106114193797, 0.00070074794348329306, 0.0006745297578163445, 0.001221221056766808, 0.00065821048337966204, 0.00029859651112928987, 0.0055814450606703758, 0.001670636935159564, 0.0024990092497318983, 0.0011579962447285652, 0.00071835680864751339, 0.00068436533911153674, 0.0012200318742543459, 0.0021596655715256929, 0.0022772811353206635, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -5144, -27429, 23130, 18363, 7334, 322, 42089, 14315, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0013652454363182187, 0.00063950073672458529, 0.0013104027602821589, 0.0011113390792161226, 0.00092721550026908517, 0.0009716266649775207, 0.00076615042053163052, 0.00073638797039166093, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -6,-3,14,-93,9,20,8,7,2,9,-2,-6,94,0,-2,7,0,-6,-4,-3,76,1,-6,4,28,40,10,16,6,5,3,-127,13,9,-1,3,-28,1,-8,30,8,-27,-2,6,3,-5,5,-3, 
  /* [1][0][][] */ -37,-9,-4,-5,45,22,-25,86,24,6,-36,-29,9,0,16,39,0,45,18,-56,-5,20,127,22,-32,7,55,10,19,-3,21,-13,20,-12,-8,-23,2,-56,20,3,-8,-6,-79,-8,-38,7,-54,-102, 
  /* [2][0][][] */ -59,18,3,14,45,4,25,26,-14,56,10,-6,-1,0,3,51,0,16,-127,19,0,14,7,-15,-32,3,43,11,8,27,26,0,3,-11,-4,-9,14,6,7,4,35,-10,-33,3,20,-60,32,19, 
  /* [3][0][][] */ 2,4,0,1,-4,29,-1,-5,70,16,2,4,32,0,-29,-5,0,-2,-5,1,1,-2,8,-19,-9,-3,-11,-5,-10,-4,-8,-4,-45,48,-52,-8,9,1,4,-127,-1,5,1,-54,-1,-2,-4,5, 
  /* [4][0][][] */ -4,-5,81,41,0,-18,-8,-5,2,-1,-2,-7,-86,0,-15,8,0,8,8,3,59,1,4,-4,-16,19,-1,49,-3,-8,-2,93,7,5,1,-1,10,-10,-20,-17,1,-127,-2,7,4,-6,1,5, 
  /* [5][0][][] */ -8,46,9,-6,4,55,24,7,-23,30,8,65,30,0,-127,0,0,18,-37,20,-8,13,-11,39,-19,0,24,-6,-15,24,26,-14,46,32,-41,-9,16,20,-50,18,28,-12,-16,32,19,59,20,22, 
  /* [6][0][][] */ -27,-63,2,8,43,-45,-22,1,32,-26,-10,90,-5,0,-127,41,0,-6,50,-20,-4,1,28,-34,30,-9,-7,-10,44,-12,-13,-2,91,-31,26,-7,7,-5,-81,-21,-13,-15,-8,-28,-22,-84,-24,-28, 
  /* [7][0][][] */ -120,-28,-22,4,127,15,71,28,22,7,35,-45,-27,0,88,115,0,8,4,64,-8,-10,-34,39,18,3,49,2,56,67,63,-7,-7,-13,-25,-25,3,24,18,35,74,6,-30,-23,66,2,70,89, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.058022931218147278, 0.027178781107068062, 0.055692117661237717, 0.047231908887624741, 0.039406657218933105, 0.041294131428003311, 0.032561391592025757, 0.031296487897634506, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 67026, 47686, 62374, 43784, -715, 14152, 2534, 29308, 24161, 29831, 28656, 5538, -45023, -127, 41758, 1115, -204, 38103, 1178, 3013, -14549, 11404, 50397, 35609, -13112, 24297, 41419, 21287, -1774, 15744, -6820, -52449, 13923, 109125, 27083, 1223, 61509, 154, 144377, -24985, 16807, -27531, 1892, 102310, -2642, 66116, 2495, -23334, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.0219873527530581e-05, 8.4513281763065606e-05, 0.00015561887994408607, 0.00010710107017075643, 0.00013318173296283931, 0.00017591739015188068, 0.00011858119978569448, 5.972417420707643e-05, 9.3496382760349661e-05, 3.0046556275920011e-05, 8.2814018242061138e-05, 2.8004413252347149e-05, 0.00015221761714201421, 0.005541567225009203, 6.0611131630139425e-05, 0.00023074958880897611, 0.0027484172023832798, 2.1442372599267401e-05, 0.00010030822886619717, 0.00016383270849473774, 0.00010417134762974456, 0.00014497376105282456, 0.00011623699538176879, 3.4748420148389414e-05, 6.8309076596051455e-05, 0.00011253921547904611, 3.1992680305847898e-05, 4.240613998263143e-05, 0.00027115401462651789, 4.5539742131950334e-05, 5.035441427025944e-05, 0.00018371119222138077, 0.00017748240497894585, 1.148705450759735e-05, 9.0419816842768341e-05, 0.00022448082745540887, 1.6419060557382181e-05, 0.0004524887481238693, 3.1879724701866508e-05, 8.6474661657121032e-05, 5.5438802519347519e-05, 0.00019949921988882124, 0.00010120071237906814, 1.0264679985994007e-05, 0.00013554029283113778, 9.103232150664553e-05, 0.00019454529683571309, 0.00012333478662185371, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-22,-8,-18,8,-39,-79,-70,-29,-51,8,66,34,-71,116,-44,-113,-83,37,-7,-3,-72,-111,-80,-33,-123,-65,-22,70,15,94,30,-127,-91,-7,56,18,47,-127,77,-77,-13,106,-109,-2,-36,-87,110, 75,12,-29,-30,57,-127,-127,-83,60,-76,-115,107,39,-82,0,61,-52,-112,59,4,11,-113,-127,-71,-2,-127,-122,-40,-57,21,-56,54,29,-127,66,84,11,71,-93,127,-127,7,123,-127,2,-23,-127,98, -32,43,5,-8,-63,-112,-60,-19,89,-7,-127,39,9,-71,-101,-12,-127,-28,28,11,-15,-79,-37,-24,-10,-30,-59,-11,-12,18,-25,12,105,-89,71,33,13,34,-5,16,-79,4,7,-83,-16,5,-56,16, 
  /* [0][1][][] */ -85,-127,-44,-45,-9,56,100,-106,-26,-109,-20,116,89,-64,28,-97,-121,-94,90,-76,39,-87,-102,-127,42,-113,-77,-37,127,-60,127,88,-43,-88,-13,83,-37,-77,-106,89,41,60,106,-109,-90,-117,79,120, 127,-81,-127,-127,127,43,95,-127,101,-127,-108,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-118,-119,127,-97,-127,-127,-124,-127,-71,127,29,-113,127,127,-70,-127,-95,89,60,127,127,-117,-112,-127,121,127, -52,31,-62,-86,-118,-24,31,-38,127,-19,-76,37,56,-70,-26,-44,-37,-29,54,-72,57,-80,-38,-25,48,-6,-46,-60,14,-89,-34,22,28,-98,117,25,-39,-63,2,-14,36,54,9,-78,-58,-36,63,35, 
  /* [0][2][][] */ -61,-105,-33,-33,1,35,-6,-36,-36,-60,-18,63,75,-127,-127,-64,-43,-22,65,75,50,-35,-12,-61,30,-50,-12,-54,76,29,76,65,107,-29,-37,-11,-96,34,-17,31,9,37,16,-59,96,-77,2,32, 88,-73,-87,-84,81,20,6,-49,48,-71,-33,57,83,-26,16,93,-24,-34,77,117,81,-55,-18,-57,90,-64,-19,-96,-53,40,-44,111,-17,-51,70,7,-127,50,-14,-1,9,32,16,-69,127,-101,-12,42, -28,28,-42,-36,-78,-20,21,-12,60,-4,-15,36,30,-43,112,-29,-93,-5,31,58,74,-30,0,-4,40,0,-4,-63,-14,29,-20,41,-90,-43,67,2,-21,21,28,-38,6,35,-4,-17,62,-34,-5,19, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0038343446794897318, 0.003591814311221242, 0.0066138021647930145, 0.0045517953112721443, 0.0056602233089506626, 0.0074764890596270561, 0.005039700772613287, 0.0025382773019373417, 0.0039735962636768818, 0.0012769786408171058, 0.0035195956006646156, 0.0011901875259354711, 0.006469248328357935, 0.23551659286022186, 0.0025759730488061905, 0.0098068574443459511, 0.1168077290058136, 0.00091130082728341222, 0.0042630997486412525, 0.0069628898054361343, 0.0044272821396589279, 0.0061613847501575947, 0.0049400720745325089, 0.0014768077526241541, 0.0029031357262283564, 0.0047829165123403072, 0.0013596888165920973, 0.0018022608710452914, 0.011524045839905739, 0.0019354389514774084, 0.002140062628313899, 0.0078077255748212337, 0.0075430017895996571, 0.00048819981748238206, 0.0038428420666605234, 0.0095404349267482758, 0.00069781008642166853, 0.01923077180981636, 0.00135488819796592, 0.0036751730367541313, 0.002356149023398757, 0.0084787169471383095, 0.0043010301887989044, 0.00043624889804050326, 0.0057604624889791012, 0.0038688736967742443, 0.0082681747153401375, 0.005241728387773037, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4125, 92, 9717, 6394, 6112, 7547, 9918, -25, -43, -353, 2007, 428, 11557, -80196872, 2352, 19351, -64739076, -103, -538, 13272, 3897, -15, 5, 407, 3492, -791, 48, 728, 4092, 1387, 2883, 13730, 3722, 290, 250, -1923, 371, 3441, -126, 11377, 1936, 12691, -299, -87, 15089, 137, 10668, 3758, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00050592684419825673, 0.00044746469939127564, 0.00032709786319173872, 0.00029273310792632401, 0.00032602465944364667, 0.00028060033218935132, 0.00038376593147404492, 0.001396598294377327, 0.00046625692630186677, 0.0021369028836488724, 0.00072527874726802111, 0.0020385351963341236, 0.00018796981021296233, 2.0223189789447815e-09, 0.0011301708873361349, 0.00017165910685434937, 2.0223189789447815e-09, 0.0070536187849938869, 0.00036450248444452882, 0.000289256771793589, 0.0002709042455535382, 0.0052962731570005417, 0.0003884832258336246, 0.0014481291873380542, 0.0010660260450094938, 0.00072969502070918679, 0.0026452392339706421, 0.0017154118977487087, 0.00027480802964419127, 0.0020948757883161306, 0.0010286535834893584, 0.00017169622879009694, 0.00020032106840517372, 0.011040603742003441, 0.00056844123173505068, 0.00061016646213829517, 0.0041318954899907112, 0.00037155434256419539, 0.0029589266050606966, 0.00030310812871903181, 0.0014816628536209464, 0.00017402654339093715, 0.00046306964941322803, 0.010246582329273224, 0.0003350930055603385, 0.00051623163744807243, 0.00026547419838607311, 0.00023999222321435809, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 11,-127,55,-48,26,-24,-48,21, 
  /* [1][0][][] */ 79,84,-14,-95,23,8,-92,127, 
  /* [2][0][][] */ 31,7,-50,124,49,127,46,98, 
  /* [3][0][][] */ 81,71,-90,127,-100,-13,-15,9, 
  /* [4][0][][] */ -41,-96,65,22,10,27,-41,-127, 
  /* [5][0][][] */ 15,1,-37,51,5,-39,41,127, 
  /* [6][0][][] */ 42,-7,-127,-64,80,10,46,-17, 
  /* [7][0][][] */ 127,17,25,-23,23,-11,84,-61, 
  /* [8][0][][] */ 7,-92,16,114,0,24,-14,-127, 
  /* [9][0][][] */ 107,-120,22,-6,-12,19,-127,99, 
  /* [10][0][][] */ -127,-50,-104,12,-7,7,-106,51, 
  /* [11][0][][] */ -16,-46,-19,-114,-127,-28,51,-20, 
  /* [12][0][][] */ 16,7,-48,71,-78,-23,55,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -4,-29,-6,14,38,127,48,34, 
  /* [15][0][][] */ 43,12,6,-127,69,38,-41,87, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 16,20,127,29,-31,-9,24,33, 
  /* [18][0][][] */ 93,-125,33,44,-1,22,-127,10, 
  /* [19][0][][] */ -127,-11,45,57,-87,-54,-93,96, 
  /* [20][0][][] */ 36,39,-41,127,-50,-127,-2,71, 
  /* [21][0][][] */ 67,14,127,9,-10,-15,62,15, 
  /* [22][0][][] */ -72,-12,-127,5,10,0,-89,11, 
  /* [23][0][][] */ -100,124,-12,-9,3,-13,127,-73, 
  /* [24][0][][] */ 7,-49,-48,92,-9,-60,95,127, 
  /* [25][0][][] */ 16,41,38,30,127,95,-72,-56, 
  /* [26][0][][] */ -86,-23,-127,3,5,15,-93,3, 
  /* [27][0][][] */ -2,-24,-41,8,-42,127,82,57, 
  /* [28][0][][] */ -1,-27,-19,54,23,127,51,56, 
  /* [29][0][][] */ 73,24,127,1,-11,-12,68,-3, 
  /* [30][0][][] */ -92,127,-33,-39,9,-7,110,-54, 
  /* [31][0][][] */ -46,-70,1,-1,25,-74,127,108, 
  /* [32][0][][] */ 8,7,-52,121,-15,98,94,127, 
  /* [33][0][][] */ -4,56,-16,-103,16,-13,-11,127, 
  /* [34][0][][] */ -19,85,10,-81,41,-18,4,127, 
  /* [35][0][][] */ 127,10,-26,-47,23,62,109,-45, 
  /* [36][0][][] */ -127,-6,29,61,-35,14,-100,79, 
  /* [37][0][][] */ -7,-28,-10,33,37,127,47,54, 
  /* [38][0][][] */ 14,14,-1,72,127,-15,-15,31, 
  /* [39][0][][] */ 8,33,32,-123,38,3,-44,127, 
  /* [40][0][][] */ 88,32,127,2,-15,-7,87,-4, 
  /* [41][0][][] */ -2,-29,-35,99,49,127,74,114, 
  /* [42][0][][] */ -81,-3,127,13,-36,8,-22,58, 
  /* [43][0][][] */ -21,-53,14,94,-20,-1,18,-127, 
  /* [44][0][][] */ 42,10,-70,-127,69,-57,-2,-117, 
  /* [45][0][][] */ -84,127,9,-47,16,-2,59,-51, 
  /* [46][0][][] */ -127,-26,44,33,-42,50,-99,54, 
  /* [47][0][][] */ 96,22,98,-16,46,-43,127,-18, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00098492775578051805, 0.00087111484026536345, 0.00063678721198812127, 0.0005698866443708539, 0.00063469790620729327, 0.00054626679047942162, 0.00074710743501782417, 0.0027188681997358799, 0.00090769917005673051, 0.0041600773110985756, 0.00141195731703192, 0.003968577366322279, 0.00036593567347154021, 3.937008052901092e-09, 0.0022001927718520164, 0.00033418231760151684, 3.937008052901092e-09, 0.013731836341321468, 0.00070960575249046087, 0.00056311895605176687, 0.00052739068632945418, 0.010310673154890537, 0.00075629097409546375, 0.0028191872406750917, 0.002075317082926631, 0.0014205548213794827, 0.00514969602227211, 0.003339527640491724, 0.00053499045316129923, 0.0040782601572573185, 0.0020025609992444515, 0.00033425458241254091, 0.00038998082163743675, 0.021493613719940186, 0.0011066293809562922, 0.0011878592194989324, 0.0080438870936632156, 0.00072333414573222399, 0.0057603758759796619, 0.00059008452808484435, 0.0028844699263572693, 0.00033879120019264519, 0.00090149423340335488, 0.019947830587625504, 0.00065235199872404337, 0.0010049889096990228, 0.00051681959303095937, 0.00046721179387532175, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 220, -43184, -5588, -10588, -30665, -3278, -22872, -30627, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0022735097445547581, 0.0022943057119846344, 0.0027127508074045181, 0.0011978201800957322, 0.00099182978738099337, 0.0020689298398792744, 0.0014658491127192974, 0.00098203902598470449, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-25,9,-4,121,1,-2,-1,-1,-127,-92,-7,0,115,-5,0, 
  /* [1][0][][] */ 0,-25,0,85,71,17,23,11,0,-8,127,-50,0,27,-18,0, 
  /* [2][0][][] */ 0,3,-1,-12,-67,1,10,-4,0,-2,-18,2,0,127,-10,0, 
  /* [3][0][][] */ 0,-15,-17,-127,79,29,60,14,-1,64,0,46,0,0,13,0, 
  /* [4][0][][] */ 0,48,-26,35,-63,30,127,10,0,-65,21,2,0,-8,7,0, 
  /* [5][0][][] */ 0,-19,-10,-3,-20,-21,-7,15,0,10,-4,-47,0,-5,127,0, 
  /* [6][0][][] */ 0,13,0,-1,47,-20,-31,-8,0,-109,121,59,0,127,55,0, 
  /* [7][0][][] */ 0,13,-11,127,11,1,22,9,0,71,-53,74,0,-8,53,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.096624165773391724, 0.097507990896701813, 0.11529190838336945, 0.050907354801893234, 0.042152766138315201, 0.087929517030715942, 0.062298588454723358, 0.041736658662557602, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 10458, 44544, 11091, 10350, 601, 14585, 541, -13499, 5549, 29630, 14458, -445, 26232, 11260, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00024598807794973254, 9.0315479610580951e-05, 0.00032136449590325356, 0.00017327952082268894, 0.0055258129723370075, 0.00034967341343872249, 0.0072239800356328487, 1.8467526388121769e-05, 0.0003264200349804014, 0.00019728427287191153, 0.00072456838097423315, 0.00072724185883998871, 0.00024671526625752449, 0.00018824177095666528, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-83,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,88,-2,-72,67,-94,77,-95,-27,3,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,16,-29,14,-28,0,3,-110,-49,8,-30,-14, -78,-42,-58,-15,-8,-26,8,-28,-108,-89,21,-13,-104,-127,1,23, 14,1,63,2,3,34,-25,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-73,66,2,-7,39,-39,52,-76,0,0,5,40,2,-27,23, 23,-5,30,-2,-27,40,-34,21,-125,-13,0,84,-58,0,-29,-111, 21,-8,18,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.010454492643475533, 0.0038384078070521355, 0.013657990843057632, 0.0073643792420625687, 0.23484703898429871, 0.014861119911074638, 0.30701914429664612, 0.00078486982965841889, 0.013872851617634296, 0.0083845816552639008, 0.030794154852628708, 0.030907778069376945, 0.010485398583114147, 0.008000275120139122, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 8406, -77855, 43931, 376736, -4846, 58261, -9920, -138405, 74133, 27053, 351295, -1073741824, 74456, 44958, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00012463532038964331, 0.00018386830925010145, 3.7555681046796963e-05, 9.4862498372094706e-06, 0.00018045444448944181, 6.3066152506507933e-05, 0.00021278795611578971, 3.4784623039740836e-06, 3.1827126804273576e-05, 0.00011018954683095217, 1.5985091522452421e-05, 1.1533876076441629e-09, 5.1279090257594362e-05, 4.8508256440982223e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 40,-10,21, -6,-27,8, -126,-127,-76, 
  /* [1][1][][] */ 0,-10,-7, -20,1,-9, 2,-32,0, 
  /* [1][2][][] */ -2,16,-4, -3,6,-5, 37,-20,8, 
  /* [2][0][][] */ 36,10,-1, 65,117,0, 28,-37,1, 
  /* [2][1][][] */ 11,23,2, 54,127,-27, 5,-8,-13, 
  /* [2][2][][] */ 40,-59,16, 57,-41,-24, 15,-59,3, 
  /* [3][0][][] */ 1,32,0, 24,91,19, -5,2,-8, 
  /* [3][1][][] */ 13,36,2, 56,127,27, -19,-22,-1, 
  /* [3][2][][] */ 3,7,5, 25,32,11, -5,-5,1, 
  /* [4][0][][] */ 28,74,-18, 8,94,-10, -14,25,7, 
  /* [4][1][][] */ 29,91,47, 11,127,34, 27,64,-4, 
  /* [4][2][][] */ 56,83,43, 40,125,23, -19,34,36, 
  /* [5][0][][] */ 13,3,-113, 3,3,-103, -1,28,-27, 
  /* [5][1][][] */ 9,-42,-127, -2,-43,-116, -1,11,-22, 
  /* [5][2][][] */ -1,10,-10, 0,-6,-11, -3,8,-15, 
  /* [6][0][][] */ 24,-61,35, 46,-86,40, 8,-21,8, 
  /* [6][1][][] */ 34,-95,60, 61,-127,69, 4,-31,14, 
  /* [6][2][][] */ 18,-35,12, 12,-45,25, -17,3,-3, 
  /* [7][0][][] */ -31,17,4, -108,-39,1, -24,23,2, 
  /* [7][1][][] */ -13,-8,1, -127,-93,-7, -6,-5,5, 
  /* [7][2][][] */ -23,30,-9, -13,11,0, -22,25,-3, 
  /* [8][0][][] */ 123,127,114, 122,127,113, 123,125,112, 
  /* [8][1][][] */ 124,125,113, 121,124,111, 122,124,111, 
  /* [8][2][][] */ 122,124,112, 121,124,111, 122,123,111, 
  /* [9][0][][] */ -14,2,13, -13,-8,-3, 9,8,-8, 
  /* [9][1][][] */ 100,111,-5, 82,127,21, -3,19,27, 
  /* [9][2][][] */ -20,-23,23, 12,-27,8, 16,4,-17, 
  /* [10][0][][] */ -25,-83,-18, 34,94,20, -8,-12,-2, 
  /* [10][1][][] */ -59,-103,-14, 79,127,14, -17,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -8,-1,7, 
  /* [11][0][][] */ -10,-15,13, 11,-30,19, 8,-91,-43, 
  /* [11][1][][] */ -36,-26,-2, -25,-44,-19, -13,-52,-44, 
  /* [11][2][][] */ 3,-27,-62, 119,127,70, -29,19,-35, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-98,-17, -61,-112,-24, -9,-19,-5, 
  /* [13][1][][] */ 62,114,16, 58,127,25, 8,15,12, 
  /* [13][2][][] */ -8,-20,3, 1,-20,-1, 1,3,-4, 
  /* [14][0][][] */ 48,-4,-36, 81,-26,-50, 35,-7,-18, 
  /* [14][1][][] */ 90,-16,-73, 127,-41,-89, 59,-20,-37, 
  /* [14][2][][] */ 58,-7,-41, 75,-21,-51, 27,-7,-16, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.031782004982233047, 0.046886414289474487, 0.0095766978338360786, 0.0024189935065805912, 0.04601588100194931, 0.01608186773955822, 0.054260924458503723, 0.0008870078600011766, 0.0081159165129065514, 0.02809833362698555, 0.0040761982090771198, 2.9411381774480105e-07, 0.013076167553663254, 0.012369604781270027, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.51366901397705078, } };
const TfArray<1, int> quant46_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.40432146191596985, } };
const TfArray<1, int> quant50_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.51942938566207886, } };
const TfArray<1, int> quant53_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.559589684009552, } };
const TfArray<1, int> quant54_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.31247454881668091, } };
const TfArray<1, int> quant58_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.25728911161422729, } };
const TfArray<1, int> quant61_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.3195035457611084, } };
const TfArray<1, int> quant62_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.27308276295661926, } };
const TfArray<1, int> quant65_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.41781696677207947, } };
const TfArray<1, int> quant66_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.052810404449701309, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.12626717984676361, } };
const TfArray<1, int> quant69_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
